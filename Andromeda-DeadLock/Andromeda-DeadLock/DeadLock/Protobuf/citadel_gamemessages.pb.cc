// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: citadel_gamemessages.proto

#include "citadel_gamemessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgClientServerHeader::CMsgClientServerHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.game_instance_id_)*/uint64_t{0u}
  , /*decltype(_impl_.local_player_index_)*/0u
  , /*decltype(_impl_.msg_id_)*/10} {}
struct CMsgClientServerHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientServerHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientServerHeaderDefaultTypeInternal() {}
  union {
    CMsgClientServerHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientServerHeaderDefaultTypeInternal _CMsgClientServerHeader_default_instance_;
PROTOBUF_CONSTEXPR CMsgGameServerToClientGameCompleted::CMsgGameServerToClientGameCompleted(
    ::_pbi::ConstantInitialized) {}
struct CMsgGameServerToClientGameCompletedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGameServerToClientGameCompletedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGameServerToClientGameCompletedDefaultTypeInternal() {}
  union {
    CMsgGameServerToClientGameCompleted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGameServerToClientGameCompletedDefaultTypeInternal _CMsgGameServerToClientGameCompleted_default_instance_;
PROTOBUF_CONSTEXPR CMsgGameServerToClientGoodbye::CMsgGameServerToClientGoodbye(
    ::_pbi::ConstantInitialized) {}
struct CMsgGameServerToClientGoodbyeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGameServerToClientGoodbyeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGameServerToClientGoodbyeDefaultTypeInternal() {}
  union {
    CMsgGameServerToClientGoodbye _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGameServerToClientGoodbyeDefaultTypeInternal _CMsgGameServerToClientGoodbye_default_instance_;
PROTOBUF_CONSTEXPR CMsgGameServerToClientConnectionStatus_Player::CMsgGameServerToClientConnectionStatus_Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.inactivity_ticking_)*/false
  , /*decltype(_impl_.inactivity_ms_remaining_)*/0u
  , /*decltype(_impl_.inactivity_anim_ms_remaining_)*/0u
  , /*decltype(_impl_.player_slot_)*/-1
  , /*decltype(_impl_.status_)*/1} {}
struct CMsgGameServerToClientConnectionStatus_PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGameServerToClientConnectionStatus_PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGameServerToClientConnectionStatus_PlayerDefaultTypeInternal() {}
  union {
    CMsgGameServerToClientConnectionStatus_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGameServerToClientConnectionStatus_PlayerDefaultTypeInternal _CMsgGameServerToClientConnectionStatus_Player_default_instance_;
PROTOBUF_CONSTEXPR CMsgGameServerToClientConnectionStatus::CMsgGameServerToClientConnectionStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgGameServerToClientConnectionStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGameServerToClientConnectionStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGameServerToClientConnectionStatusDefaultTypeInternal() {}
  union {
    CMsgGameServerToClientConnectionStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGameServerToClientConnectionStatusDefaultTypeInternal _CMsgGameServerToClientConnectionStatus_default_instance_;
PROTOBUF_CONSTEXPR CClientReconnectInfo::CClientReconnectInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.server_steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}
  , /*decltype(_impl_.time_updated_)*/0u
  , /*decltype(_impl_.udp_connect_ip_)*/0u
  , /*decltype(_impl_.udp_connect_port_)*/0u
  , /*decltype(_impl_.compatibility_version_)*/0u} {}
struct CClientReconnectInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CClientReconnectInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CClientReconnectInfoDefaultTypeInternal() {}
  union {
    CClientReconnectInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CClientReconnectInfoDefaultTypeInternal _CClientReconnectInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientAccountSyncStorageFile::CMsgClientAccountSyncStorageFile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.version_)*/0u} {}
struct CMsgClientAccountSyncStorageFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientAccountSyncStorageFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientAccountSyncStorageFileDefaultTypeInternal() {}
  union {
    CMsgClientAccountSyncStorageFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientAccountSyncStorageFileDefaultTypeInternal _CMsgClientAccountSyncStorageFile_default_instance_;
static ::_pb::Metadata file_level_metadata_citadel_5fgamemessages_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_citadel_5fgamemessages_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_citadel_5fgamemessages_2eproto = nullptr;

const uint32_t TableStruct_citadel_5fgamemessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgClientServerHeader, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServerHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientServerHeader, _impl_.game_instance_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServerHeader, _impl_.local_player_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServerHeader, _impl_.payload_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServerHeader, _impl_.msg_id_),
  1,
  2,
  0,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerToClientGameCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerToClientGoodbye, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerToClientConnectionStatus_Player, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerToClientConnectionStatus_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerToClientConnectionStatus_Player, _impl_.player_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerToClientConnectionStatus_Player, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerToClientConnectionStatus_Player, _impl_.inactivity_ticking_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerToClientConnectionStatus_Player, _impl_.inactivity_ms_remaining_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerToClientConnectionStatus_Player, _impl_.inactivity_anim_ms_remaining_),
  3,
  4,
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerToClientConnectionStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerToClientConnectionStatus, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::CClientReconnectInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientReconnectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientReconnectInfo, _impl_.server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CClientReconnectInfo, _impl_.lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CClientReconnectInfo, _impl_.time_updated_),
  PROTOBUF_FIELD_OFFSET(::CClientReconnectInfo, _impl_.udp_connect_ip_),
  PROTOBUF_FIELD_OFFSET(::CClientReconnectInfo, _impl_.udp_connect_port_),
  PROTOBUF_FIELD_OFFSET(::CClientReconnectInfo, _impl_.compatibility_version_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountSyncStorageFile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountSyncStorageFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountSyncStorageFile, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountSyncStorageFile, _impl_.ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountSyncStorageFile, _impl_.values_),
  0,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::CMsgClientServerHeader)},
  { 14, -1, -1, sizeof(::CMsgGameServerToClientGameCompleted)},
  { 20, -1, -1, sizeof(::CMsgGameServerToClientGoodbye)},
  { 26, 37, -1, sizeof(::CMsgGameServerToClientConnectionStatus_Player)},
  { 42, -1, -1, sizeof(::CMsgGameServerToClientConnectionStatus)},
  { 49, 61, -1, sizeof(::CClientReconnectInfo)},
  { 67, 76, -1, sizeof(::CMsgClientAccountSyncStorageFile)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CMsgClientServerHeader_default_instance_._instance,
  &::_CMsgGameServerToClientGameCompleted_default_instance_._instance,
  &::_CMsgGameServerToClientGoodbye_default_instance_._instance,
  &::_CMsgGameServerToClientConnectionStatus_Player_default_instance_._instance,
  &::_CMsgGameServerToClientConnectionStatus_default_instance_._instance,
  &::_CClientReconnectInfo_default_instance_._instance,
  &::_CMsgClientAccountSyncStorageFile_default_instance_._instance,
};

const char descriptor_table_protodef_citadel_5fgamemessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032citadel_gamemessages.proto\032\037citadel_gc"
  "messages_common.proto\"\260\001\n\026CMsgClientServ"
  "erHeader\022\030\n\020game_instance_id\030\001 \001(\004\022\032\n\022lo"
  "cal_player_index\030\002 \001(\r\022\017\n\007payload\030\003 \001(\014\022"
  "O\n\006msg_id\030\004 \001(\0162\025.ECitadelGameMessages:("
  "k_EMsgGameServerToClientConnectionStatus"
  "\"%\n#CMsgGameServerToClientGameCompleted\""
  "\037\n\035CMsgGameServerToClientGoodbye\"\361\002\n&CMs"
  "gGameServerToClientConnectionStatus\022\?\n\007p"
  "layers\030\001 \003(\0132..CMsgGameServerToClientCon"
  "nectionStatus.Player\032\323\001\n\006Player\022\027\n\013playe"
  "r_slot\030\001 \001(\005:\002-1\022M\n\006status\030\002 \001(\0162/.CMsgG"
  "ameServerToClientConnectionStatus.EStatu"
  "s:\014k_EConnected\022\032\n\022inactivity_ticking\030\003 "
  "\001(\010\022\037\n\027inactivity_ms_remaining\030\004 \001(\r\022$\n\034"
  "inactivity_anim_ms_remaining\030\005 \001(\r\"0\n\007ES"
  "tatus\022\020\n\014k_EConnected\020\001\022\023\n\017k_EDisconnect"
  "ed\020\002\"\250\001\n\024CClientReconnectInfo\022\027\n\017server_"
  "steam_id\030\001 \001(\006\022\020\n\010lobby_id\030\002 \001(\004\022\024\n\014time"
  "_updated\030\003 \001(\r\022\026\n\016udp_connect_ip\030\004 \001(\r\022\030"
  "\n\020udp_connect_port\030\005 \001(\r\022\035\n\025compatibilit"
  "y_version\030\006 \001(\r\"P\n CMsgClientAccountSync"
  "StorageFile\022\017\n\007version\030\001 \001(\r\022\013\n\003ids\030\002 \003("
  "\r\022\016\n\006values\030\003 \003(\r*\302\001\n\024ECitadelGameMessag"
  "es\022,\n(k_EMsgGameServerToClientConnection"
  "Status\020\n\022,\n(k_EMsgGameServerToClientInit"
  "ialGameState\020\014\022)\n%k_EMsgGameServerToClie"
  "ntGameCompleted\020\r\022#\n\037k_EMsgGameServerToC"
  "lientGoodbye\020\017*\313\003\n\030ECitadelDisconnectRea"
  "son\022.\n)k_ECitadelDisconnectReason_UserLe"
  "aveMatch\020\351\007\022+\n&k_ECitadelDisconnectReaso"
  "n_UserQuitApp\020\352\007\022*\n%k_ECitadelDisconnect"
  "Reason_UserCancel\020\353\007\022\'\n\"k_ECitadelDiscon"
  "nectReason_Goodbye\020\354\007\022*\n%k_ECitadelDisco"
  "nnectReason_BadMessage\020\321\017\0229\n4k_ECitadelD"
  "isconnectReason_GameDestroyedUnexpectedl"
  "y\020\322\017\022.\n)k_ECitadelDisconnectReason_Chang"
  "ingServer\020\323\017\022-\n(k_ECitadelDisconnectReas"
  "on_OldConnection\020\324\017\0227\n2k_ECitadelDisconn"
  "ectReason_GoodbyeUnrecognizedGame\020\325\017"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_citadel_5fgamemessages_2eproto_deps[1] = {
  &::descriptor_table_citadel_5fgcmessages_5fcommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_citadel_5fgamemessages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_citadel_5fgamemessages_2eproto = {
    false, false, 1596, descriptor_table_protodef_citadel_5fgamemessages_2eproto,
    "citadel_gamemessages.proto",
    &descriptor_table_citadel_5fgamemessages_2eproto_once, descriptor_table_citadel_5fgamemessages_2eproto_deps, 1, 7,
    schemas, file_default_instances, TableStruct_citadel_5fgamemessages_2eproto::offsets,
    file_level_metadata_citadel_5fgamemessages_2eproto, file_level_enum_descriptors_citadel_5fgamemessages_2eproto,
    file_level_service_descriptors_citadel_5fgamemessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_citadel_5fgamemessages_2eproto_getter() {
  return &descriptor_table_citadel_5fgamemessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_citadel_5fgamemessages_2eproto(&descriptor_table_citadel_5fgamemessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGameServerToClientConnectionStatus_EStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgamemessages_2eproto);
  return file_level_enum_descriptors_citadel_5fgamemessages_2eproto[0];
}
bool CMsgGameServerToClientConnectionStatus_EStatus_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgGameServerToClientConnectionStatus_EStatus CMsgGameServerToClientConnectionStatus::k_EConnected;
constexpr CMsgGameServerToClientConnectionStatus_EStatus CMsgGameServerToClientConnectionStatus::k_EDisconnected;
constexpr CMsgGameServerToClientConnectionStatus_EStatus CMsgGameServerToClientConnectionStatus::EStatus_MIN;
constexpr CMsgGameServerToClientConnectionStatus_EStatus CMsgGameServerToClientConnectionStatus::EStatus_MAX;
constexpr int CMsgGameServerToClientConnectionStatus::EStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECitadelGameMessages_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgamemessages_2eproto);
  return file_level_enum_descriptors_citadel_5fgamemessages_2eproto[1];
}
bool ECitadelGameMessages_IsValid(int value) {
  switch (value) {
    case 10:
    case 12:
    case 13:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECitadelDisconnectReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgamemessages_2eproto);
  return file_level_enum_descriptors_citadel_5fgamemessages_2eproto[2];
}
bool ECitadelDisconnectReason_IsValid(int value) {
  switch (value) {
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgClientServerHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientServerHeader>()._impl_._has_bits_);
  static void set_has_game_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_local_player_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_msg_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgClientServerHeader::CMsgClientServerHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientServerHeader)
}
CMsgClientServerHeader::CMsgClientServerHeader(const CMsgClientServerHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientServerHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.game_instance_id_){}
    , decltype(_impl_.local_player_index_){}
    , decltype(_impl_.msg_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_payload()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.game_instance_id_, &from._impl_.game_instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.msg_id_) -
    reinterpret_cast<char*>(&_impl_.game_instance_id_)) + sizeof(_impl_.msg_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientServerHeader)
}

inline void CMsgClientServerHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.game_instance_id_){uint64_t{0u}}
    , decltype(_impl_.local_player_index_){0u}
    , decltype(_impl_.msg_id_){10}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientServerHeader::~CMsgClientServerHeader() {
  // @@protoc_insertion_point(destructor:CMsgClientServerHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientServerHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
}

void CMsgClientServerHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientServerHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientServerHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.payload_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.game_instance_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.local_player_index_) -
        reinterpret_cast<char*>(&_impl_.game_instance_id_)) + sizeof(_impl_.local_player_index_));
    _impl_.msg_id_ = 10;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientServerHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 game_instance_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_game_instance_id(&has_bits);
          _impl_.game_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 local_player_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_local_player_index(&has_bits);
          _impl_.local_player_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelGameMessages msg_id = 4 [default = k_EMsgGameServerToClientConnectionStatus];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelGameMessages_IsValid(val))) {
            _internal_set_msg_id(static_cast<::ECitadelGameMessages>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientServerHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientServerHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 game_instance_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_game_instance_id(), target);
  }

  // optional uint32 local_player_index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_local_player_index(), target);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  // optional .ECitadelGameMessages msg_id = 4 [default = k_EMsgGameServerToClientConnectionStatus];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_msg_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientServerHeader)
  return target;
}

size_t CMsgClientServerHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientServerHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes payload = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_payload());
    }

    // optional uint64 game_instance_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_game_instance_id());
    }

    // optional uint32 local_player_index = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_local_player_index());
    }

    // optional .ECitadelGameMessages msg_id = 4 [default = k_EMsgGameServerToClientConnectionStatus];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_msg_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientServerHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientServerHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientServerHeader::GetClassData() const { return &_class_data_; }


void CMsgClientServerHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientServerHeader*>(&to_msg);
  auto& from = static_cast<const CMsgClientServerHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientServerHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_payload(from._internal_payload());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.game_instance_id_ = from._impl_.game_instance_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.local_player_index_ = from._impl_.local_player_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.msg_id_ = from._impl_.msg_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientServerHeader::CopyFrom(const CMsgClientServerHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientServerHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServerHeader::IsInitialized() const {
  return true;
}

void CMsgClientServerHeader::InternalSwap(CMsgClientServerHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientServerHeader, _impl_.local_player_index_)
      + sizeof(CMsgClientServerHeader::_impl_.local_player_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientServerHeader, _impl_.game_instance_id_)>(
          reinterpret_cast<char*>(&_impl_.game_instance_id_),
          reinterpret_cast<char*>(&other->_impl_.game_instance_id_));
  swap(_impl_.msg_id_, other->_impl_.msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientServerHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgamemessages_2eproto_getter, &descriptor_table_citadel_5fgamemessages_2eproto_once,
      file_level_metadata_citadel_5fgamemessages_2eproto[0]);
}

// ===================================================================

class CMsgGameServerToClientGameCompleted::_Internal {
 public:
};

CMsgGameServerToClientGameCompleted::CMsgGameServerToClientGameCompleted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerToClientGameCompleted)
}
CMsgGameServerToClientGameCompleted::CMsgGameServerToClientGameCompleted(const CMsgGameServerToClientGameCompleted& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgGameServerToClientGameCompleted* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerToClientGameCompleted)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameServerToClientGameCompleted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameServerToClientGameCompleted::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerToClientGameCompleted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgamemessages_2eproto_getter, &descriptor_table_citadel_5fgamemessages_2eproto_once,
      file_level_metadata_citadel_5fgamemessages_2eproto[1]);
}

// ===================================================================

class CMsgGameServerToClientGoodbye::_Internal {
 public:
};

CMsgGameServerToClientGoodbye::CMsgGameServerToClientGoodbye(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerToClientGoodbye)
}
CMsgGameServerToClientGoodbye::CMsgGameServerToClientGoodbye(const CMsgGameServerToClientGoodbye& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgGameServerToClientGoodbye* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerToClientGoodbye)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameServerToClientGoodbye::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameServerToClientGoodbye::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerToClientGoodbye::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgamemessages_2eproto_getter, &descriptor_table_citadel_5fgamemessages_2eproto_once,
      file_level_metadata_citadel_5fgamemessages_2eproto[2]);
}

// ===================================================================

class CMsgGameServerToClientConnectionStatus_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameServerToClientConnectionStatus_Player>()._impl_._has_bits_);
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_inactivity_ticking(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inactivity_ms_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_inactivity_anim_ms_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGameServerToClientConnectionStatus_Player::CMsgGameServerToClientConnectionStatus_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerToClientConnectionStatus.Player)
}
CMsgGameServerToClientConnectionStatus_Player::CMsgGameServerToClientConnectionStatus_Player(const CMsgGameServerToClientConnectionStatus_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGameServerToClientConnectionStatus_Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.inactivity_ticking_){}
    , decltype(_impl_.inactivity_ms_remaining_){}
    , decltype(_impl_.inactivity_anim_ms_remaining_){}
    , decltype(_impl_.player_slot_){}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.inactivity_ticking_, &from._impl_.inactivity_ticking_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.inactivity_ticking_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerToClientConnectionStatus.Player)
}

inline void CMsgGameServerToClientConnectionStatus_Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.inactivity_ticking_){false}
    , decltype(_impl_.inactivity_ms_remaining_){0u}
    , decltype(_impl_.inactivity_anim_ms_remaining_){0u}
    , decltype(_impl_.player_slot_){-1}
    , decltype(_impl_.status_){1}
  };
}

CMsgGameServerToClientConnectionStatus_Player::~CMsgGameServerToClientConnectionStatus_Player() {
  // @@protoc_insertion_point(destructor:CMsgGameServerToClientConnectionStatus.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGameServerToClientConnectionStatus_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGameServerToClientConnectionStatus_Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGameServerToClientConnectionStatus_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerToClientConnectionStatus.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.inactivity_ticking_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.inactivity_anim_ms_remaining_) -
        reinterpret_cast<char*>(&_impl_.inactivity_ticking_)) + sizeof(_impl_.inactivity_anim_ms_remaining_));
    _impl_.player_slot_ = -1;
    _impl_.status_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameServerToClientConnectionStatus_Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_slot = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_slot(&has_bits);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGameServerToClientConnectionStatus.EStatus status = 2 [default = k_EConnected];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGameServerToClientConnectionStatus_EStatus_IsValid(val))) {
            _internal_set_status(static_cast<::CMsgGameServerToClientConnectionStatus_EStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool inactivity_ticking = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_inactivity_ticking(&has_bits);
          _impl_.inactivity_ticking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 inactivity_ms_remaining = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_inactivity_ms_remaining(&has_bits);
          _impl_.inactivity_ms_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 inactivity_anim_ms_remaining = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_inactivity_anim_ms_remaining(&has_bits);
          _impl_.inactivity_anim_ms_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameServerToClientConnectionStatus_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerToClientConnectionStatus.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_slot = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_slot(), target);
  }

  // optional .CMsgGameServerToClientConnectionStatus.EStatus status = 2 [default = k_EConnected];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // optional bool inactivity_ticking = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_inactivity_ticking(), target);
  }

  // optional uint32 inactivity_ms_remaining = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_inactivity_ms_remaining(), target);
  }

  // optional uint32 inactivity_anim_ms_remaining = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_inactivity_anim_ms_remaining(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerToClientConnectionStatus.Player)
  return target;
}

size_t CMsgGameServerToClientConnectionStatus_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerToClientConnectionStatus.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool inactivity_ticking = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 inactivity_ms_remaining = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_inactivity_ms_remaining());
    }

    // optional uint32 inactivity_anim_ms_remaining = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_inactivity_anim_ms_remaining());
    }

    // optional int32 player_slot = 1 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_slot());
    }

    // optional .CMsgGameServerToClientConnectionStatus.EStatus status = 2 [default = k_EConnected];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameServerToClientConnectionStatus_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGameServerToClientConnectionStatus_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameServerToClientConnectionStatus_Player::GetClassData() const { return &_class_data_; }


void CMsgGameServerToClientConnectionStatus_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGameServerToClientConnectionStatus_Player*>(&to_msg);
  auto& from = static_cast<const CMsgGameServerToClientConnectionStatus_Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerToClientConnectionStatus.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.inactivity_ticking_ = from._impl_.inactivity_ticking_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.inactivity_ms_remaining_ = from._impl_.inactivity_ms_remaining_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.inactivity_anim_ms_remaining_ = from._impl_.inactivity_anim_ms_remaining_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameServerToClientConnectionStatus_Player::CopyFrom(const CMsgGameServerToClientConnectionStatus_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerToClientConnectionStatus.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerToClientConnectionStatus_Player::IsInitialized() const {
  return true;
}

void CMsgGameServerToClientConnectionStatus_Player::InternalSwap(CMsgGameServerToClientConnectionStatus_Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameServerToClientConnectionStatus_Player, _impl_.inactivity_anim_ms_remaining_)
      + sizeof(CMsgGameServerToClientConnectionStatus_Player::_impl_.inactivity_anim_ms_remaining_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameServerToClientConnectionStatus_Player, _impl_.inactivity_ticking_)>(
          reinterpret_cast<char*>(&_impl_.inactivity_ticking_),
          reinterpret_cast<char*>(&other->_impl_.inactivity_ticking_));
  swap(_impl_.player_slot_, other->_impl_.player_slot_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerToClientConnectionStatus_Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgamemessages_2eproto_getter, &descriptor_table_citadel_5fgamemessages_2eproto_once,
      file_level_metadata_citadel_5fgamemessages_2eproto[3]);
}

// ===================================================================

class CMsgGameServerToClientConnectionStatus::_Internal {
 public:
};

CMsgGameServerToClientConnectionStatus::CMsgGameServerToClientConnectionStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerToClientConnectionStatus)
}
CMsgGameServerToClientConnectionStatus::CMsgGameServerToClientConnectionStatus(const CMsgGameServerToClientConnectionStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGameServerToClientConnectionStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerToClientConnectionStatus)
}

inline void CMsgGameServerToClientConnectionStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgGameServerToClientConnectionStatus::~CMsgGameServerToClientConnectionStatus() {
  // @@protoc_insertion_point(destructor:CMsgGameServerToClientConnectionStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGameServerToClientConnectionStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void CMsgGameServerToClientConnectionStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGameServerToClientConnectionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerToClientConnectionStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameServerToClientConnectionStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgGameServerToClientConnectionStatus.Player players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameServerToClientConnectionStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerToClientConnectionStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGameServerToClientConnectionStatus.Player players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerToClientConnectionStatus)
  return target;
}

size_t CMsgGameServerToClientConnectionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerToClientConnectionStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGameServerToClientConnectionStatus.Player players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameServerToClientConnectionStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGameServerToClientConnectionStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameServerToClientConnectionStatus::GetClassData() const { return &_class_data_; }


void CMsgGameServerToClientConnectionStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGameServerToClientConnectionStatus*>(&to_msg);
  auto& from = static_cast<const CMsgGameServerToClientConnectionStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerToClientConnectionStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameServerToClientConnectionStatus::CopyFrom(const CMsgGameServerToClientConnectionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerToClientConnectionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerToClientConnectionStatus::IsInitialized() const {
  return true;
}

void CMsgGameServerToClientConnectionStatus::InternalSwap(CMsgGameServerToClientConnectionStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerToClientConnectionStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgamemessages_2eproto_getter, &descriptor_table_citadel_5fgamemessages_2eproto_once,
      file_level_metadata_citadel_5fgamemessages_2eproto[4]);
}

// ===================================================================

class CClientReconnectInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientReconnectInfo>()._impl_._has_bits_);
  static void set_has_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_udp_connect_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_udp_connect_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_compatibility_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CClientReconnectInfo::CClientReconnectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CClientReconnectInfo)
}
CClientReconnectInfo::CClientReconnectInfo(const CClientReconnectInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CClientReconnectInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_steam_id_){}
    , decltype(_impl_.lobby_id_){}
    , decltype(_impl_.time_updated_){}
    , decltype(_impl_.udp_connect_ip_){}
    , decltype(_impl_.udp_connect_port_){}
    , decltype(_impl_.compatibility_version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.server_steam_id_, &from._impl_.server_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.compatibility_version_) -
    reinterpret_cast<char*>(&_impl_.server_steam_id_)) + sizeof(_impl_.compatibility_version_));
  // @@protoc_insertion_point(copy_constructor:CClientReconnectInfo)
}

inline void CClientReconnectInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_steam_id_){uint64_t{0u}}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
    , decltype(_impl_.time_updated_){0u}
    , decltype(_impl_.udp_connect_ip_){0u}
    , decltype(_impl_.udp_connect_port_){0u}
    , decltype(_impl_.compatibility_version_){0u}
  };
}

CClientReconnectInfo::~CClientReconnectInfo() {
  // @@protoc_insertion_point(destructor:CClientReconnectInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CClientReconnectInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientReconnectInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CClientReconnectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientReconnectInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.server_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.compatibility_version_) -
        reinterpret_cast<char*>(&_impl_.server_steam_id_)) + sizeof(_impl_.compatibility_version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientReconnectInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 server_steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_server_steam_id(&has_bits);
          _impl_.server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 lobby_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_lobby_id(&has_bits);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_updated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_time_updated(&has_bits);
          _impl_.time_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 udp_connect_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_udp_connect_ip(&has_bits);
          _impl_.udp_connect_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 udp_connect_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_udp_connect_port(&has_bits);
          _impl_.udp_connect_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 compatibility_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_compatibility_version(&has_bits);
          _impl_.compatibility_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientReconnectInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientReconnectInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 server_steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_server_steam_id(), target);
  }

  // optional uint64 lobby_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_lobby_id(), target);
  }

  // optional uint32 time_updated = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time_updated(), target);
  }

  // optional uint32 udp_connect_ip = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_udp_connect_ip(), target);
  }

  // optional uint32 udp_connect_port = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_udp_connect_port(), target);
  }

  // optional uint32 compatibility_version = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_compatibility_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientReconnectInfo)
  return target;
}

size_t CClientReconnectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientReconnectInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional fixed64 server_steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint64 lobby_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lobby_id());
    }

    // optional uint32 time_updated = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time_updated());
    }

    // optional uint32 udp_connect_ip = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_udp_connect_ip());
    }

    // optional uint32 udp_connect_port = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_udp_connect_port());
    }

    // optional uint32 compatibility_version = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_compatibility_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientReconnectInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CClientReconnectInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientReconnectInfo::GetClassData() const { return &_class_data_; }


void CClientReconnectInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CClientReconnectInfo*>(&to_msg);
  auto& from = static_cast<const CClientReconnectInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CClientReconnectInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.server_steam_id_ = from._impl_.server_steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.time_updated_ = from._impl_.time_updated_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.udp_connect_ip_ = from._impl_.udp_connect_ip_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.udp_connect_port_ = from._impl_.udp_connect_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.compatibility_version_ = from._impl_.compatibility_version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientReconnectInfo::CopyFrom(const CClientReconnectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientReconnectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientReconnectInfo::IsInitialized() const {
  return true;
}

void CClientReconnectInfo::InternalSwap(CClientReconnectInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClientReconnectInfo, _impl_.compatibility_version_)
      + sizeof(CClientReconnectInfo::_impl_.compatibility_version_)
      - PROTOBUF_FIELD_OFFSET(CClientReconnectInfo, _impl_.server_steam_id_)>(
          reinterpret_cast<char*>(&_impl_.server_steam_id_),
          reinterpret_cast<char*>(&other->_impl_.server_steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientReconnectInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgamemessages_2eproto_getter, &descriptor_table_citadel_5fgamemessages_2eproto_once,
      file_level_metadata_citadel_5fgamemessages_2eproto[5]);
}

// ===================================================================

class CMsgClientAccountSyncStorageFile::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientAccountSyncStorageFile>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientAccountSyncStorageFile::CMsgClientAccountSyncStorageFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientAccountSyncStorageFile)
}
CMsgClientAccountSyncStorageFile::CMsgClientAccountSyncStorageFile(const CMsgClientAccountSyncStorageFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientAccountSyncStorageFile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ids_){from._impl_.ids_}
    , decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientAccountSyncStorageFile)
}

inline void CMsgClientAccountSyncStorageFile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ids_){arena}
    , decltype(_impl_.values_){arena}
    , decltype(_impl_.version_){0u}
  };
}

CMsgClientAccountSyncStorageFile::~CMsgClientAccountSyncStorageFile() {
  // @@protoc_insertion_point(destructor:CMsgClientAccountSyncStorageFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientAccountSyncStorageFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedField();
  _impl_.values_.~RepeatedField();
}

void CMsgClientAccountSyncStorageFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientAccountSyncStorageFile::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientAccountSyncStorageFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  _impl_.values_.Clear();
  _impl_.version_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientAccountSyncStorageFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientAccountSyncStorageFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientAccountSyncStorageFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // repeated uint32 ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ids(i), target);
  }

  // repeated uint32 values = 3;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_values(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientAccountSyncStorageFile)
  return target;
}

size_t CMsgClientAccountSyncStorageFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientAccountSyncStorageFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ids = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_ids_size());
    total_size += data_size;
  }

  // repeated uint32 values = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.values_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_values_size());
    total_size += data_size;
  }

  // optional uint32 version = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientAccountSyncStorageFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientAccountSyncStorageFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientAccountSyncStorageFile::GetClassData() const { return &_class_data_; }


void CMsgClientAccountSyncStorageFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientAccountSyncStorageFile*>(&to_msg);
  auto& from = static_cast<const CMsgClientAccountSyncStorageFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientAccountSyncStorageFile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (from._internal_has_version()) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientAccountSyncStorageFile::CopyFrom(const CMsgClientAccountSyncStorageFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientAccountSyncStorageFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAccountSyncStorageFile::IsInitialized() const {
  return true;
}

void CMsgClientAccountSyncStorageFile::InternalSwap(CMsgClientAccountSyncStorageFile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientAccountSyncStorageFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgamemessages_2eproto_getter, &descriptor_table_citadel_5fgamemessages_2eproto_once,
      file_level_metadata_citadel_5fgamemessages_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgClientServerHeader*
Arena::CreateMaybeMessage< ::CMsgClientServerHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientServerHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerToClientGameCompleted*
Arena::CreateMaybeMessage< ::CMsgGameServerToClientGameCompleted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerToClientGameCompleted >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerToClientGoodbye*
Arena::CreateMaybeMessage< ::CMsgGameServerToClientGoodbye >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerToClientGoodbye >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerToClientConnectionStatus_Player*
Arena::CreateMaybeMessage< ::CMsgGameServerToClientConnectionStatus_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerToClientConnectionStatus_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerToClientConnectionStatus*
Arena::CreateMaybeMessage< ::CMsgGameServerToClientConnectionStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerToClientConnectionStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientReconnectInfo*
Arena::CreateMaybeMessage< ::CClientReconnectInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientReconnectInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientAccountSyncStorageFile*
Arena::CreateMaybeMessage< ::CMsgClientAccountSyncStorageFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientAccountSyncStorageFile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
