// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: citadel_gamemessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_citadel_5fgamemessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_citadel_5fgamemessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "citadel_gcmessages_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_citadel_5fgamemessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_citadel_5fgamemessages_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_citadel_5fgamemessages_2eproto;
class CClientReconnectInfo;
struct CClientReconnectInfoDefaultTypeInternal;
extern CClientReconnectInfoDefaultTypeInternal _CClientReconnectInfo_default_instance_;
class CMsgClientAccountSyncStorageFile;
struct CMsgClientAccountSyncStorageFileDefaultTypeInternal;
extern CMsgClientAccountSyncStorageFileDefaultTypeInternal _CMsgClientAccountSyncStorageFile_default_instance_;
class CMsgClientServerHeader;
struct CMsgClientServerHeaderDefaultTypeInternal;
extern CMsgClientServerHeaderDefaultTypeInternal _CMsgClientServerHeader_default_instance_;
class CMsgGameServerToClientConnectionStatus;
struct CMsgGameServerToClientConnectionStatusDefaultTypeInternal;
extern CMsgGameServerToClientConnectionStatusDefaultTypeInternal _CMsgGameServerToClientConnectionStatus_default_instance_;
class CMsgGameServerToClientConnectionStatus_Player;
struct CMsgGameServerToClientConnectionStatus_PlayerDefaultTypeInternal;
extern CMsgGameServerToClientConnectionStatus_PlayerDefaultTypeInternal _CMsgGameServerToClientConnectionStatus_Player_default_instance_;
class CMsgGameServerToClientGameCompleted;
struct CMsgGameServerToClientGameCompletedDefaultTypeInternal;
extern CMsgGameServerToClientGameCompletedDefaultTypeInternal _CMsgGameServerToClientGameCompleted_default_instance_;
class CMsgGameServerToClientGoodbye;
struct CMsgGameServerToClientGoodbyeDefaultTypeInternal;
extern CMsgGameServerToClientGoodbyeDefaultTypeInternal _CMsgGameServerToClientGoodbye_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CClientReconnectInfo* Arena::CreateMaybeMessage<::CClientReconnectInfo>(Arena*);
template<> ::CMsgClientAccountSyncStorageFile* Arena::CreateMaybeMessage<::CMsgClientAccountSyncStorageFile>(Arena*);
template<> ::CMsgClientServerHeader* Arena::CreateMaybeMessage<::CMsgClientServerHeader>(Arena*);
template<> ::CMsgGameServerToClientConnectionStatus* Arena::CreateMaybeMessage<::CMsgGameServerToClientConnectionStatus>(Arena*);
template<> ::CMsgGameServerToClientConnectionStatus_Player* Arena::CreateMaybeMessage<::CMsgGameServerToClientConnectionStatus_Player>(Arena*);
template<> ::CMsgGameServerToClientGameCompleted* Arena::CreateMaybeMessage<::CMsgGameServerToClientGameCompleted>(Arena*);
template<> ::CMsgGameServerToClientGoodbye* Arena::CreateMaybeMessage<::CMsgGameServerToClientGoodbye>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CMsgGameServerToClientConnectionStatus_EStatus : int {
  CMsgGameServerToClientConnectionStatus_EStatus_k_EConnected = 1,
  CMsgGameServerToClientConnectionStatus_EStatus_k_EDisconnected = 2
};
bool CMsgGameServerToClientConnectionStatus_EStatus_IsValid(int value);
constexpr CMsgGameServerToClientConnectionStatus_EStatus CMsgGameServerToClientConnectionStatus_EStatus_EStatus_MIN = CMsgGameServerToClientConnectionStatus_EStatus_k_EConnected;
constexpr CMsgGameServerToClientConnectionStatus_EStatus CMsgGameServerToClientConnectionStatus_EStatus_EStatus_MAX = CMsgGameServerToClientConnectionStatus_EStatus_k_EDisconnected;
constexpr int CMsgGameServerToClientConnectionStatus_EStatus_EStatus_ARRAYSIZE = CMsgGameServerToClientConnectionStatus_EStatus_EStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGameServerToClientConnectionStatus_EStatus_descriptor();
template<typename T>
inline const std::string& CMsgGameServerToClientConnectionStatus_EStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgGameServerToClientConnectionStatus_EStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgGameServerToClientConnectionStatus_EStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgGameServerToClientConnectionStatus_EStatus_descriptor(), enum_t_value);
}
inline bool CMsgGameServerToClientConnectionStatus_EStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgGameServerToClientConnectionStatus_EStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgGameServerToClientConnectionStatus_EStatus>(
    CMsgGameServerToClientConnectionStatus_EStatus_descriptor(), name, value);
}
enum ECitadelGameMessages : int {
  k_EMsgGameServerToClientConnectionStatus = 10,
  k_EMsgGameServerToClientInitialGameState = 12,
  k_EMsgGameServerToClientGameCompleted = 13,
  k_EMsgGameServerToClientGoodbye = 15
};
bool ECitadelGameMessages_IsValid(int value);
constexpr ECitadelGameMessages ECitadelGameMessages_MIN = k_EMsgGameServerToClientConnectionStatus;
constexpr ECitadelGameMessages ECitadelGameMessages_MAX = k_EMsgGameServerToClientGoodbye;
constexpr int ECitadelGameMessages_ARRAYSIZE = ECitadelGameMessages_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECitadelGameMessages_descriptor();
template<typename T>
inline const std::string& ECitadelGameMessages_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ECitadelGameMessages>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ECitadelGameMessages_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ECitadelGameMessages_descriptor(), enum_t_value);
}
inline bool ECitadelGameMessages_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ECitadelGameMessages* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ECitadelGameMessages>(
    ECitadelGameMessages_descriptor(), name, value);
}
enum ECitadelDisconnectReason : int {
  k_ECitadelDisconnectReason_UserLeaveMatch = 1001,
  k_ECitadelDisconnectReason_UserQuitApp = 1002,
  k_ECitadelDisconnectReason_UserCancel = 1003,
  k_ECitadelDisconnectReason_Goodbye = 1004,
  k_ECitadelDisconnectReason_BadMessage = 2001,
  k_ECitadelDisconnectReason_GameDestroyedUnexpectedly = 2002,
  k_ECitadelDisconnectReason_ChangingServer = 2003,
  k_ECitadelDisconnectReason_OldConnection = 2004,
  k_ECitadelDisconnectReason_GoodbyeUnrecognizedGame = 2005
};
bool ECitadelDisconnectReason_IsValid(int value);
constexpr ECitadelDisconnectReason ECitadelDisconnectReason_MIN = k_ECitadelDisconnectReason_UserLeaveMatch;
constexpr ECitadelDisconnectReason ECitadelDisconnectReason_MAX = k_ECitadelDisconnectReason_GoodbyeUnrecognizedGame;
constexpr int ECitadelDisconnectReason_ARRAYSIZE = ECitadelDisconnectReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECitadelDisconnectReason_descriptor();
template<typename T>
inline const std::string& ECitadelDisconnectReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ECitadelDisconnectReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ECitadelDisconnectReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ECitadelDisconnectReason_descriptor(), enum_t_value);
}
inline bool ECitadelDisconnectReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ECitadelDisconnectReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ECitadelDisconnectReason>(
    ECitadelDisconnectReason_descriptor(), name, value);
}
// ===================================================================

class CMsgClientServerHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientServerHeader) */ {
 public:
  inline CMsgClientServerHeader() : CMsgClientServerHeader(nullptr) {}
  ~CMsgClientServerHeader() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientServerHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientServerHeader(const CMsgClientServerHeader& from);
  CMsgClientServerHeader(CMsgClientServerHeader&& from) noexcept
    : CMsgClientServerHeader() {
    *this = ::std::move(from);
  }

  inline CMsgClientServerHeader& operator=(const CMsgClientServerHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientServerHeader& operator=(CMsgClientServerHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientServerHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientServerHeader* internal_default_instance() {
    return reinterpret_cast<const CMsgClientServerHeader*>(
               &_CMsgClientServerHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgClientServerHeader& a, CMsgClientServerHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientServerHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientServerHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientServerHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientServerHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientServerHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientServerHeader& from) {
    CMsgClientServerHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientServerHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientServerHeader";
  }
  protected:
  explicit CMsgClientServerHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 3,
    kGameInstanceIdFieldNumber = 1,
    kLocalPlayerIndexFieldNumber = 2,
    kMsgIdFieldNumber = 4,
  };
  // optional bytes payload = 3;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // optional uint64 game_instance_id = 1;
  bool has_game_instance_id() const;
  private:
  bool _internal_has_game_instance_id() const;
  public:
  void clear_game_instance_id();
  uint64_t game_instance_id() const;
  void set_game_instance_id(uint64_t value);
  private:
  uint64_t _internal_game_instance_id() const;
  void _internal_set_game_instance_id(uint64_t value);
  public:

  // optional uint32 local_player_index = 2;
  bool has_local_player_index() const;
  private:
  bool _internal_has_local_player_index() const;
  public:
  void clear_local_player_index();
  uint32_t local_player_index() const;
  void set_local_player_index(uint32_t value);
  private:
  uint32_t _internal_local_player_index() const;
  void _internal_set_local_player_index(uint32_t value);
  public:

  // optional .ECitadelGameMessages msg_id = 4 [default = k_EMsgGameServerToClientConnectionStatus];
  bool has_msg_id() const;
  private:
  bool _internal_has_msg_id() const;
  public:
  void clear_msg_id();
  ::ECitadelGameMessages msg_id() const;
  void set_msg_id(::ECitadelGameMessages value);
  private:
  ::ECitadelGameMessages _internal_msg_id() const;
  void _internal_set_msg_id(::ECitadelGameMessages value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientServerHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    uint64_t game_instance_id_;
    uint32_t local_player_index_;
    int msg_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_citadel_5fgamemessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameServerToClientGameCompleted final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgGameServerToClientGameCompleted) */ {
 public:
  inline CMsgGameServerToClientGameCompleted() : CMsgGameServerToClientGameCompleted(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CMsgGameServerToClientGameCompleted(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameServerToClientGameCompleted(const CMsgGameServerToClientGameCompleted& from);
  CMsgGameServerToClientGameCompleted(CMsgGameServerToClientGameCompleted&& from) noexcept
    : CMsgGameServerToClientGameCompleted() {
    *this = ::std::move(from);
  }

  inline CMsgGameServerToClientGameCompleted& operator=(const CMsgGameServerToClientGameCompleted& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameServerToClientGameCompleted& operator=(CMsgGameServerToClientGameCompleted&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameServerToClientGameCompleted& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameServerToClientGameCompleted* internal_default_instance() {
    return reinterpret_cast<const CMsgGameServerToClientGameCompleted*>(
               &_CMsgGameServerToClientGameCompleted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgGameServerToClientGameCompleted& a, CMsgGameServerToClientGameCompleted& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameServerToClientGameCompleted* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameServerToClientGameCompleted* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameServerToClientGameCompleted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameServerToClientGameCompleted>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgGameServerToClientGameCompleted& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgGameServerToClientGameCompleted& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameServerToClientGameCompleted";
  }
  protected:
  explicit CMsgGameServerToClientGameCompleted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgGameServerToClientGameCompleted)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_citadel_5fgamemessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameServerToClientGoodbye final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgGameServerToClientGoodbye) */ {
 public:
  inline CMsgGameServerToClientGoodbye() : CMsgGameServerToClientGoodbye(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CMsgGameServerToClientGoodbye(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameServerToClientGoodbye(const CMsgGameServerToClientGoodbye& from);
  CMsgGameServerToClientGoodbye(CMsgGameServerToClientGoodbye&& from) noexcept
    : CMsgGameServerToClientGoodbye() {
    *this = ::std::move(from);
  }

  inline CMsgGameServerToClientGoodbye& operator=(const CMsgGameServerToClientGoodbye& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameServerToClientGoodbye& operator=(CMsgGameServerToClientGoodbye&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameServerToClientGoodbye& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameServerToClientGoodbye* internal_default_instance() {
    return reinterpret_cast<const CMsgGameServerToClientGoodbye*>(
               &_CMsgGameServerToClientGoodbye_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgGameServerToClientGoodbye& a, CMsgGameServerToClientGoodbye& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameServerToClientGoodbye* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameServerToClientGoodbye* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameServerToClientGoodbye* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameServerToClientGoodbye>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgGameServerToClientGoodbye& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgGameServerToClientGoodbye& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameServerToClientGoodbye";
  }
  protected:
  explicit CMsgGameServerToClientGoodbye(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgGameServerToClientGoodbye)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_citadel_5fgamemessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameServerToClientConnectionStatus_Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameServerToClientConnectionStatus.Player) */ {
 public:
  inline CMsgGameServerToClientConnectionStatus_Player() : CMsgGameServerToClientConnectionStatus_Player(nullptr) {}
  ~CMsgGameServerToClientConnectionStatus_Player() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameServerToClientConnectionStatus_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameServerToClientConnectionStatus_Player(const CMsgGameServerToClientConnectionStatus_Player& from);
  CMsgGameServerToClientConnectionStatus_Player(CMsgGameServerToClientConnectionStatus_Player&& from) noexcept
    : CMsgGameServerToClientConnectionStatus_Player() {
    *this = ::std::move(from);
  }

  inline CMsgGameServerToClientConnectionStatus_Player& operator=(const CMsgGameServerToClientConnectionStatus_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameServerToClientConnectionStatus_Player& operator=(CMsgGameServerToClientConnectionStatus_Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameServerToClientConnectionStatus_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameServerToClientConnectionStatus_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgGameServerToClientConnectionStatus_Player*>(
               &_CMsgGameServerToClientConnectionStatus_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgGameServerToClientConnectionStatus_Player& a, CMsgGameServerToClientConnectionStatus_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameServerToClientConnectionStatus_Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameServerToClientConnectionStatus_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameServerToClientConnectionStatus_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameServerToClientConnectionStatus_Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameServerToClientConnectionStatus_Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameServerToClientConnectionStatus_Player& from) {
    CMsgGameServerToClientConnectionStatus_Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameServerToClientConnectionStatus_Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameServerToClientConnectionStatus.Player";
  }
  protected:
  explicit CMsgGameServerToClientConnectionStatus_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInactivityTickingFieldNumber = 3,
    kInactivityMsRemainingFieldNumber = 4,
    kInactivityAnimMsRemainingFieldNumber = 5,
    kPlayerSlotFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // optional bool inactivity_ticking = 3;
  bool has_inactivity_ticking() const;
  private:
  bool _internal_has_inactivity_ticking() const;
  public:
  void clear_inactivity_ticking();
  bool inactivity_ticking() const;
  void set_inactivity_ticking(bool value);
  private:
  bool _internal_inactivity_ticking() const;
  void _internal_set_inactivity_ticking(bool value);
  public:

  // optional uint32 inactivity_ms_remaining = 4;
  bool has_inactivity_ms_remaining() const;
  private:
  bool _internal_has_inactivity_ms_remaining() const;
  public:
  void clear_inactivity_ms_remaining();
  uint32_t inactivity_ms_remaining() const;
  void set_inactivity_ms_remaining(uint32_t value);
  private:
  uint32_t _internal_inactivity_ms_remaining() const;
  void _internal_set_inactivity_ms_remaining(uint32_t value);
  public:

  // optional uint32 inactivity_anim_ms_remaining = 5;
  bool has_inactivity_anim_ms_remaining() const;
  private:
  bool _internal_has_inactivity_anim_ms_remaining() const;
  public:
  void clear_inactivity_anim_ms_remaining();
  uint32_t inactivity_anim_ms_remaining() const;
  void set_inactivity_anim_ms_remaining(uint32_t value);
  private:
  uint32_t _internal_inactivity_anim_ms_remaining() const;
  void _internal_set_inactivity_anim_ms_remaining(uint32_t value);
  public:

  // optional int32 player_slot = 1 [default = -1];
  bool has_player_slot() const;
  private:
  bool _internal_has_player_slot() const;
  public:
  void clear_player_slot();
  int32_t player_slot() const;
  void set_player_slot(int32_t value);
  private:
  int32_t _internal_player_slot() const;
  void _internal_set_player_slot(int32_t value);
  public:

  // optional .CMsgGameServerToClientConnectionStatus.EStatus status = 2 [default = k_EConnected];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::CMsgGameServerToClientConnectionStatus_EStatus status() const;
  void set_status(::CMsgGameServerToClientConnectionStatus_EStatus value);
  private:
  ::CMsgGameServerToClientConnectionStatus_EStatus _internal_status() const;
  void _internal_set_status(::CMsgGameServerToClientConnectionStatus_EStatus value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameServerToClientConnectionStatus.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool inactivity_ticking_;
    uint32_t inactivity_ms_remaining_;
    uint32_t inactivity_anim_ms_remaining_;
    int32_t player_slot_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_citadel_5fgamemessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameServerToClientConnectionStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameServerToClientConnectionStatus) */ {
 public:
  inline CMsgGameServerToClientConnectionStatus() : CMsgGameServerToClientConnectionStatus(nullptr) {}
  ~CMsgGameServerToClientConnectionStatus() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameServerToClientConnectionStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameServerToClientConnectionStatus(const CMsgGameServerToClientConnectionStatus& from);
  CMsgGameServerToClientConnectionStatus(CMsgGameServerToClientConnectionStatus&& from) noexcept
    : CMsgGameServerToClientConnectionStatus() {
    *this = ::std::move(from);
  }

  inline CMsgGameServerToClientConnectionStatus& operator=(const CMsgGameServerToClientConnectionStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameServerToClientConnectionStatus& operator=(CMsgGameServerToClientConnectionStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameServerToClientConnectionStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameServerToClientConnectionStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgGameServerToClientConnectionStatus*>(
               &_CMsgGameServerToClientConnectionStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgGameServerToClientConnectionStatus& a, CMsgGameServerToClientConnectionStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameServerToClientConnectionStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameServerToClientConnectionStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameServerToClientConnectionStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameServerToClientConnectionStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameServerToClientConnectionStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameServerToClientConnectionStatus& from) {
    CMsgGameServerToClientConnectionStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameServerToClientConnectionStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameServerToClientConnectionStatus";
  }
  protected:
  explicit CMsgGameServerToClientConnectionStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGameServerToClientConnectionStatus_Player Player;

  typedef CMsgGameServerToClientConnectionStatus_EStatus EStatus;
  static constexpr EStatus k_EConnected =
    CMsgGameServerToClientConnectionStatus_EStatus_k_EConnected;
  static constexpr EStatus k_EDisconnected =
    CMsgGameServerToClientConnectionStatus_EStatus_k_EDisconnected;
  static inline bool EStatus_IsValid(int value) {
    return CMsgGameServerToClientConnectionStatus_EStatus_IsValid(value);
  }
  static constexpr EStatus EStatus_MIN =
    CMsgGameServerToClientConnectionStatus_EStatus_EStatus_MIN;
  static constexpr EStatus EStatus_MAX =
    CMsgGameServerToClientConnectionStatus_EStatus_EStatus_MAX;
  static constexpr int EStatus_ARRAYSIZE =
    CMsgGameServerToClientConnectionStatus_EStatus_EStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EStatus_descriptor() {
    return CMsgGameServerToClientConnectionStatus_EStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& EStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EStatus_Name.");
    return CMsgGameServerToClientConnectionStatus_EStatus_Name(enum_t_value);
  }
  static inline bool EStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EStatus* value) {
    return CMsgGameServerToClientConnectionStatus_EStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
  };
  // repeated .CMsgGameServerToClientConnectionStatus.Player players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgGameServerToClientConnectionStatus_Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameServerToClientConnectionStatus_Player >*
      mutable_players();
  private:
  const ::CMsgGameServerToClientConnectionStatus_Player& _internal_players(int index) const;
  ::CMsgGameServerToClientConnectionStatus_Player* _internal_add_players();
  public:
  const ::CMsgGameServerToClientConnectionStatus_Player& players(int index) const;
  ::CMsgGameServerToClientConnectionStatus_Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameServerToClientConnectionStatus_Player >&
      players() const;

  // @@protoc_insertion_point(class_scope:CMsgGameServerToClientConnectionStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameServerToClientConnectionStatus_Player > players_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_citadel_5fgamemessages_2eproto;
};
// -------------------------------------------------------------------

class CClientReconnectInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientReconnectInfo) */ {
 public:
  inline CClientReconnectInfo() : CClientReconnectInfo(nullptr) {}
  ~CClientReconnectInfo() override;
  explicit PROTOBUF_CONSTEXPR CClientReconnectInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientReconnectInfo(const CClientReconnectInfo& from);
  CClientReconnectInfo(CClientReconnectInfo&& from) noexcept
    : CClientReconnectInfo() {
    *this = ::std::move(from);
  }

  inline CClientReconnectInfo& operator=(const CClientReconnectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientReconnectInfo& operator=(CClientReconnectInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CClientReconnectInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientReconnectInfo* internal_default_instance() {
    return reinterpret_cast<const CClientReconnectInfo*>(
               &_CClientReconnectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CClientReconnectInfo& a, CClientReconnectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientReconnectInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientReconnectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CClientReconnectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CClientReconnectInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CClientReconnectInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CClientReconnectInfo& from) {
    CClientReconnectInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientReconnectInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientReconnectInfo";
  }
  protected:
  explicit CClientReconnectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerSteamIdFieldNumber = 1,
    kLobbyIdFieldNumber = 2,
    kTimeUpdatedFieldNumber = 3,
    kUdpConnectIpFieldNumber = 4,
    kUdpConnectPortFieldNumber = 5,
    kCompatibilityVersionFieldNumber = 6,
  };
  // optional fixed64 server_steam_id = 1;
  bool has_server_steam_id() const;
  private:
  bool _internal_has_server_steam_id() const;
  public:
  void clear_server_steam_id();
  uint64_t server_steam_id() const;
  void set_server_steam_id(uint64_t value);
  private:
  uint64_t _internal_server_steam_id() const;
  void _internal_set_server_steam_id(uint64_t value);
  public:

  // optional uint64 lobby_id = 2;
  bool has_lobby_id() const;
  private:
  bool _internal_has_lobby_id() const;
  public:
  void clear_lobby_id();
  uint64_t lobby_id() const;
  void set_lobby_id(uint64_t value);
  private:
  uint64_t _internal_lobby_id() const;
  void _internal_set_lobby_id(uint64_t value);
  public:

  // optional uint32 time_updated = 3;
  bool has_time_updated() const;
  private:
  bool _internal_has_time_updated() const;
  public:
  void clear_time_updated();
  uint32_t time_updated() const;
  void set_time_updated(uint32_t value);
  private:
  uint32_t _internal_time_updated() const;
  void _internal_set_time_updated(uint32_t value);
  public:

  // optional uint32 udp_connect_ip = 4;
  bool has_udp_connect_ip() const;
  private:
  bool _internal_has_udp_connect_ip() const;
  public:
  void clear_udp_connect_ip();
  uint32_t udp_connect_ip() const;
  void set_udp_connect_ip(uint32_t value);
  private:
  uint32_t _internal_udp_connect_ip() const;
  void _internal_set_udp_connect_ip(uint32_t value);
  public:

  // optional uint32 udp_connect_port = 5;
  bool has_udp_connect_port() const;
  private:
  bool _internal_has_udp_connect_port() const;
  public:
  void clear_udp_connect_port();
  uint32_t udp_connect_port() const;
  void set_udp_connect_port(uint32_t value);
  private:
  uint32_t _internal_udp_connect_port() const;
  void _internal_set_udp_connect_port(uint32_t value);
  public:

  // optional uint32 compatibility_version = 6;
  bool has_compatibility_version() const;
  private:
  bool _internal_has_compatibility_version() const;
  public:
  void clear_compatibility_version();
  uint32_t compatibility_version() const;
  void set_compatibility_version(uint32_t value);
  private:
  uint32_t _internal_compatibility_version() const;
  void _internal_set_compatibility_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CClientReconnectInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t server_steam_id_;
    uint64_t lobby_id_;
    uint32_t time_updated_;
    uint32_t udp_connect_ip_;
    uint32_t udp_connect_port_;
    uint32_t compatibility_version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_citadel_5fgamemessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientAccountSyncStorageFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientAccountSyncStorageFile) */ {
 public:
  inline CMsgClientAccountSyncStorageFile() : CMsgClientAccountSyncStorageFile(nullptr) {}
  ~CMsgClientAccountSyncStorageFile() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientAccountSyncStorageFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientAccountSyncStorageFile(const CMsgClientAccountSyncStorageFile& from);
  CMsgClientAccountSyncStorageFile(CMsgClientAccountSyncStorageFile&& from) noexcept
    : CMsgClientAccountSyncStorageFile() {
    *this = ::std::move(from);
  }

  inline CMsgClientAccountSyncStorageFile& operator=(const CMsgClientAccountSyncStorageFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientAccountSyncStorageFile& operator=(CMsgClientAccountSyncStorageFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientAccountSyncStorageFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientAccountSyncStorageFile* internal_default_instance() {
    return reinterpret_cast<const CMsgClientAccountSyncStorageFile*>(
               &_CMsgClientAccountSyncStorageFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgClientAccountSyncStorageFile& a, CMsgClientAccountSyncStorageFile& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientAccountSyncStorageFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientAccountSyncStorageFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientAccountSyncStorageFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientAccountSyncStorageFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientAccountSyncStorageFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientAccountSyncStorageFile& from) {
    CMsgClientAccountSyncStorageFile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientAccountSyncStorageFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientAccountSyncStorageFile";
  }
  protected:
  explicit CMsgClientAccountSyncStorageFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kValuesFieldNumber = 3,
    kVersionFieldNumber = 1,
  };
  // repeated uint32 ids = 2;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  uint32_t _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_ids() const;
  void _internal_add_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_ids();
  public:
  uint32_t ids(int index) const;
  void set_ids(int index, uint32_t value);
  void add_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_ids();

  // repeated uint32 values = 3;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  uint32_t _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_values() const;
  void _internal_add_values(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_values();
  public:
  uint32_t values(int index) const;
  void set_values(int index, uint32_t value);
  void add_values(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_values();

  // optional uint32 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientAccountSyncStorageFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > values_;
    uint32_t version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_citadel_5fgamemessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgClientServerHeader

// optional uint64 game_instance_id = 1;
inline bool CMsgClientServerHeader::_internal_has_game_instance_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientServerHeader::has_game_instance_id() const {
  return _internal_has_game_instance_id();
}
inline void CMsgClientServerHeader::clear_game_instance_id() {
  _impl_.game_instance_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgClientServerHeader::_internal_game_instance_id() const {
  return _impl_.game_instance_id_;
}
inline uint64_t CMsgClientServerHeader::game_instance_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientServerHeader.game_instance_id)
  return _internal_game_instance_id();
}
inline void CMsgClientServerHeader::_internal_set_game_instance_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.game_instance_id_ = value;
}
inline void CMsgClientServerHeader::set_game_instance_id(uint64_t value) {
  _internal_set_game_instance_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientServerHeader.game_instance_id)
}

// optional uint32 local_player_index = 2;
inline bool CMsgClientServerHeader::_internal_has_local_player_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientServerHeader::has_local_player_index() const {
  return _internal_has_local_player_index();
}
inline void CMsgClientServerHeader::clear_local_player_index() {
  _impl_.local_player_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientServerHeader::_internal_local_player_index() const {
  return _impl_.local_player_index_;
}
inline uint32_t CMsgClientServerHeader::local_player_index() const {
  // @@protoc_insertion_point(field_get:CMsgClientServerHeader.local_player_index)
  return _internal_local_player_index();
}
inline void CMsgClientServerHeader::_internal_set_local_player_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.local_player_index_ = value;
}
inline void CMsgClientServerHeader::set_local_player_index(uint32_t value) {
  _internal_set_local_player_index(value);
  // @@protoc_insertion_point(field_set:CMsgClientServerHeader.local_player_index)
}

// optional bytes payload = 3;
inline bool CMsgClientServerHeader::_internal_has_payload() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientServerHeader::has_payload() const {
  return _internal_has_payload();
}
inline void CMsgClientServerHeader::clear_payload() {
  _impl_.payload_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientServerHeader::payload() const {
  // @@protoc_insertion_point(field_get:CMsgClientServerHeader.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientServerHeader::set_payload(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.payload_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientServerHeader.payload)
}
inline std::string* CMsgClientServerHeader::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:CMsgClientServerHeader.payload)
  return _s;
}
inline const std::string& CMsgClientServerHeader::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void CMsgClientServerHeader::_internal_set_payload(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgClientServerHeader::_internal_mutable_payload() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.payload_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgClientServerHeader::release_payload() {
  // @@protoc_insertion_point(field_release:CMsgClientServerHeader.payload)
  if (!_internal_has_payload()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.payload_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientServerHeader::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientServerHeader.payload)
}

// optional .ECitadelGameMessages msg_id = 4 [default = k_EMsgGameServerToClientConnectionStatus];
inline bool CMsgClientServerHeader::_internal_has_msg_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientServerHeader::has_msg_id() const {
  return _internal_has_msg_id();
}
inline void CMsgClientServerHeader::clear_msg_id() {
  _impl_.msg_id_ = 10;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::ECitadelGameMessages CMsgClientServerHeader::_internal_msg_id() const {
  return static_cast< ::ECitadelGameMessages >(_impl_.msg_id_);
}
inline ::ECitadelGameMessages CMsgClientServerHeader::msg_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientServerHeader.msg_id)
  return _internal_msg_id();
}
inline void CMsgClientServerHeader::_internal_set_msg_id(::ECitadelGameMessages value) {
  assert(::ECitadelGameMessages_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.msg_id_ = value;
}
inline void CMsgClientServerHeader::set_msg_id(::ECitadelGameMessages value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientServerHeader.msg_id)
}

// -------------------------------------------------------------------

// CMsgGameServerToClientGameCompleted

// -------------------------------------------------------------------

// CMsgGameServerToClientGoodbye

// -------------------------------------------------------------------

// CMsgGameServerToClientConnectionStatus_Player

// optional int32 player_slot = 1 [default = -1];
inline bool CMsgGameServerToClientConnectionStatus_Player::_internal_has_player_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGameServerToClientConnectionStatus_Player::has_player_slot() const {
  return _internal_has_player_slot();
}
inline void CMsgGameServerToClientConnectionStatus_Player::clear_player_slot() {
  _impl_.player_slot_ = -1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgGameServerToClientConnectionStatus_Player::_internal_player_slot() const {
  return _impl_.player_slot_;
}
inline int32_t CMsgGameServerToClientConnectionStatus_Player::player_slot() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerToClientConnectionStatus.Player.player_slot)
  return _internal_player_slot();
}
inline void CMsgGameServerToClientConnectionStatus_Player::_internal_set_player_slot(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.player_slot_ = value;
}
inline void CMsgGameServerToClientConnectionStatus_Player::set_player_slot(int32_t value) {
  _internal_set_player_slot(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerToClientConnectionStatus.Player.player_slot)
}

// optional .CMsgGameServerToClientConnectionStatus.EStatus status = 2 [default = k_EConnected];
inline bool CMsgGameServerToClientConnectionStatus_Player::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGameServerToClientConnectionStatus_Player::has_status() const {
  return _internal_has_status();
}
inline void CMsgGameServerToClientConnectionStatus_Player::clear_status() {
  _impl_.status_ = 1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::CMsgGameServerToClientConnectionStatus_EStatus CMsgGameServerToClientConnectionStatus_Player::_internal_status() const {
  return static_cast< ::CMsgGameServerToClientConnectionStatus_EStatus >(_impl_.status_);
}
inline ::CMsgGameServerToClientConnectionStatus_EStatus CMsgGameServerToClientConnectionStatus_Player::status() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerToClientConnectionStatus.Player.status)
  return _internal_status();
}
inline void CMsgGameServerToClientConnectionStatus_Player::_internal_set_status(::CMsgGameServerToClientConnectionStatus_EStatus value) {
  assert(::CMsgGameServerToClientConnectionStatus_EStatus_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.status_ = value;
}
inline void CMsgGameServerToClientConnectionStatus_Player::set_status(::CMsgGameServerToClientConnectionStatus_EStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerToClientConnectionStatus.Player.status)
}

// optional bool inactivity_ticking = 3;
inline bool CMsgGameServerToClientConnectionStatus_Player::_internal_has_inactivity_ticking() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameServerToClientConnectionStatus_Player::has_inactivity_ticking() const {
  return _internal_has_inactivity_ticking();
}
inline void CMsgGameServerToClientConnectionStatus_Player::clear_inactivity_ticking() {
  _impl_.inactivity_ticking_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgGameServerToClientConnectionStatus_Player::_internal_inactivity_ticking() const {
  return _impl_.inactivity_ticking_;
}
inline bool CMsgGameServerToClientConnectionStatus_Player::inactivity_ticking() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerToClientConnectionStatus.Player.inactivity_ticking)
  return _internal_inactivity_ticking();
}
inline void CMsgGameServerToClientConnectionStatus_Player::_internal_set_inactivity_ticking(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.inactivity_ticking_ = value;
}
inline void CMsgGameServerToClientConnectionStatus_Player::set_inactivity_ticking(bool value) {
  _internal_set_inactivity_ticking(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerToClientConnectionStatus.Player.inactivity_ticking)
}

// optional uint32 inactivity_ms_remaining = 4;
inline bool CMsgGameServerToClientConnectionStatus_Player::_internal_has_inactivity_ms_remaining() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameServerToClientConnectionStatus_Player::has_inactivity_ms_remaining() const {
  return _internal_has_inactivity_ms_remaining();
}
inline void CMsgGameServerToClientConnectionStatus_Player::clear_inactivity_ms_remaining() {
  _impl_.inactivity_ms_remaining_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGameServerToClientConnectionStatus_Player::_internal_inactivity_ms_remaining() const {
  return _impl_.inactivity_ms_remaining_;
}
inline uint32_t CMsgGameServerToClientConnectionStatus_Player::inactivity_ms_remaining() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerToClientConnectionStatus.Player.inactivity_ms_remaining)
  return _internal_inactivity_ms_remaining();
}
inline void CMsgGameServerToClientConnectionStatus_Player::_internal_set_inactivity_ms_remaining(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.inactivity_ms_remaining_ = value;
}
inline void CMsgGameServerToClientConnectionStatus_Player::set_inactivity_ms_remaining(uint32_t value) {
  _internal_set_inactivity_ms_remaining(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerToClientConnectionStatus.Player.inactivity_ms_remaining)
}

// optional uint32 inactivity_anim_ms_remaining = 5;
inline bool CMsgGameServerToClientConnectionStatus_Player::_internal_has_inactivity_anim_ms_remaining() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGameServerToClientConnectionStatus_Player::has_inactivity_anim_ms_remaining() const {
  return _internal_has_inactivity_anim_ms_remaining();
}
inline void CMsgGameServerToClientConnectionStatus_Player::clear_inactivity_anim_ms_remaining() {
  _impl_.inactivity_anim_ms_remaining_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGameServerToClientConnectionStatus_Player::_internal_inactivity_anim_ms_remaining() const {
  return _impl_.inactivity_anim_ms_remaining_;
}
inline uint32_t CMsgGameServerToClientConnectionStatus_Player::inactivity_anim_ms_remaining() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerToClientConnectionStatus.Player.inactivity_anim_ms_remaining)
  return _internal_inactivity_anim_ms_remaining();
}
inline void CMsgGameServerToClientConnectionStatus_Player::_internal_set_inactivity_anim_ms_remaining(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.inactivity_anim_ms_remaining_ = value;
}
inline void CMsgGameServerToClientConnectionStatus_Player::set_inactivity_anim_ms_remaining(uint32_t value) {
  _internal_set_inactivity_anim_ms_remaining(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerToClientConnectionStatus.Player.inactivity_anim_ms_remaining)
}

// -------------------------------------------------------------------

// CMsgGameServerToClientConnectionStatus

// repeated .CMsgGameServerToClientConnectionStatus.Player players = 1;
inline int CMsgGameServerToClientConnectionStatus::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int CMsgGameServerToClientConnectionStatus::players_size() const {
  return _internal_players_size();
}
inline void CMsgGameServerToClientConnectionStatus::clear_players() {
  _impl_.players_.Clear();
}
inline ::CMsgGameServerToClientConnectionStatus_Player* CMsgGameServerToClientConnectionStatus::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameServerToClientConnectionStatus.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameServerToClientConnectionStatus_Player >*
CMsgGameServerToClientConnectionStatus::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameServerToClientConnectionStatus.players)
  return &_impl_.players_;
}
inline const ::CMsgGameServerToClientConnectionStatus_Player& CMsgGameServerToClientConnectionStatus::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::CMsgGameServerToClientConnectionStatus_Player& CMsgGameServerToClientConnectionStatus::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameServerToClientConnectionStatus.players)
  return _internal_players(index);
}
inline ::CMsgGameServerToClientConnectionStatus_Player* CMsgGameServerToClientConnectionStatus::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::CMsgGameServerToClientConnectionStatus_Player* CMsgGameServerToClientConnectionStatus::add_players() {
  ::CMsgGameServerToClientConnectionStatus_Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:CMsgGameServerToClientConnectionStatus.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameServerToClientConnectionStatus_Player >&
CMsgGameServerToClientConnectionStatus::players() const {
  // @@protoc_insertion_point(field_list:CMsgGameServerToClientConnectionStatus.players)
  return _impl_.players_;
}

// -------------------------------------------------------------------

// CClientReconnectInfo

// optional fixed64 server_steam_id = 1;
inline bool CClientReconnectInfo::_internal_has_server_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClientReconnectInfo::has_server_steam_id() const {
  return _internal_has_server_steam_id();
}
inline void CClientReconnectInfo::clear_server_steam_id() {
  _impl_.server_steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CClientReconnectInfo::_internal_server_steam_id() const {
  return _impl_.server_steam_id_;
}
inline uint64_t CClientReconnectInfo::server_steam_id() const {
  // @@protoc_insertion_point(field_get:CClientReconnectInfo.server_steam_id)
  return _internal_server_steam_id();
}
inline void CClientReconnectInfo::_internal_set_server_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.server_steam_id_ = value;
}
inline void CClientReconnectInfo::set_server_steam_id(uint64_t value) {
  _internal_set_server_steam_id(value);
  // @@protoc_insertion_point(field_set:CClientReconnectInfo.server_steam_id)
}

// optional uint64 lobby_id = 2;
inline bool CClientReconnectInfo::_internal_has_lobby_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClientReconnectInfo::has_lobby_id() const {
  return _internal_has_lobby_id();
}
inline void CClientReconnectInfo::clear_lobby_id() {
  _impl_.lobby_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CClientReconnectInfo::_internal_lobby_id() const {
  return _impl_.lobby_id_;
}
inline uint64_t CClientReconnectInfo::lobby_id() const {
  // @@protoc_insertion_point(field_get:CClientReconnectInfo.lobby_id)
  return _internal_lobby_id();
}
inline void CClientReconnectInfo::_internal_set_lobby_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.lobby_id_ = value;
}
inline void CClientReconnectInfo::set_lobby_id(uint64_t value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:CClientReconnectInfo.lobby_id)
}

// optional uint32 time_updated = 3;
inline bool CClientReconnectInfo::_internal_has_time_updated() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CClientReconnectInfo::has_time_updated() const {
  return _internal_has_time_updated();
}
inline void CClientReconnectInfo::clear_time_updated() {
  _impl_.time_updated_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CClientReconnectInfo::_internal_time_updated() const {
  return _impl_.time_updated_;
}
inline uint32_t CClientReconnectInfo::time_updated() const {
  // @@protoc_insertion_point(field_get:CClientReconnectInfo.time_updated)
  return _internal_time_updated();
}
inline void CClientReconnectInfo::_internal_set_time_updated(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.time_updated_ = value;
}
inline void CClientReconnectInfo::set_time_updated(uint32_t value) {
  _internal_set_time_updated(value);
  // @@protoc_insertion_point(field_set:CClientReconnectInfo.time_updated)
}

// optional uint32 udp_connect_ip = 4;
inline bool CClientReconnectInfo::_internal_has_udp_connect_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CClientReconnectInfo::has_udp_connect_ip() const {
  return _internal_has_udp_connect_ip();
}
inline void CClientReconnectInfo::clear_udp_connect_ip() {
  _impl_.udp_connect_ip_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CClientReconnectInfo::_internal_udp_connect_ip() const {
  return _impl_.udp_connect_ip_;
}
inline uint32_t CClientReconnectInfo::udp_connect_ip() const {
  // @@protoc_insertion_point(field_get:CClientReconnectInfo.udp_connect_ip)
  return _internal_udp_connect_ip();
}
inline void CClientReconnectInfo::_internal_set_udp_connect_ip(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.udp_connect_ip_ = value;
}
inline void CClientReconnectInfo::set_udp_connect_ip(uint32_t value) {
  _internal_set_udp_connect_ip(value);
  // @@protoc_insertion_point(field_set:CClientReconnectInfo.udp_connect_ip)
}

// optional uint32 udp_connect_port = 5;
inline bool CClientReconnectInfo::_internal_has_udp_connect_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CClientReconnectInfo::has_udp_connect_port() const {
  return _internal_has_udp_connect_port();
}
inline void CClientReconnectInfo::clear_udp_connect_port() {
  _impl_.udp_connect_port_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CClientReconnectInfo::_internal_udp_connect_port() const {
  return _impl_.udp_connect_port_;
}
inline uint32_t CClientReconnectInfo::udp_connect_port() const {
  // @@protoc_insertion_point(field_get:CClientReconnectInfo.udp_connect_port)
  return _internal_udp_connect_port();
}
inline void CClientReconnectInfo::_internal_set_udp_connect_port(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.udp_connect_port_ = value;
}
inline void CClientReconnectInfo::set_udp_connect_port(uint32_t value) {
  _internal_set_udp_connect_port(value);
  // @@protoc_insertion_point(field_set:CClientReconnectInfo.udp_connect_port)
}

// optional uint32 compatibility_version = 6;
inline bool CClientReconnectInfo::_internal_has_compatibility_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CClientReconnectInfo::has_compatibility_version() const {
  return _internal_has_compatibility_version();
}
inline void CClientReconnectInfo::clear_compatibility_version() {
  _impl_.compatibility_version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CClientReconnectInfo::_internal_compatibility_version() const {
  return _impl_.compatibility_version_;
}
inline uint32_t CClientReconnectInfo::compatibility_version() const {
  // @@protoc_insertion_point(field_get:CClientReconnectInfo.compatibility_version)
  return _internal_compatibility_version();
}
inline void CClientReconnectInfo::_internal_set_compatibility_version(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.compatibility_version_ = value;
}
inline void CClientReconnectInfo::set_compatibility_version(uint32_t value) {
  _internal_set_compatibility_version(value);
  // @@protoc_insertion_point(field_set:CClientReconnectInfo.compatibility_version)
}

// -------------------------------------------------------------------

// CMsgClientAccountSyncStorageFile

// optional uint32 version = 1;
inline bool CMsgClientAccountSyncStorageFile::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientAccountSyncStorageFile::has_version() const {
  return _internal_has_version();
}
inline void CMsgClientAccountSyncStorageFile::clear_version() {
  _impl_.version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientAccountSyncStorageFile::_internal_version() const {
  return _impl_.version_;
}
inline uint32_t CMsgClientAccountSyncStorageFile::version() const {
  // @@protoc_insertion_point(field_get:CMsgClientAccountSyncStorageFile.version)
  return _internal_version();
}
inline void CMsgClientAccountSyncStorageFile::_internal_set_version(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.version_ = value;
}
inline void CMsgClientAccountSyncStorageFile::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CMsgClientAccountSyncStorageFile.version)
}

// repeated uint32 ids = 2;
inline int CMsgClientAccountSyncStorageFile::_internal_ids_size() const {
  return _impl_.ids_.size();
}
inline int CMsgClientAccountSyncStorageFile::ids_size() const {
  return _internal_ids_size();
}
inline void CMsgClientAccountSyncStorageFile::clear_ids() {
  _impl_.ids_.Clear();
}
inline uint32_t CMsgClientAccountSyncStorageFile::_internal_ids(int index) const {
  return _impl_.ids_.Get(index);
}
inline uint32_t CMsgClientAccountSyncStorageFile::ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientAccountSyncStorageFile.ids)
  return _internal_ids(index);
}
inline void CMsgClientAccountSyncStorageFile::set_ids(int index, uint32_t value) {
  _impl_.ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgClientAccountSyncStorageFile.ids)
}
inline void CMsgClientAccountSyncStorageFile::_internal_add_ids(uint32_t value) {
  _impl_.ids_.Add(value);
}
inline void CMsgClientAccountSyncStorageFile::add_ids(uint32_t value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:CMsgClientAccountSyncStorageFile.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgClientAccountSyncStorageFile::_internal_ids() const {
  return _impl_.ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgClientAccountSyncStorageFile::ids() const {
  // @@protoc_insertion_point(field_list:CMsgClientAccountSyncStorageFile.ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgClientAccountSyncStorageFile::_internal_mutable_ids() {
  return &_impl_.ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgClientAccountSyncStorageFile::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientAccountSyncStorageFile.ids)
  return _internal_mutable_ids();
}

// repeated uint32 values = 3;
inline int CMsgClientAccountSyncStorageFile::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int CMsgClientAccountSyncStorageFile::values_size() const {
  return _internal_values_size();
}
inline void CMsgClientAccountSyncStorageFile::clear_values() {
  _impl_.values_.Clear();
}
inline uint32_t CMsgClientAccountSyncStorageFile::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline uint32_t CMsgClientAccountSyncStorageFile::values(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientAccountSyncStorageFile.values)
  return _internal_values(index);
}
inline void CMsgClientAccountSyncStorageFile::set_values(int index, uint32_t value) {
  _impl_.values_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgClientAccountSyncStorageFile.values)
}
inline void CMsgClientAccountSyncStorageFile::_internal_add_values(uint32_t value) {
  _impl_.values_.Add(value);
}
inline void CMsgClientAccountSyncStorageFile::add_values(uint32_t value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:CMsgClientAccountSyncStorageFile.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgClientAccountSyncStorageFile::_internal_values() const {
  return _impl_.values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgClientAccountSyncStorageFile::values() const {
  // @@protoc_insertion_point(field_list:CMsgClientAccountSyncStorageFile.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgClientAccountSyncStorageFile::_internal_mutable_values() {
  return &_impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgClientAccountSyncStorageFile::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientAccountSyncStorageFile.values)
  return _internal_mutable_values();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CMsgGameServerToClientConnectionStatus_EStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGameServerToClientConnectionStatus_EStatus>() {
  return ::CMsgGameServerToClientConnectionStatus_EStatus_descriptor();
}
template <> struct is_proto_enum< ::ECitadelGameMessages> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ECitadelGameMessages>() {
  return ::ECitadelGameMessages_descriptor();
}
template <> struct is_proto_enum< ::ECitadelDisconnectReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ECitadelDisconnectReason>() {
  return ::ECitadelDisconnectReason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_citadel_5fgamemessages_2eproto
