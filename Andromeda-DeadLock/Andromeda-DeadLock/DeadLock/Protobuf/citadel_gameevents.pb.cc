// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: citadel_gameevents.proto

#include "citadel_gameevents.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgFireBullets_TracerAssignment::CMsgFireBullets_TracerAssignment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tracer_resource_id_)*/uint64_t{0u}
  , /*decltype(_impl_.bullet_indicies_)*/0u} {}
struct CMsgFireBullets_TracerAssignmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgFireBullets_TracerAssignmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgFireBullets_TracerAssignmentDefaultTypeInternal() {}
  union {
    CMsgFireBullets_TracerAssignment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgFireBullets_TracerAssignmentDefaultTypeInternal _CMsgFireBullets_TracerAssignment_default_instance_;
PROTOBUF_CONSTEXPR CMsgFireBullets::CMsgFireBullets(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tracer_additional_)*/{}
  , /*decltype(_impl_.origin_)*/nullptr
  , /*decltype(_impl_.angles_)*/nullptr
  , /*decltype(_impl_.tracer_replacement_)*/nullptr
  , /*decltype(_impl_.angles_original_)*/nullptr
  , /*decltype(_impl_.seed_)*/0u
  , /*decltype(_impl_.penetration_percent_)*/0
  , /*decltype(_impl_.spread_)*/0
  , /*decltype(_impl_.bullets_override_)*/0u
  , /*decltype(_impl_.weapon_subclass_id_)*/0u
  , /*decltype(_impl_.shot_number_)*/0u
  , /*decltype(_impl_.max_range_)*/0
  , /*decltype(_impl_.shooter_entity_)*/-1
  , /*decltype(_impl_.ability_)*/-1
  , /*decltype(_impl_.fired_from_gun_)*/true
  , /*decltype(_impl_.ignore_entity_)*/-1} {}
struct CMsgFireBulletsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgFireBulletsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgFireBulletsDefaultTypeInternal() {}
  union {
    CMsgFireBullets _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgFireBulletsDefaultTypeInternal _CMsgFireBullets_default_instance_;
PROTOBUF_CONSTEXPR CMsgBulletImpact::CMsgBulletImpact(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.trace_start_)*/nullptr
  , /*decltype(_impl_.impact_origin_)*/nullptr
  , /*decltype(_impl_.surface_normal_)*/nullptr
  , /*decltype(_impl_.damage_)*/0u
  , /*decltype(_impl_.surface_type_)*/0u
  , /*decltype(_impl_.impacted_hitbox_)*/0u
  , /*decltype(_impl_.weapon_subclass_id_)*/0u
  , /*decltype(_impl_.shooter_entindex_)*/-1
  , /*decltype(_impl_.ability_entindex_)*/-1
  , /*decltype(_impl_.impacted_entindex_)*/-1} {}
struct CMsgBulletImpactDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBulletImpactDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBulletImpactDefaultTypeInternal() {}
  union {
    CMsgBulletImpact _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBulletImpactDefaultTypeInternal _CMsgBulletImpact_default_instance_;
PROTOBUF_CONSTEXPR CMsgPlayerAnimEvent::CMsgPlayerAnimEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.event_)*/0u
  , /*decltype(_impl_.data_)*/0
  , /*decltype(_impl_.player_)*/16777215u} {}
struct CMsgPlayerAnimEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPlayerAnimEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPlayerAnimEventDefaultTypeInternal() {}
  union {
    CMsgPlayerAnimEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPlayerAnimEventDefaultTypeInternal _CMsgPlayerAnimEvent_default_instance_;
PROTOBUF_CONSTEXPR CMsgParticleSystemManager_CreateParticle::CMsgParticleSystemManager_CreateParticle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.angles_)*/nullptr
  , /*decltype(_impl_.particle_name_index_)*/uint64_t{0u}
  , /*decltype(_impl_.attach_type_)*/0
  , /*decltype(_impl_.entity_handle_)*/16777215u} {}
struct CMsgParticleSystemManager_CreateParticleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgParticleSystemManager_CreateParticleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgParticleSystemManager_CreateParticleDefaultTypeInternal() {}
  union {
    CMsgParticleSystemManager_CreateParticle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgParticleSystemManager_CreateParticleDefaultTypeInternal _CMsgParticleSystemManager_CreateParticle_default_instance_;
PROTOBUF_CONSTEXPR CMsgParticleSystemManager_DestroyParticle::CMsgParticleSystemManager_DestroyParticle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.destroy_immediately_)*/false} {}
struct CMsgParticleSystemManager_DestroyParticleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgParticleSystemManager_DestroyParticleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgParticleSystemManager_DestroyParticleDefaultTypeInternal() {}
  union {
    CMsgParticleSystemManager_DestroyParticle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgParticleSystemManager_DestroyParticleDefaultTypeInternal _CMsgParticleSystemManager_DestroyParticle_default_instance_;
PROTOBUF_CONSTEXPR CMsgParticleSystemManager_DestroyParticleInvolving::CMsgParticleSystemManager_DestroyParticleInvolving(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.destroy_immediately_)*/false
  , /*decltype(_impl_.entity_handle_)*/16777215u} {}
struct CMsgParticleSystemManager_DestroyParticleInvolvingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgParticleSystemManager_DestroyParticleInvolvingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgParticleSystemManager_DestroyParticleInvolvingDefaultTypeInternal() {}
  union {
    CMsgParticleSystemManager_DestroyParticleInvolving _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgParticleSystemManager_DestroyParticleInvolvingDefaultTypeInternal _CMsgParticleSystemManager_DestroyParticleInvolving_default_instance_;
PROTOBUF_CONSTEXPR CMsgParticleSystemManager_ReleaseParticleIndex::CMsgParticleSystemManager_ReleaseParticleIndex(
    ::_pbi::ConstantInitialized) {}
struct CMsgParticleSystemManager_ReleaseParticleIndexDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgParticleSystemManager_ReleaseParticleIndexDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgParticleSystemManager_ReleaseParticleIndexDefaultTypeInternal() {}
  union {
    CMsgParticleSystemManager_ReleaseParticleIndex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgParticleSystemManager_ReleaseParticleIndexDefaultTypeInternal _CMsgParticleSystemManager_ReleaseParticleIndex_default_instance_;
PROTOBUF_CONSTEXPR CMsgParticleSystemManager_UpdateParticle::CMsgParticleSystemManager_UpdateParticle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.control_point_)*/0} {}
struct CMsgParticleSystemManager_UpdateParticleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgParticleSystemManager_UpdateParticleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgParticleSystemManager_UpdateParticleDefaultTypeInternal() {}
  union {
    CMsgParticleSystemManager_UpdateParticle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgParticleSystemManager_UpdateParticleDefaultTypeInternal _CMsgParticleSystemManager_UpdateParticle_default_instance_;
PROTOBUF_CONSTEXPR CMsgParticleSystemManager_UpdateParticleFwd::CMsgParticleSystemManager_UpdateParticleFwd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.forward_)*/nullptr
  , /*decltype(_impl_.control_point_)*/0} {}
struct CMsgParticleSystemManager_UpdateParticleFwdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgParticleSystemManager_UpdateParticleFwdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgParticleSystemManager_UpdateParticleFwdDefaultTypeInternal() {}
  union {
    CMsgParticleSystemManager_UpdateParticleFwd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgParticleSystemManager_UpdateParticleFwdDefaultTypeInternal _CMsgParticleSystemManager_UpdateParticleFwd_default_instance_;
PROTOBUF_CONSTEXPR CMsgParticleSystemManager_UpdateParticleOrient::CMsgParticleSystemManager_UpdateParticleOrient(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.forward_)*/nullptr
  , /*decltype(_impl_.left_)*/nullptr
  , /*decltype(_impl_.up_)*/nullptr
  , /*decltype(_impl_.control_point_)*/0} {}
struct CMsgParticleSystemManager_UpdateParticleOrientDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgParticleSystemManager_UpdateParticleOrientDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgParticleSystemManager_UpdateParticleOrientDefaultTypeInternal() {}
  union {
    CMsgParticleSystemManager_UpdateParticleOrient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgParticleSystemManager_UpdateParticleOrientDefaultTypeInternal _CMsgParticleSystemManager_UpdateParticleOrient_default_instance_;
PROTOBUF_CONSTEXPR CMsgParticleSystemManager_UpdateParticleFallback::CMsgParticleSystemManager_UpdateParticleFallback(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.control_point_)*/0} {}
struct CMsgParticleSystemManager_UpdateParticleFallbackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgParticleSystemManager_UpdateParticleFallbackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgParticleSystemManager_UpdateParticleFallbackDefaultTypeInternal() {}
  union {
    CMsgParticleSystemManager_UpdateParticleFallback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgParticleSystemManager_UpdateParticleFallbackDefaultTypeInternal _CMsgParticleSystemManager_UpdateParticleFallback_default_instance_;
PROTOBUF_CONSTEXPR CMsgParticleSystemManager_UpdateParticleEnt::CMsgParticleSystemManager_UpdateParticleEnt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fallback_position_)*/nullptr
  , /*decltype(_impl_.control_point_)*/0
  , /*decltype(_impl_.attach_type_)*/0
  , /*decltype(_impl_.attachment_)*/0
  , /*decltype(_impl_.entity_handle_)*/16777215u} {}
struct CMsgParticleSystemManager_UpdateParticleEntDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgParticleSystemManager_UpdateParticleEntDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgParticleSystemManager_UpdateParticleEntDefaultTypeInternal() {}
  union {
    CMsgParticleSystemManager_UpdateParticleEnt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgParticleSystemManager_UpdateParticleEntDefaultTypeInternal _CMsgParticleSystemManager_UpdateParticleEnt_default_instance_;
PROTOBUF_CONSTEXPR CMsgParticleSystemManager_UpdateParticleOffset::CMsgParticleSystemManager_UpdateParticleOffset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.origin_offset_)*/nullptr
  , /*decltype(_impl_.control_point_)*/0} {}
struct CMsgParticleSystemManager_UpdateParticleOffsetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgParticleSystemManager_UpdateParticleOffsetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgParticleSystemManager_UpdateParticleOffsetDefaultTypeInternal() {}
  union {
    CMsgParticleSystemManager_UpdateParticleOffset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgParticleSystemManager_UpdateParticleOffsetDefaultTypeInternal _CMsgParticleSystemManager_UpdateParticleOffset_default_instance_;
PROTOBUF_CONSTEXPR CMsgParticleSystemManager_UpdateParticleFrozen::CMsgParticleSystemManager_UpdateParticleFrozen(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.set_frozen_)*/false} {}
struct CMsgParticleSystemManager_UpdateParticleFrozenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgParticleSystemManager_UpdateParticleFrozenDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgParticleSystemManager_UpdateParticleFrozenDefaultTypeInternal() {}
  union {
    CMsgParticleSystemManager_UpdateParticleFrozen _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgParticleSystemManager_UpdateParticleFrozenDefaultTypeInternal _CMsgParticleSystemManager_UpdateParticleFrozen_default_instance_;
PROTOBUF_CONSTEXPR CMsgParticleSystemManager_UpdateParticleShouldDraw::CMsgParticleSystemManager_UpdateParticleShouldDraw(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.should_draw_)*/false} {}
struct CMsgParticleSystemManager_UpdateParticleShouldDrawDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgParticleSystemManager_UpdateParticleShouldDrawDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgParticleSystemManager_UpdateParticleShouldDrawDefaultTypeInternal() {}
  union {
    CMsgParticleSystemManager_UpdateParticleShouldDraw _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgParticleSystemManager_UpdateParticleShouldDrawDefaultTypeInternal _CMsgParticleSystemManager_UpdateParticleShouldDraw_default_instance_;
PROTOBUF_CONSTEXPR CMsgParticleSystemManager::CMsgParticleSystemManager(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.create_particle_)*/nullptr
  , /*decltype(_impl_.destroy_particle_)*/nullptr
  , /*decltype(_impl_.destroy_particle_involving_)*/nullptr
  , /*decltype(_impl_.release_particle_index_)*/nullptr
  , /*decltype(_impl_.update_particle_)*/nullptr
  , /*decltype(_impl_.update_particle_fwd_)*/nullptr
  , /*decltype(_impl_.update_particle_orient_)*/nullptr
  , /*decltype(_impl_.update_particle_fallback_)*/nullptr
  , /*decltype(_impl_.update_particle_offset_)*/nullptr
  , /*decltype(_impl_.update_particle_ent_)*/nullptr
  , /*decltype(_impl_.update_particle_frozen_)*/nullptr
  , /*decltype(_impl_.update_particle_should_draw_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.index_)*/0u} {}
struct CMsgParticleSystemManagerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgParticleSystemManagerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgParticleSystemManagerDefaultTypeInternal() {}
  union {
    CMsgParticleSystemManager _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgParticleSystemManagerDefaultTypeInternal _CMsgParticleSystemManager_default_instance_;
PROTOBUF_CONSTEXPR CMsgScreenTextPretty::CMsgScreenTextPretty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.font_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.x_pos_)*/0
  , /*decltype(_impl_.y_pos_)*/0
  , /*decltype(_impl_.line_)*/0
  , /*decltype(_impl_.r_)*/0
  , /*decltype(_impl_.g_)*/0
  , /*decltype(_impl_.b_)*/0
  , /*decltype(_impl_.a_)*/0
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.font_size_)*/0
  , /*decltype(_impl_.bold_font_)*/false} {}
struct CMsgScreenTextPrettyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgScreenTextPrettyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgScreenTextPrettyDefaultTypeInternal() {}
  union {
    CMsgScreenTextPretty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgScreenTextPrettyDefaultTypeInternal _CMsgScreenTextPretty_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerRequestedTracer::CMsgServerRequestedTracer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.origin_)*/nullptr
  , /*decltype(_impl_.end_)*/nullptr
  , /*decltype(_impl_.dps_)*/0
  , /*decltype(_impl_.weaponid_)*/-1
  , /*decltype(_impl_.entity_handle_)*/16777215u} {}
struct CMsgServerRequestedTracerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerRequestedTracerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerRequestedTracerDefaultTypeInternal() {}
  union {
    CMsgServerRequestedTracer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerRequestedTracerDefaultTypeInternal _CMsgServerRequestedTracer_default_instance_;
PROTOBUF_CONSTEXPR CMsgEnableSatVolumesEvent::CMsgEnableSatVolumesEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mode_)*/0u
  , /*decltype(_impl_.desat_amount_)*/0
  , /*decltype(_impl_.sat_tint_)*/0u
  , /*decltype(_impl_.desat_tint_)*/0u
  , /*decltype(_impl_.outline_color_)*/0u} {}
struct CMsgEnableSatVolumesEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgEnableSatVolumesEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgEnableSatVolumesEventDefaultTypeInternal() {}
  union {
    CMsgEnableSatVolumesEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgEnableSatVolumesEventDefaultTypeInternal _CMsgEnableSatVolumesEvent_default_instance_;
PROTOBUF_CONSTEXPR CMsgPlaceSatVolumeEvent::CMsgPlaceSatVolumeEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.direction_)*/nullptr
  , /*decltype(_impl_.radius_)*/0
  , /*decltype(_impl_.falloff_distance_)*/0
  , /*decltype(_impl_.theta_dot_)*/0
  , /*decltype(_impl_.phi_dot_)*/0
  , /*decltype(_impl_.attachment_handle_)*/0u
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.volume_id_)*/0
  , /*decltype(_impl_.entity_handle_)*/16777215u} {}
struct CMsgPlaceSatVolumeEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPlaceSatVolumeEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPlaceSatVolumeEventDefaultTypeInternal() {}
  union {
    CMsgPlaceSatVolumeEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPlaceSatVolumeEventDefaultTypeInternal _CMsgPlaceSatVolumeEvent_default_instance_;
PROTOBUF_CONSTEXPR CMsgRemoveSatVolumeEvent::CMsgRemoveSatVolumeEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.volume_id_)*/0} {}
struct CMsgRemoveSatVolumeEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgRemoveSatVolumeEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgRemoveSatVolumeEventDefaultTypeInternal() {}
  union {
    CMsgRemoveSatVolumeEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgRemoveSatVolumeEventDefaultTypeInternal _CMsgRemoveSatVolumeEvent_default_instance_;
PROTOBUF_CONSTEXPR CMsgDisableSatVolumesEvent::CMsgDisableSatVolumesEvent(
    ::_pbi::ConstantInitialized) {}
struct CMsgDisableSatVolumesEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDisableSatVolumesEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDisableSatVolumesEventDefaultTypeInternal() {}
  union {
    CMsgDisableSatVolumesEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDisableSatVolumesEventDefaultTypeInternal _CMsgDisableSatVolumesEvent_default_instance_;
static ::_pb::Metadata file_level_metadata_citadel_5fgameevents_2eproto[23];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_citadel_5fgameevents_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_citadel_5fgameevents_2eproto = nullptr;

const uint32_t TableStruct_citadel_5fgameevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgFireBullets_TracerAssignment, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgFireBullets_TracerAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgFireBullets_TracerAssignment, _impl_.tracer_resource_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgFireBullets_TracerAssignment, _impl_.bullet_indicies_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgFireBullets, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgFireBullets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgFireBullets, _impl_.origin_),
  PROTOBUF_FIELD_OFFSET(::CMsgFireBullets, _impl_.angles_),
  PROTOBUF_FIELD_OFFSET(::CMsgFireBullets, _impl_.seed_),
  PROTOBUF_FIELD_OFFSET(::CMsgFireBullets, _impl_.shooter_entity_),
  PROTOBUF_FIELD_OFFSET(::CMsgFireBullets, _impl_.ability_),
  PROTOBUF_FIELD_OFFSET(::CMsgFireBullets, _impl_.penetration_percent_),
  PROTOBUF_FIELD_OFFSET(::CMsgFireBullets, _impl_.spread_),
  PROTOBUF_FIELD_OFFSET(::CMsgFireBullets, _impl_.fired_from_gun_),
  PROTOBUF_FIELD_OFFSET(::CMsgFireBullets, _impl_.bullets_override_),
  PROTOBUF_FIELD_OFFSET(::CMsgFireBullets, _impl_.tracer_replacement_),
  PROTOBUF_FIELD_OFFSET(::CMsgFireBullets, _impl_.tracer_additional_),
  PROTOBUF_FIELD_OFFSET(::CMsgFireBullets, _impl_.angles_original_),
  PROTOBUF_FIELD_OFFSET(::CMsgFireBullets, _impl_.weapon_subclass_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgFireBullets, _impl_.shot_number_),
  PROTOBUF_FIELD_OFFSET(::CMsgFireBullets, _impl_.ignore_entity_),
  PROTOBUF_FIELD_OFFSET(::CMsgFireBullets, _impl_.max_range_),
  0,
  1,
  4,
  11,
  12,
  5,
  6,
  13,
  7,
  2,
  ~0u,
  3,
  8,
  9,
  14,
  10,
  PROTOBUF_FIELD_OFFSET(::CMsgBulletImpact, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBulletImpact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBulletImpact, _impl_.trace_start_),
  PROTOBUF_FIELD_OFFSET(::CMsgBulletImpact, _impl_.impact_origin_),
  PROTOBUF_FIELD_OFFSET(::CMsgBulletImpact, _impl_.surface_normal_),
  PROTOBUF_FIELD_OFFSET(::CMsgBulletImpact, _impl_.damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgBulletImpact, _impl_.surface_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgBulletImpact, _impl_.ability_entindex_),
  PROTOBUF_FIELD_OFFSET(::CMsgBulletImpact, _impl_.impacted_entindex_),
  PROTOBUF_FIELD_OFFSET(::CMsgBulletImpact, _impl_.impacted_hitbox_),
  PROTOBUF_FIELD_OFFSET(::CMsgBulletImpact, _impl_.weapon_subclass_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBulletImpact, _impl_.shooter_entindex_),
  0,
  1,
  2,
  3,
  4,
  8,
  9,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerAnimEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerAnimEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerAnimEvent, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerAnimEvent, _impl_.event_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerAnimEvent, _impl_.data_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_CreateParticle, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_CreateParticle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_CreateParticle, _impl_.particle_name_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_CreateParticle, _impl_.attach_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_CreateParticle, _impl_.entity_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_CreateParticle, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_CreateParticle, _impl_.angles_),
  2,
  3,
  4,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_DestroyParticle, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_DestroyParticle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_DestroyParticle, _impl_.destroy_immediately_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_DestroyParticleInvolving, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_DestroyParticleInvolving, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_DestroyParticleInvolving, _impl_.destroy_immediately_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_DestroyParticleInvolving, _impl_.entity_handle_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_ReleaseParticleIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticle, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticle, _impl_.control_point_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticle, _impl_.position_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleFwd, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleFwd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleFwd, _impl_.control_point_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleFwd, _impl_.forward_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleOrient, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleOrient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleOrient, _impl_.control_point_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleOrient, _impl_.forward_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleOrient, _impl_.left_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleOrient, _impl_.up_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleFallback, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleFallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleFallback, _impl_.control_point_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleFallback, _impl_.position_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleEnt, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleEnt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleEnt, _impl_.control_point_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleEnt, _impl_.entity_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleEnt, _impl_.attach_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleEnt, _impl_.attachment_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleEnt, _impl_.fallback_position_),
  1,
  4,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleOffset, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleOffset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleOffset, _impl_.control_point_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleOffset, _impl_.origin_offset_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleFrozen, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleFrozen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleFrozen, _impl_.set_frozen_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleShouldDraw, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleShouldDraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager_UpdateParticleShouldDraw, _impl_.should_draw_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager, _impl_.create_particle_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager, _impl_.destroy_particle_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager, _impl_.destroy_particle_involving_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager, _impl_.release_particle_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager, _impl_.update_particle_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager, _impl_.update_particle_fwd_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager, _impl_.update_particle_orient_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager, _impl_.update_particle_fallback_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager, _impl_.update_particle_offset_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager, _impl_.update_particle_ent_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager, _impl_.update_particle_frozen_),
  PROTOBUF_FIELD_OFFSET(::CMsgParticleSystemManager, _impl_.update_particle_should_draw_),
  12,
  13,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::CMsgScreenTextPretty, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgScreenTextPretty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgScreenTextPretty, _impl_.x_pos_),
  PROTOBUF_FIELD_OFFSET(::CMsgScreenTextPretty, _impl_.y_pos_),
  PROTOBUF_FIELD_OFFSET(::CMsgScreenTextPretty, _impl_.line_),
  PROTOBUF_FIELD_OFFSET(::CMsgScreenTextPretty, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::CMsgScreenTextPretty, _impl_.r_),
  PROTOBUF_FIELD_OFFSET(::CMsgScreenTextPretty, _impl_.g_),
  PROTOBUF_FIELD_OFFSET(::CMsgScreenTextPretty, _impl_.b_),
  PROTOBUF_FIELD_OFFSET(::CMsgScreenTextPretty, _impl_.a_),
  PROTOBUF_FIELD_OFFSET(::CMsgScreenTextPretty, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgScreenTextPretty, _impl_.font_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgScreenTextPretty, _impl_.font_size_),
  PROTOBUF_FIELD_OFFSET(::CMsgScreenTextPretty, _impl_.bold_font_),
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  8,
  9,
  1,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::CMsgServerRequestedTracer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerRequestedTracer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerRequestedTracer, _impl_.origin_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerRequestedTracer, _impl_.end_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerRequestedTracer, _impl_.weaponid_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerRequestedTracer, _impl_.entity_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerRequestedTracer, _impl_.dps_),
  0,
  1,
  3,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgEnableSatVolumesEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgEnableSatVolumesEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgEnableSatVolumesEvent, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgEnableSatVolumesEvent, _impl_.desat_amount_),
  PROTOBUF_FIELD_OFFSET(::CMsgEnableSatVolumesEvent, _impl_.sat_tint_),
  PROTOBUF_FIELD_OFFSET(::CMsgEnableSatVolumesEvent, _impl_.desat_tint_),
  PROTOBUF_FIELD_OFFSET(::CMsgEnableSatVolumesEvent, _impl_.outline_color_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceSatVolumeEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceSatVolumeEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceSatVolumeEvent, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceSatVolumeEvent, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceSatVolumeEvent, _impl_.radius_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceSatVolumeEvent, _impl_.falloff_distance_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceSatVolumeEvent, _impl_.theta_dot_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceSatVolumeEvent, _impl_.phi_dot_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceSatVolumeEvent, _impl_.entity_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceSatVolumeEvent, _impl_.attachment_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceSatVolumeEvent, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceSatVolumeEvent, _impl_.volume_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  9,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgRemoveSatVolumeEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRemoveSatVolumeEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgRemoveSatVolumeEvent, _impl_.volume_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDisableSatVolumesEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::CMsgFireBullets_TracerAssignment)},
  { 10, 32, -1, sizeof(::CMsgFireBullets)},
  { 48, 64, -1, sizeof(::CMsgBulletImpact)},
  { 74, 83, -1, sizeof(::CMsgPlayerAnimEvent)},
  { 86, 97, -1, sizeof(::CMsgParticleSystemManager_CreateParticle)},
  { 102, 109, -1, sizeof(::CMsgParticleSystemManager_DestroyParticle)},
  { 110, 118, -1, sizeof(::CMsgParticleSystemManager_DestroyParticleInvolving)},
  { 120, -1, -1, sizeof(::CMsgParticleSystemManager_ReleaseParticleIndex)},
  { 126, 134, -1, sizeof(::CMsgParticleSystemManager_UpdateParticle)},
  { 136, 144, -1, sizeof(::CMsgParticleSystemManager_UpdateParticleFwd)},
  { 146, 156, -1, sizeof(::CMsgParticleSystemManager_UpdateParticleOrient)},
  { 160, 168, -1, sizeof(::CMsgParticleSystemManager_UpdateParticleFallback)},
  { 170, 181, -1, sizeof(::CMsgParticleSystemManager_UpdateParticleEnt)},
  { 186, 194, -1, sizeof(::CMsgParticleSystemManager_UpdateParticleOffset)},
  { 196, 203, -1, sizeof(::CMsgParticleSystemManager_UpdateParticleFrozen)},
  { 204, 211, -1, sizeof(::CMsgParticleSystemManager_UpdateParticleShouldDraw)},
  { 212, 232, -1, sizeof(::CMsgParticleSystemManager)},
  { 246, 264, -1, sizeof(::CMsgScreenTextPretty)},
  { 276, 287, -1, sizeof(::CMsgServerRequestedTracer)},
  { 292, 303, -1, sizeof(::CMsgEnableSatVolumesEvent)},
  { 308, 324, -1, sizeof(::CMsgPlaceSatVolumeEvent)},
  { 334, 341, -1, sizeof(::CMsgRemoveSatVolumeEvent)},
  { 342, -1, -1, sizeof(::CMsgDisableSatVolumesEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CMsgFireBullets_TracerAssignment_default_instance_._instance,
  &::_CMsgFireBullets_default_instance_._instance,
  &::_CMsgBulletImpact_default_instance_._instance,
  &::_CMsgPlayerAnimEvent_default_instance_._instance,
  &::_CMsgParticleSystemManager_CreateParticle_default_instance_._instance,
  &::_CMsgParticleSystemManager_DestroyParticle_default_instance_._instance,
  &::_CMsgParticleSystemManager_DestroyParticleInvolving_default_instance_._instance,
  &::_CMsgParticleSystemManager_ReleaseParticleIndex_default_instance_._instance,
  &::_CMsgParticleSystemManager_UpdateParticle_default_instance_._instance,
  &::_CMsgParticleSystemManager_UpdateParticleFwd_default_instance_._instance,
  &::_CMsgParticleSystemManager_UpdateParticleOrient_default_instance_._instance,
  &::_CMsgParticleSystemManager_UpdateParticleFallback_default_instance_._instance,
  &::_CMsgParticleSystemManager_UpdateParticleEnt_default_instance_._instance,
  &::_CMsgParticleSystemManager_UpdateParticleOffset_default_instance_._instance,
  &::_CMsgParticleSystemManager_UpdateParticleFrozen_default_instance_._instance,
  &::_CMsgParticleSystemManager_UpdateParticleShouldDraw_default_instance_._instance,
  &::_CMsgParticleSystemManager_default_instance_._instance,
  &::_CMsgScreenTextPretty_default_instance_._instance,
  &::_CMsgServerRequestedTracer_default_instance_._instance,
  &::_CMsgEnableSatVolumesEvent_default_instance_._instance,
  &::_CMsgPlaceSatVolumeEvent_default_instance_._instance,
  &::_CMsgRemoveSatVolumeEvent_default_instance_._instance,
  &::_CMsgDisableSatVolumesEvent_default_instance_._instance,
};

const char descriptor_table_protodef_citadel_5fgameevents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030citadel_gameevents.proto\032 google/proto"
  "buf/descriptor.proto\032\026networkbasetypes.p"
  "roto\"\272\004\n\017CMsgFireBullets\022\033\n\006origin\030\001 \001(\013"
  "2\013.CMsgVector\022\033\n\006angles\030\002 \001(\0132\013.CMsgQAng"
  "le\022\014\n\004seed\030\004 \001(\r\022\032\n\016shooter_entity\030\005 \001(\005"
  ":\002-1\022\023\n\007ability\030\007 \001(\005:\002-1\022\033\n\023penetration"
  "_percent\030\010 \001(\002\022\016\n\006spread\030\t \001(\002\022\034\n\016fired_"
  "from_gun\030\n \001(\010:\004true\022\030\n\020bullets_override"
  "\030\013 \001(\r\022=\n\022tracer_replacement\030\014 \001(\0132!.CMs"
  "gFireBullets.TracerAssignment\022<\n\021tracer_"
  "additional\030\r \003(\0132!.CMsgFireBullets.Trace"
  "rAssignment\022$\n\017angles_original\030\016 \001(\0132\013.C"
  "MsgQAngle\022\032\n\022weapon_subclass_id\030\017 \001(\r\022\023\n"
  "\013shot_number\030\020 \001(\r\022\031\n\rignore_entity\030\021 \001("
  "\005:\002-1\022\021\n\tmax_range\030\022 \001(\002\032G\n\020TracerAssign"
  "ment\022\032\n\022tracer_resource_id\030\001 \001(\004\022\027\n\017bull"
  "et_indicies\030\002 \001(\r\"\263\002\n\020CMsgBulletImpact\022 "
  "\n\013trace_start\030\001 \001(\0132\013.CMsgVector\022\"\n\rimpa"
  "ct_origin\030\002 \001(\0132\013.CMsgVector\022#\n\016surface_"
  "normal\030\003 \001(\0132\013.CMsgVector\022\016\n\006damage\030\004 \001("
  "\r\022\024\n\014surface_type\030\005 \001(\r\022\034\n\020ability_entin"
  "dex\030\007 \001(\005:\002-1\022\035\n\021impacted_entindex\030\010 \001(\005"
  ":\002-1\022\027\n\017impacted_hitbox\030\t \001(\r\022\032\n\022weapon_"
  "subclass_id\030\n \001(\r\022\034\n\020shooter_entindex\030\013 "
  "\001(\005:\002-1\"L\n\023CMsgPlayerAnimEvent\022\030\n\006player"
  "\030\001 \001(\007:\01016777215\022\r\n\005event\030\002 \001(\r\022\014\n\004data\030"
  "\003 \001(\005\"\246\020\n\031CMsgParticleSystemManager\022T\n\004t"
  "ype\030\001 \002(\0162 .PARTICLE_SYSTEM_MANAGER_MESS"
  "AGE:$PARTICLE_SYSTEM_MANAGER_EVENT_CREAT"
  "E\022\r\n\005index\030\002 \002(\r\022B\n\017create_particle\030\003 \001("
  "\0132).CMsgParticleSystemManager.CreatePart"
  "icle\022D\n\020destroy_particle\030\004 \001(\0132*.CMsgPar"
  "ticleSystemManager.DestroyParticle\022W\n\032de"
  "stroy_particle_involving\030\005 \001(\01323.CMsgPar"
  "ticleSystemManager.DestroyParticleInvolv"
  "ing\022O\n\026release_particle_index\030\006 \001(\0132/.CM"
  "sgParticleSystemManager.ReleaseParticleI"
  "ndex\022B\n\017update_particle\030\007 \001(\0132).CMsgPart"
  "icleSystemManager.UpdateParticle\022I\n\023upda"
  "te_particle_fwd\030\010 \001(\0132,.CMsgParticleSyst"
  "emManager.UpdateParticleFwd\022O\n\026update_pa"
  "rticle_orient\030\t \001(\0132/.CMsgParticleSystem"
  "Manager.UpdateParticleOrient\022S\n\030update_p"
  "article_fallback\030\n \001(\01321.CMsgParticleSys"
  "temManager.UpdateParticleFallback\022O\n\026upd"
  "ate_particle_offset\030\013 \001(\0132/.CMsgParticle"
  "SystemManager.UpdateParticleOffset\022I\n\023up"
  "date_particle_ent\030\014 \001(\0132,.CMsgParticleSy"
  "stemManager.UpdateParticleEnt\022O\n\026update_"
  "particle_frozen\030\r \001(\0132/.CMsgParticleSyst"
  "emManager.UpdateParticleFrozen\022X\n\033update"
  "_particle_should_draw\030\016 \001(\01323.CMsgPartic"
  "leSystemManager.UpdateParticleShouldDraw"
  "\032\237\001\n\016CreateParticle\022\033\n\023particle_name_ind"
  "ex\030\001 \001(\006\022\023\n\013attach_type\030\002 \001(\005\022\037\n\rentity_"
  "handle\030\003 \001(\r:\01016777215\022\035\n\010position\030\004 \001(\013"
  "2\013.CMsgVector\022\033\n\006angles\030\005 \001(\0132\013.CMsgQAng"
  "le\032.\n\017DestroyParticle\022\033\n\023destroy_immedia"
  "tely\030\001 \001(\010\032X\n\030DestroyParticleInvolving\022\033"
  "\n\023destroy_immediately\030\001 \001(\010\022\037\n\rentity_ha"
  "ndle\030\003 \001(\r:\01016777215\032\026\n\024ReleaseParticleI"
  "ndex\032F\n\016UpdateParticle\022\025\n\rcontrol_point\030"
  "\001 \001(\005\022\035\n\010position\030\002 \001(\0132\013.CMsgVector\032H\n\021"
  "UpdateParticleFwd\022\025\n\rcontrol_point\030\001 \001(\005"
  "\022\034\n\007forward\030\002 \001(\0132\013.CMsgVector\032\177\n\024Update"
  "ParticleOrient\022\025\n\rcontrol_point\030\001 \001(\005\022\034\n"
  "\007forward\030\002 \001(\0132\013.CMsgVector\022\031\n\004left\030\003 \001("
  "\0132\013.CMsgVector\022\027\n\002up\030\004 \001(\0132\013.CMsgVector\032"
  "N\n\026UpdateParticleFallback\022\025\n\rcontrol_poi"
  "nt\030\001 \001(\005\022\035\n\010position\030\002 \001(\0132\013.CMsgVector\032"
  "\234\001\n\021UpdateParticleEnt\022\025\n\rcontrol_point\030\001"
  " \001(\005\022\037\n\rentity_handle\030\002 \001(\r:\01016777215\022\023\n"
  "\013attach_type\030\003 \001(\005\022\022\n\nattachment\030\004 \001(\005\022&"
  "\n\021fallback_position\030\005 \001(\0132\013.CMsgVector\032Q"
  "\n\024UpdateParticleOffset\022\025\n\rcontrol_point\030"
  "\001 \001(\005\022\"\n\rorigin_offset\030\002 \001(\0132\013.CMsgVecto"
  "r\032*\n\024UpdateParticleFrozen\022\022\n\nset_frozen\030"
  "\001 \001(\010\032/\n\030UpdateParticleShouldDraw\022\023\n\013sho"
  "uld_draw\030\001 \001(\010\"\307\001\n\024CMsgScreenTextPretty\022"
  "\r\n\005x_pos\030\001 \001(\002\022\r\n\005y_pos\030\002 \001(\002\022\014\n\004line\030\003 "
  "\001(\005\022\014\n\004text\030\004 \001(\t\022\t\n\001r\030\005 \001(\005\022\t\n\001g\030\006 \001(\005\022"
  "\t\n\001b\030\007 \001(\005\022\t\n\001a\030\010 \001(\005\022\020\n\010duration\030\t \001(\002\022"
  "\021\n\tfont_name\030\n \001(\t\022\021\n\tfont_size\030\013 \001(\005\022\021\n"
  "\tbold_font\030\014 \001(\010\"\226\001\n\031CMsgServerRequested"
  "Tracer\022\033\n\006origin\030\001 \001(\0132\013.CMsgVector\022\030\n\003e"
  "nd\030\002 \001(\0132\013.CMsgVector\022\024\n\010weaponid\030\003 \001(\005:"
  "\002-1\022\037\n\rentity_handle\030\004 \001(\r:\01016777215\022\013\n\003"
  "dps\030\005 \001(\002\"|\n\031CMsgEnableSatVolumesEvent\022\014"
  "\n\004mode\030\001 \001(\r\022\024\n\014desat_amount\030\002 \001(\002\022\020\n\010sa"
  "t_tint\030\003 \001(\007\022\022\n\ndesat_tint\030\004 \001(\007\022\025\n\routl"
  "ine_color\030\005 \001(\007\"\203\002\n\027CMsgPlaceSatVolumeEv"
  "ent\022\035\n\010position\030\001 \001(\0132\013.CMsgVector\022\036\n\tdi"
  "rection\030\002 \001(\0132\013.CMsgVector\022\016\n\006radius\030\003 \001"
  "(\002\022\030\n\020falloff_distance\030\004 \001(\002\022\021\n\ttheta_do"
  "t\030\005 \001(\002\022\017\n\007phi_dot\030\006 \001(\002\022\037\n\rentity_handl"
  "e\030\007 \001(\r:\01016777215\022\031\n\021attachment_handle\030\010"
  " \001(\r\022\014\n\004type\030\t \001(\r\022\021\n\tvolume_id\030\n \001(\005\"-\n"
  "\030CMsgRemoveSatVolumeEvent\022\021\n\tvolume_id\030\001"
  " \001(\005\"\034\n\032CMsgDisableSatVolumesEvent*\252\002\n\022E"
  "CitadelGameEvents\022\023\n\016GE_FireBullets\020\302\003\022\027"
  "\n\022GE_PlayerAnimEvent\020\303\003\022\035\n\030GE_ParticleSy"
  "stemManager\020\312\003\022\030\n\023GE_ScreenTextPretty\020\313\003"
  "\022\035\n\030GE_ServerRequestedTracer\020\314\003\022\024\n\017GE_Bu"
  "lletImpact\020\315\003\022\035\n\030GE_EnableSatVolumesEven"
  "t\020\316\003\022\033\n\026GE_PlaceSatVolumeEvent\020\317\003\022\036\n\031GE_"
  "DisableSatVolumesEvent\020\320\003\022\034\n\027GE_RemoveSa"
  "tVolumeEvent\020\321\003*\341\004\n\037PARTICLE_SYSTEM_MANA"
  "GER_MESSAGE\022(\n$PARTICLE_SYSTEM_MANAGER_E"
  "VENT_CREATE\020\000\022)\n%PARTICLE_SYSTEM_MANAGER"
  "_EVENT_DESTROY\020\001\0223\n/PARTICLE_SYSTEM_MANA"
  "GER_EVENT_DESTROY_INVOLVING\020\002\022)\n%PARTICL"
  "E_SYSTEM_MANAGER_EVENT_RELEASE\020\003\022(\n$PART"
  "ICLE_SYSTEM_MANAGER_EVENT_UPDATE\020\004\0220\n,PA"
  "RTICLE_SYSTEM_MANAGER_EVENT_UPDATE_FORWA"
  "RD\020\005\0224\n0PARTICLE_SYSTEM_MANAGER_EVENT_UP"
  "DATE_ORIENTATION\020\006\0221\n-PARTICLE_SYSTEM_MA"
  "NAGER_EVENT_UPDATE_FALLBACK\020\007\022,\n(PARTICL"
  "E_SYSTEM_MANAGER_EVENT_UPDATE_ENT\020\010\022/\n+P"
  "ARTICLE_SYSTEM_MANAGER_EVENT_UPDATE_OFFS"
  "ET\020\t\022/\n+PARTICLE_SYSTEM_MANAGER_EVENT_UP"
  "DATE_FROZEN\020\n\0224\n0PARTICLE_SYSTEM_MANAGER"
  "_EVENT_UPDATE_SHOULD_DRAW\020\013"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_citadel_5fgameevents_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_networkbasetypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_citadel_5fgameevents_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_citadel_5fgameevents_2eproto = {
    false, false, 4867, descriptor_table_protodef_citadel_5fgameevents_2eproto,
    "citadel_gameevents.proto",
    &descriptor_table_citadel_5fgameevents_2eproto_once, descriptor_table_citadel_5fgameevents_2eproto_deps, 2, 23,
    schemas, file_default_instances, TableStruct_citadel_5fgameevents_2eproto::offsets,
    file_level_metadata_citadel_5fgameevents_2eproto, file_level_enum_descriptors_citadel_5fgameevents_2eproto,
    file_level_service_descriptors_citadel_5fgameevents_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_citadel_5fgameevents_2eproto_getter() {
  return &descriptor_table_citadel_5fgameevents_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_citadel_5fgameevents_2eproto(&descriptor_table_citadel_5fgameevents_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECitadelGameEvents_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgameevents_2eproto);
  return file_level_enum_descriptors_citadel_5fgameevents_2eproto[0];
}
bool ECitadelGameEvents_IsValid(int value) {
  switch (value) {
    case 450:
    case 451:
    case 458:
    case 459:
    case 460:
    case 461:
    case 462:
    case 463:
    case 464:
    case 465:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PARTICLE_SYSTEM_MANAGER_MESSAGE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgameevents_2eproto);
  return file_level_enum_descriptors_citadel_5fgameevents_2eproto[1];
}
bool PARTICLE_SYSTEM_MANAGER_MESSAGE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgFireBullets_TracerAssignment::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgFireBullets_TracerAssignment>()._impl_._has_bits_);
  static void set_has_tracer_resource_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bullet_indicies(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgFireBullets_TracerAssignment::CMsgFireBullets_TracerAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgFireBullets.TracerAssignment)
}
CMsgFireBullets_TracerAssignment::CMsgFireBullets_TracerAssignment(const CMsgFireBullets_TracerAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgFireBullets_TracerAssignment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tracer_resource_id_){}
    , decltype(_impl_.bullet_indicies_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tracer_resource_id_, &from._impl_.tracer_resource_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bullet_indicies_) -
    reinterpret_cast<char*>(&_impl_.tracer_resource_id_)) + sizeof(_impl_.bullet_indicies_));
  // @@protoc_insertion_point(copy_constructor:CMsgFireBullets.TracerAssignment)
}

inline void CMsgFireBullets_TracerAssignment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tracer_resource_id_){uint64_t{0u}}
    , decltype(_impl_.bullet_indicies_){0u}
  };
}

CMsgFireBullets_TracerAssignment::~CMsgFireBullets_TracerAssignment() {
  // @@protoc_insertion_point(destructor:CMsgFireBullets.TracerAssignment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgFireBullets_TracerAssignment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgFireBullets_TracerAssignment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgFireBullets_TracerAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFireBullets.TracerAssignment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.tracer_resource_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bullet_indicies_) -
        reinterpret_cast<char*>(&_impl_.tracer_resource_id_)) + sizeof(_impl_.bullet_indicies_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFireBullets_TracerAssignment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 tracer_resource_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tracer_resource_id(&has_bits);
          _impl_.tracer_resource_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bullet_indicies = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_bullet_indicies(&has_bits);
          _impl_.bullet_indicies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgFireBullets_TracerAssignment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFireBullets.TracerAssignment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 tracer_resource_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tracer_resource_id(), target);
  }

  // optional uint32 bullet_indicies = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bullet_indicies(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFireBullets.TracerAssignment)
  return target;
}

size_t CMsgFireBullets_TracerAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFireBullets.TracerAssignment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 tracer_resource_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tracer_resource_id());
    }

    // optional uint32 bullet_indicies = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bullet_indicies());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgFireBullets_TracerAssignment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgFireBullets_TracerAssignment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgFireBullets_TracerAssignment::GetClassData() const { return &_class_data_; }


void CMsgFireBullets_TracerAssignment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgFireBullets_TracerAssignment*>(&to_msg);
  auto& from = static_cast<const CMsgFireBullets_TracerAssignment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgFireBullets.TracerAssignment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tracer_resource_id_ = from._impl_.tracer_resource_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bullet_indicies_ = from._impl_.bullet_indicies_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgFireBullets_TracerAssignment::CopyFrom(const CMsgFireBullets_TracerAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFireBullets.TracerAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFireBullets_TracerAssignment::IsInitialized() const {
  return true;
}

void CMsgFireBullets_TracerAssignment::InternalSwap(CMsgFireBullets_TracerAssignment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgFireBullets_TracerAssignment, _impl_.bullet_indicies_)
      + sizeof(CMsgFireBullets_TracerAssignment::_impl_.bullet_indicies_)
      - PROTOBUF_FIELD_OFFSET(CMsgFireBullets_TracerAssignment, _impl_.tracer_resource_id_)>(
          reinterpret_cast<char*>(&_impl_.tracer_resource_id_),
          reinterpret_cast<char*>(&other->_impl_.tracer_resource_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFireBullets_TracerAssignment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgameevents_2eproto_getter, &descriptor_table_citadel_5fgameevents_2eproto_once,
      file_level_metadata_citadel_5fgameevents_2eproto[0]);
}

// ===================================================================

class CMsgFireBullets::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgFireBullets>()._impl_._has_bits_);
  static const ::CMsgVector& origin(const CMsgFireBullets* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgQAngle& angles(const CMsgFireBullets* msg);
  static void set_has_angles(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_shooter_entity(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_ability(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_penetration_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_spread(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_fired_from_gun(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_bullets_override(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CMsgFireBullets_TracerAssignment& tracer_replacement(const CMsgFireBullets* msg);
  static void set_has_tracer_replacement(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgQAngle& angles_original(const CMsgFireBullets* msg);
  static void set_has_angles_original(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_weapon_subclass_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_shot_number(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ignore_entity(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_max_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::CMsgVector&
CMsgFireBullets::_Internal::origin(const CMsgFireBullets* msg) {
  return *msg->_impl_.origin_;
}
const ::CMsgQAngle&
CMsgFireBullets::_Internal::angles(const CMsgFireBullets* msg) {
  return *msg->_impl_.angles_;
}
const ::CMsgFireBullets_TracerAssignment&
CMsgFireBullets::_Internal::tracer_replacement(const CMsgFireBullets* msg) {
  return *msg->_impl_.tracer_replacement_;
}
const ::CMsgQAngle&
CMsgFireBullets::_Internal::angles_original(const CMsgFireBullets* msg) {
  return *msg->_impl_.angles_original_;
}
void CMsgFireBullets::clear_origin() {
  if (_impl_.origin_ != nullptr) _impl_.origin_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CMsgFireBullets::clear_angles() {
  if (_impl_.angles_ != nullptr) _impl_.angles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CMsgFireBullets::clear_angles_original() {
  if (_impl_.angles_original_ != nullptr) _impl_.angles_original_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CMsgFireBullets::CMsgFireBullets(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgFireBullets)
}
CMsgFireBullets::CMsgFireBullets(const CMsgFireBullets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgFireBullets* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tracer_additional_){from._impl_.tracer_additional_}
    , decltype(_impl_.origin_){nullptr}
    , decltype(_impl_.angles_){nullptr}
    , decltype(_impl_.tracer_replacement_){nullptr}
    , decltype(_impl_.angles_original_){nullptr}
    , decltype(_impl_.seed_){}
    , decltype(_impl_.penetration_percent_){}
    , decltype(_impl_.spread_){}
    , decltype(_impl_.bullets_override_){}
    , decltype(_impl_.weapon_subclass_id_){}
    , decltype(_impl_.shot_number_){}
    , decltype(_impl_.max_range_){}
    , decltype(_impl_.shooter_entity_){}
    , decltype(_impl_.ability_){}
    , decltype(_impl_.fired_from_gun_){}
    , decltype(_impl_.ignore_entity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    _this->_impl_.origin_ = new ::CMsgVector(*from._impl_.origin_);
  }
  if (from._internal_has_angles()) {
    _this->_impl_.angles_ = new ::CMsgQAngle(*from._impl_.angles_);
  }
  if (from._internal_has_tracer_replacement()) {
    _this->_impl_.tracer_replacement_ = new ::CMsgFireBullets_TracerAssignment(*from._impl_.tracer_replacement_);
  }
  if (from._internal_has_angles_original()) {
    _this->_impl_.angles_original_ = new ::CMsgQAngle(*from._impl_.angles_original_);
  }
  ::memcpy(&_impl_.seed_, &from._impl_.seed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ignore_entity_) -
    reinterpret_cast<char*>(&_impl_.seed_)) + sizeof(_impl_.ignore_entity_));
  // @@protoc_insertion_point(copy_constructor:CMsgFireBullets)
}

inline void CMsgFireBullets::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tracer_additional_){arena}
    , decltype(_impl_.origin_){nullptr}
    , decltype(_impl_.angles_){nullptr}
    , decltype(_impl_.tracer_replacement_){nullptr}
    , decltype(_impl_.angles_original_){nullptr}
    , decltype(_impl_.seed_){0u}
    , decltype(_impl_.penetration_percent_){0}
    , decltype(_impl_.spread_){0}
    , decltype(_impl_.bullets_override_){0u}
    , decltype(_impl_.weapon_subclass_id_){0u}
    , decltype(_impl_.shot_number_){0u}
    , decltype(_impl_.max_range_){0}
    , decltype(_impl_.shooter_entity_){-1}
    , decltype(_impl_.ability_){-1}
    , decltype(_impl_.fired_from_gun_){true}
    , decltype(_impl_.ignore_entity_){-1}
  };
}

CMsgFireBullets::~CMsgFireBullets() {
  // @@protoc_insertion_point(destructor:CMsgFireBullets)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgFireBullets::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tracer_additional_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.origin_;
  if (this != internal_default_instance()) delete _impl_.angles_;
  if (this != internal_default_instance()) delete _impl_.tracer_replacement_;
  if (this != internal_default_instance()) delete _impl_.angles_original_;
}

void CMsgFireBullets::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgFireBullets::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFireBullets)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tracer_additional_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.origin_ != nullptr);
      _impl_.origin_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.angles_ != nullptr);
      _impl_.angles_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tracer_replacement_ != nullptr);
      _impl_.tracer_replacement_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.angles_original_ != nullptr);
      _impl_.angles_original_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.seed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bullets_override_) -
        reinterpret_cast<char*>(&_impl_.seed_)) + sizeof(_impl_.bullets_override_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.weapon_subclass_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_range_) -
        reinterpret_cast<char*>(&_impl_.weapon_subclass_id_)) + sizeof(_impl_.max_range_));
    _impl_.shooter_entity_ = -1;
    _impl_.ability_ = -1;
    _impl_.fired_from_gun_ = true;
    _impl_.ignore_entity_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFireBullets::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgVector origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgQAngle angles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_angles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 seed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_seed(&has_bits);
          _impl_.seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 shooter_entity = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_shooter_entity(&has_bits);
          _impl_.shooter_entity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ability = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_ability(&has_bits);
          _impl_.ability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float penetration_percent = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_penetration_percent(&has_bits);
          _impl_.penetration_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float spread = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_spread(&has_bits);
          _impl_.spread_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool fired_from_gun = 10 [default = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_fired_from_gun(&has_bits);
          _impl_.fired_from_gun_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bullets_override = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_bullets_override(&has_bits);
          _impl_.bullets_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgFireBullets.TracerAssignment tracer_replacement = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracer_replacement(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgFireBullets.TracerAssignment tracer_additional = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tracer_additional(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgQAngle angles_original = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_angles_original(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 weapon_subclass_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_weapon_subclass_id(&has_bits);
          _impl_.weapon_subclass_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 shot_number = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_shot_number(&has_bits);
          _impl_.shot_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ignore_entity = 17 [default = -1];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_ignore_entity(&has_bits);
          _impl_.ignore_entity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float max_range = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _Internal::set_has_max_range(&has_bits);
          _impl_.max_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgFireBullets::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFireBullets)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::origin(this),
        _Internal::origin(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgQAngle angles = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::angles(this),
        _Internal::angles(this).GetCachedSize(), target, stream);
  }

  // optional uint32 seed = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_seed(), target);
  }

  // optional int32 shooter_entity = 5 [default = -1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_shooter_entity(), target);
  }

  // optional int32 ability = 7 [default = -1];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_ability(), target);
  }

  // optional float penetration_percent = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_penetration_percent(), target);
  }

  // optional float spread = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_spread(), target);
  }

  // optional bool fired_from_gun = 10 [default = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_fired_from_gun(), target);
  }

  // optional uint32 bullets_override = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_bullets_override(), target);
  }

  // optional .CMsgFireBullets.TracerAssignment tracer_replacement = 12;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::tracer_replacement(this),
        _Internal::tracer_replacement(this).GetCachedSize(), target, stream);
  }

  // repeated .CMsgFireBullets.TracerAssignment tracer_additional = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tracer_additional_size()); i < n; i++) {
    const auto& repfield = this->_internal_tracer_additional(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .CMsgQAngle angles_original = 14;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::angles_original(this),
        _Internal::angles_original(this).GetCachedSize(), target, stream);
  }

  // optional uint32 weapon_subclass_id = 15;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_weapon_subclass_id(), target);
  }

  // optional uint32 shot_number = 16;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_shot_number(), target);
  }

  // optional int32 ignore_entity = 17 [default = -1];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_ignore_entity(), target);
  }

  // optional float max_range = 18;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_max_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFireBullets)
  return target;
}

size_t CMsgFireBullets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFireBullets)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgFireBullets.TracerAssignment tracer_additional = 13;
  total_size += 1UL * this->_internal_tracer_additional_size();
  for (const auto& msg : this->_impl_.tracer_additional_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgVector origin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.origin_);
    }

    // optional .CMsgQAngle angles = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.angles_);
    }

    // optional .CMsgFireBullets.TracerAssignment tracer_replacement = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tracer_replacement_);
    }

    // optional .CMsgQAngle angles_original = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.angles_original_);
    }

    // optional uint32 seed = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seed());
    }

    // optional float penetration_percent = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float spread = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 bullets_override = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bullets_override());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 weapon_subclass_id = 15;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_weapon_subclass_id());
    }

    // optional uint32 shot_number = 16;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_shot_number());
    }

    // optional float max_range = 18;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional int32 shooter_entity = 5 [default = -1];
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shooter_entity());
    }

    // optional int32 ability = 7 [default = -1];
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability());
    }

    // optional bool fired_from_gun = 10 [default = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional int32 ignore_entity = 17 [default = -1];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_ignore_entity());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgFireBullets::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgFireBullets::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgFireBullets::GetClassData() const { return &_class_data_; }


void CMsgFireBullets::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgFireBullets*>(&to_msg);
  auto& from = static_cast<const CMsgFireBullets&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgFireBullets)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tracer_additional_.MergeFrom(from._impl_.tracer_additional_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_origin()->::CMsgVector::MergeFrom(
          from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_angles()->::CMsgQAngle::MergeFrom(
          from._internal_angles());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tracer_replacement()->::CMsgFireBullets_TracerAssignment::MergeFrom(
          from._internal_tracer_replacement());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_angles_original()->::CMsgQAngle::MergeFrom(
          from._internal_angles_original());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.seed_ = from._impl_.seed_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.penetration_percent_ = from._impl_.penetration_percent_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.spread_ = from._impl_.spread_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.bullets_override_ = from._impl_.bullets_override_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.weapon_subclass_id_ = from._impl_.weapon_subclass_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.shot_number_ = from._impl_.shot_number_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.max_range_ = from._impl_.max_range_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.shooter_entity_ = from._impl_.shooter_entity_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.ability_ = from._impl_.ability_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.fired_from_gun_ = from._impl_.fired_from_gun_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.ignore_entity_ = from._impl_.ignore_entity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgFireBullets::CopyFrom(const CMsgFireBullets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFireBullets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFireBullets::IsInitialized() const {
  return true;
}

void CMsgFireBullets::InternalSwap(CMsgFireBullets* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tracer_additional_.InternalSwap(&other->_impl_.tracer_additional_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgFireBullets, _impl_.max_range_)
      + sizeof(CMsgFireBullets::_impl_.max_range_)
      - PROTOBUF_FIELD_OFFSET(CMsgFireBullets, _impl_.origin_)>(
          reinterpret_cast<char*>(&_impl_.origin_),
          reinterpret_cast<char*>(&other->_impl_.origin_));
  swap(_impl_.shooter_entity_, other->_impl_.shooter_entity_);
  swap(_impl_.ability_, other->_impl_.ability_);
  swap(_impl_.fired_from_gun_, other->_impl_.fired_from_gun_);
  swap(_impl_.ignore_entity_, other->_impl_.ignore_entity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFireBullets::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgameevents_2eproto_getter, &descriptor_table_citadel_5fgameevents_2eproto_once,
      file_level_metadata_citadel_5fgameevents_2eproto[1]);
}

// ===================================================================

class CMsgBulletImpact::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBulletImpact>()._impl_._has_bits_);
  static const ::CMsgVector& trace_start(const CMsgBulletImpact* msg);
  static void set_has_trace_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgVector& impact_origin(const CMsgBulletImpact* msg);
  static void set_has_impact_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgVector& surface_normal(const CMsgBulletImpact* msg);
  static void set_has_surface_normal(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_surface_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ability_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_impacted_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_impacted_hitbox(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_weapon_subclass_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_shooter_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::CMsgVector&
CMsgBulletImpact::_Internal::trace_start(const CMsgBulletImpact* msg) {
  return *msg->_impl_.trace_start_;
}
const ::CMsgVector&
CMsgBulletImpact::_Internal::impact_origin(const CMsgBulletImpact* msg) {
  return *msg->_impl_.impact_origin_;
}
const ::CMsgVector&
CMsgBulletImpact::_Internal::surface_normal(const CMsgBulletImpact* msg) {
  return *msg->_impl_.surface_normal_;
}
void CMsgBulletImpact::clear_trace_start() {
  if (_impl_.trace_start_ != nullptr) _impl_.trace_start_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CMsgBulletImpact::clear_impact_origin() {
  if (_impl_.impact_origin_ != nullptr) _impl_.impact_origin_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CMsgBulletImpact::clear_surface_normal() {
  if (_impl_.surface_normal_ != nullptr) _impl_.surface_normal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CMsgBulletImpact::CMsgBulletImpact(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBulletImpact)
}
CMsgBulletImpact::CMsgBulletImpact(const CMsgBulletImpact& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBulletImpact* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trace_start_){nullptr}
    , decltype(_impl_.impact_origin_){nullptr}
    , decltype(_impl_.surface_normal_){nullptr}
    , decltype(_impl_.damage_){}
    , decltype(_impl_.surface_type_){}
    , decltype(_impl_.impacted_hitbox_){}
    , decltype(_impl_.weapon_subclass_id_){}
    , decltype(_impl_.shooter_entindex_){}
    , decltype(_impl_.ability_entindex_){}
    , decltype(_impl_.impacted_entindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trace_start()) {
    _this->_impl_.trace_start_ = new ::CMsgVector(*from._impl_.trace_start_);
  }
  if (from._internal_has_impact_origin()) {
    _this->_impl_.impact_origin_ = new ::CMsgVector(*from._impl_.impact_origin_);
  }
  if (from._internal_has_surface_normal()) {
    _this->_impl_.surface_normal_ = new ::CMsgVector(*from._impl_.surface_normal_);
  }
  ::memcpy(&_impl_.damage_, &from._impl_.damage_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.impacted_entindex_) -
    reinterpret_cast<char*>(&_impl_.damage_)) + sizeof(_impl_.impacted_entindex_));
  // @@protoc_insertion_point(copy_constructor:CMsgBulletImpact)
}

inline void CMsgBulletImpact::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trace_start_){nullptr}
    , decltype(_impl_.impact_origin_){nullptr}
    , decltype(_impl_.surface_normal_){nullptr}
    , decltype(_impl_.damage_){0u}
    , decltype(_impl_.surface_type_){0u}
    , decltype(_impl_.impacted_hitbox_){0u}
    , decltype(_impl_.weapon_subclass_id_){0u}
    , decltype(_impl_.shooter_entindex_){-1}
    , decltype(_impl_.ability_entindex_){-1}
    , decltype(_impl_.impacted_entindex_){-1}
  };
}

CMsgBulletImpact::~CMsgBulletImpact() {
  // @@protoc_insertion_point(destructor:CMsgBulletImpact)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBulletImpact::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.trace_start_;
  if (this != internal_default_instance()) delete _impl_.impact_origin_;
  if (this != internal_default_instance()) delete _impl_.surface_normal_;
}

void CMsgBulletImpact::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBulletImpact::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBulletImpact)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.trace_start_ != nullptr);
      _impl_.trace_start_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.impact_origin_ != nullptr);
      _impl_.impact_origin_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.surface_normal_ != nullptr);
      _impl_.surface_normal_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.damage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.weapon_subclass_id_) -
        reinterpret_cast<char*>(&_impl_.damage_)) + sizeof(_impl_.weapon_subclass_id_));
    _impl_.shooter_entindex_ = -1;
  }
  if (cached_has_bits & 0x00000300u) {
    _impl_.ability_entindex_ = -1;
    _impl_.impacted_entindex_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBulletImpact::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgVector trace_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector impact_origin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_impact_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector surface_normal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_surface_normal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 damage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_damage(&has_bits);
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 surface_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_surface_type(&has_bits);
          _impl_.surface_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ability_entindex = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_ability_entindex(&has_bits);
          _impl_.ability_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 impacted_entindex = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_impacted_entindex(&has_bits);
          _impl_.impacted_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 impacted_hitbox = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_impacted_hitbox(&has_bits);
          _impl_.impacted_hitbox_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 weapon_subclass_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_weapon_subclass_id(&has_bits);
          _impl_.weapon_subclass_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 shooter_entindex = 11 [default = -1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_shooter_entindex(&has_bits);
          _impl_.shooter_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBulletImpact::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBulletImpact)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgVector trace_start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::trace_start(this),
        _Internal::trace_start(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgVector impact_origin = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::impact_origin(this),
        _Internal::impact_origin(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgVector surface_normal = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::surface_normal(this),
        _Internal::surface_normal(this).GetCachedSize(), target, stream);
  }

  // optional uint32 damage = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_damage(), target);
  }

  // optional uint32 surface_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_surface_type(), target);
  }

  // optional int32 ability_entindex = 7 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_ability_entindex(), target);
  }

  // optional int32 impacted_entindex = 8 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_impacted_entindex(), target);
  }

  // optional uint32 impacted_hitbox = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_impacted_hitbox(), target);
  }

  // optional uint32 weapon_subclass_id = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_weapon_subclass_id(), target);
  }

  // optional int32 shooter_entindex = 11 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_shooter_entindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBulletImpact)
  return target;
}

size_t CMsgBulletImpact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBulletImpact)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgVector trace_start = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.trace_start_);
    }

    // optional .CMsgVector impact_origin = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.impact_origin_);
    }

    // optional .CMsgVector surface_normal = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.surface_normal_);
    }

    // optional uint32 damage = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_damage());
    }

    // optional uint32 surface_type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_surface_type());
    }

    // optional uint32 impacted_hitbox = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_impacted_hitbox());
    }

    // optional uint32 weapon_subclass_id = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_weapon_subclass_id());
    }

    // optional int32 shooter_entindex = 11 [default = -1];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shooter_entindex());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 ability_entindex = 7 [default = -1];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_entindex());
    }

    // optional int32 impacted_entindex = 8 [default = -1];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_impacted_entindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBulletImpact::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBulletImpact::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBulletImpact::GetClassData() const { return &_class_data_; }


void CMsgBulletImpact::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBulletImpact*>(&to_msg);
  auto& from = static_cast<const CMsgBulletImpact&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBulletImpact)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_trace_start()->::CMsgVector::MergeFrom(
          from._internal_trace_start());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_impact_origin()->::CMsgVector::MergeFrom(
          from._internal_impact_origin());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_surface_normal()->::CMsgVector::MergeFrom(
          from._internal_surface_normal());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.damage_ = from._impl_.damage_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.surface_type_ = from._impl_.surface_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.impacted_hitbox_ = from._impl_.impacted_hitbox_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.weapon_subclass_id_ = from._impl_.weapon_subclass_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.shooter_entindex_ = from._impl_.shooter_entindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.ability_entindex_ = from._impl_.ability_entindex_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.impacted_entindex_ = from._impl_.impacted_entindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBulletImpact::CopyFrom(const CMsgBulletImpact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBulletImpact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBulletImpact::IsInitialized() const {
  return true;
}

void CMsgBulletImpact::InternalSwap(CMsgBulletImpact* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBulletImpact, _impl_.weapon_subclass_id_)
      + sizeof(CMsgBulletImpact::_impl_.weapon_subclass_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgBulletImpact, _impl_.trace_start_)>(
          reinterpret_cast<char*>(&_impl_.trace_start_),
          reinterpret_cast<char*>(&other->_impl_.trace_start_));
  swap(_impl_.shooter_entindex_, other->_impl_.shooter_entindex_);
  swap(_impl_.ability_entindex_, other->_impl_.ability_entindex_);
  swap(_impl_.impacted_entindex_, other->_impl_.impacted_entindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBulletImpact::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgameevents_2eproto_getter, &descriptor_table_citadel_5fgameevents_2eproto_once,
      file_level_metadata_citadel_5fgameevents_2eproto[2]);
}

// ===================================================================

class CMsgPlayerAnimEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPlayerAnimEvent>()._impl_._has_bits_);
  static void set_has_player(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgPlayerAnimEvent::CMsgPlayerAnimEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPlayerAnimEvent)
}
CMsgPlayerAnimEvent::CMsgPlayerAnimEvent(const CMsgPlayerAnimEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPlayerAnimEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.player_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.event_, &from._impl_.event_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_) -
    reinterpret_cast<char*>(&_impl_.event_)) + sizeof(_impl_.player_));
  // @@protoc_insertion_point(copy_constructor:CMsgPlayerAnimEvent)
}

inline void CMsgPlayerAnimEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_){0u}
    , decltype(_impl_.data_){0}
    , decltype(_impl_.player_){16777215u}
  };
}

CMsgPlayerAnimEvent::~CMsgPlayerAnimEvent() {
  // @@protoc_insertion_point(destructor:CMsgPlayerAnimEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPlayerAnimEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPlayerAnimEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPlayerAnimEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPlayerAnimEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.event_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.data_) -
        reinterpret_cast<char*>(&_impl_.event_)) + sizeof(_impl_.data_));
    _impl_.player_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPlayerAnimEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 player = 1 [default = 16777215];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_player(&has_bits);
          _impl_.player_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_event(&has_bits);
          _impl_.event_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_data(&has_bits);
          _impl_.data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPlayerAnimEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPlayerAnimEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 player = 1 [default = 16777215];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(1, this->_internal_player(), target);
  }

  // optional uint32 event = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_event(), target);
  }

  // optional int32 data = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPlayerAnimEvent)
  return target;
}

size_t CMsgPlayerAnimEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPlayerAnimEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 event = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event());
    }

    // optional int32 data = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data());
    }

    // optional fixed32 player = 1 [default = 16777215];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPlayerAnimEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPlayerAnimEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPlayerAnimEvent::GetClassData() const { return &_class_data_; }


void CMsgPlayerAnimEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPlayerAnimEvent*>(&to_msg);
  auto& from = static_cast<const CMsgPlayerAnimEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPlayerAnimEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.event_ = from._impl_.event_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.data_ = from._impl_.data_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_ = from._impl_.player_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPlayerAnimEvent::CopyFrom(const CMsgPlayerAnimEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPlayerAnimEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerAnimEvent::IsInitialized() const {
  return true;
}

void CMsgPlayerAnimEvent::InternalSwap(CMsgPlayerAnimEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPlayerAnimEvent, _impl_.data_)
      + sizeof(CMsgPlayerAnimEvent::_impl_.data_)
      - PROTOBUF_FIELD_OFFSET(CMsgPlayerAnimEvent, _impl_.event_)>(
          reinterpret_cast<char*>(&_impl_.event_),
          reinterpret_cast<char*>(&other->_impl_.event_));
  swap(_impl_.player_, other->_impl_.player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPlayerAnimEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgameevents_2eproto_getter, &descriptor_table_citadel_5fgameevents_2eproto_once,
      file_level_metadata_citadel_5fgameevents_2eproto[3]);
}

// ===================================================================

class CMsgParticleSystemManager_CreateParticle::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgParticleSystemManager_CreateParticle>()._impl_._has_bits_);
  static void set_has_particle_name_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_attach_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_entity_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgVector& position(const CMsgParticleSystemManager_CreateParticle* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgQAngle& angles(const CMsgParticleSystemManager_CreateParticle* msg);
  static void set_has_angles(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgVector&
CMsgParticleSystemManager_CreateParticle::_Internal::position(const CMsgParticleSystemManager_CreateParticle* msg) {
  return *msg->_impl_.position_;
}
const ::CMsgQAngle&
CMsgParticleSystemManager_CreateParticle::_Internal::angles(const CMsgParticleSystemManager_CreateParticle* msg) {
  return *msg->_impl_.angles_;
}
void CMsgParticleSystemManager_CreateParticle::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CMsgParticleSystemManager_CreateParticle::clear_angles() {
  if (_impl_.angles_ != nullptr) _impl_.angles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CMsgParticleSystemManager_CreateParticle::CMsgParticleSystemManager_CreateParticle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgParticleSystemManager.CreateParticle)
}
CMsgParticleSystemManager_CreateParticle::CMsgParticleSystemManager_CreateParticle(const CMsgParticleSystemManager_CreateParticle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgParticleSystemManager_CreateParticle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.angles_){nullptr}
    , decltype(_impl_.particle_name_index_){}
    , decltype(_impl_.attach_type_){}
    , decltype(_impl_.entity_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::CMsgVector(*from._impl_.position_);
  }
  if (from._internal_has_angles()) {
    _this->_impl_.angles_ = new ::CMsgQAngle(*from._impl_.angles_);
  }
  ::memcpy(&_impl_.particle_name_index_, &from._impl_.particle_name_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entity_handle_) -
    reinterpret_cast<char*>(&_impl_.particle_name_index_)) + sizeof(_impl_.entity_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgParticleSystemManager.CreateParticle)
}

inline void CMsgParticleSystemManager_CreateParticle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.angles_){nullptr}
    , decltype(_impl_.particle_name_index_){uint64_t{0u}}
    , decltype(_impl_.attach_type_){0}
    , decltype(_impl_.entity_handle_){16777215u}
  };
}

CMsgParticleSystemManager_CreateParticle::~CMsgParticleSystemManager_CreateParticle() {
  // @@protoc_insertion_point(destructor:CMsgParticleSystemManager.CreateParticle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgParticleSystemManager_CreateParticle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.angles_;
}

void CMsgParticleSystemManager_CreateParticle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgParticleSystemManager_CreateParticle::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgParticleSystemManager.CreateParticle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.angles_ != nullptr);
      _impl_.angles_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.particle_name_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.attach_type_) -
        reinterpret_cast<char*>(&_impl_.particle_name_index_)) + sizeof(_impl_.attach_type_));
    _impl_.entity_handle_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgParticleSystemManager_CreateParticle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 particle_name_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_particle_name_index(&has_bits);
          _impl_.particle_name_index_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 attach_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_attach_type(&has_bits);
          _impl_.attach_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 entity_handle = 3 [default = 16777215];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_entity_handle(&has_bits);
          _impl_.entity_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgQAngle angles = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_angles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgParticleSystemManager_CreateParticle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgParticleSystemManager.CreateParticle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 particle_name_index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_particle_name_index(), target);
  }

  // optional int32 attach_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_attach_type(), target);
  }

  // optional uint32 entity_handle = 3 [default = 16777215];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_entity_handle(), target);
  }

  // optional .CMsgVector position = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgQAngle angles = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::angles(this),
        _Internal::angles(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgParticleSystemManager.CreateParticle)
  return target;
}

size_t CMsgParticleSystemManager_CreateParticle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgParticleSystemManager.CreateParticle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgVector position = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // optional .CMsgQAngle angles = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.angles_);
    }

    // optional fixed64 particle_name_index = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 attach_type = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_attach_type());
    }

    // optional uint32 entity_handle = 3 [default = 16777215];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_handle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgParticleSystemManager_CreateParticle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgParticleSystemManager_CreateParticle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgParticleSystemManager_CreateParticle::GetClassData() const { return &_class_data_; }


void CMsgParticleSystemManager_CreateParticle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgParticleSystemManager_CreateParticle*>(&to_msg);
  auto& from = static_cast<const CMsgParticleSystemManager_CreateParticle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgParticleSystemManager.CreateParticle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::CMsgVector::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_angles()->::CMsgQAngle::MergeFrom(
          from._internal_angles());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.particle_name_index_ = from._impl_.particle_name_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.attach_type_ = from._impl_.attach_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.entity_handle_ = from._impl_.entity_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgParticleSystemManager_CreateParticle::CopyFrom(const CMsgParticleSystemManager_CreateParticle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgParticleSystemManager.CreateParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgParticleSystemManager_CreateParticle::IsInitialized() const {
  return true;
}

void CMsgParticleSystemManager_CreateParticle::InternalSwap(CMsgParticleSystemManager_CreateParticle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgParticleSystemManager_CreateParticle, _impl_.attach_type_)
      + sizeof(CMsgParticleSystemManager_CreateParticle::_impl_.attach_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgParticleSystemManager_CreateParticle, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
  swap(_impl_.entity_handle_, other->_impl_.entity_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgParticleSystemManager_CreateParticle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgameevents_2eproto_getter, &descriptor_table_citadel_5fgameevents_2eproto_once,
      file_level_metadata_citadel_5fgameevents_2eproto[4]);
}

// ===================================================================

class CMsgParticleSystemManager_DestroyParticle::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgParticleSystemManager_DestroyParticle>()._impl_._has_bits_);
  static void set_has_destroy_immediately(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgParticleSystemManager_DestroyParticle::CMsgParticleSystemManager_DestroyParticle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgParticleSystemManager.DestroyParticle)
}
CMsgParticleSystemManager_DestroyParticle::CMsgParticleSystemManager_DestroyParticle(const CMsgParticleSystemManager_DestroyParticle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgParticleSystemManager_DestroyParticle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destroy_immediately_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.destroy_immediately_ = from._impl_.destroy_immediately_;
  // @@protoc_insertion_point(copy_constructor:CMsgParticleSystemManager.DestroyParticle)
}

inline void CMsgParticleSystemManager_DestroyParticle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destroy_immediately_){false}
  };
}

CMsgParticleSystemManager_DestroyParticle::~CMsgParticleSystemManager_DestroyParticle() {
  // @@protoc_insertion_point(destructor:CMsgParticleSystemManager.DestroyParticle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgParticleSystemManager_DestroyParticle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgParticleSystemManager_DestroyParticle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgParticleSystemManager_DestroyParticle::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgParticleSystemManager.DestroyParticle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.destroy_immediately_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgParticleSystemManager_DestroyParticle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool destroy_immediately = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_destroy_immediately(&has_bits);
          _impl_.destroy_immediately_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgParticleSystemManager_DestroyParticle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgParticleSystemManager.DestroyParticle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool destroy_immediately = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_destroy_immediately(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgParticleSystemManager.DestroyParticle)
  return target;
}

size_t CMsgParticleSystemManager_DestroyParticle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgParticleSystemManager.DestroyParticle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool destroy_immediately = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgParticleSystemManager_DestroyParticle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgParticleSystemManager_DestroyParticle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgParticleSystemManager_DestroyParticle::GetClassData() const { return &_class_data_; }


void CMsgParticleSystemManager_DestroyParticle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgParticleSystemManager_DestroyParticle*>(&to_msg);
  auto& from = static_cast<const CMsgParticleSystemManager_DestroyParticle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgParticleSystemManager.DestroyParticle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_destroy_immediately()) {
    _this->_internal_set_destroy_immediately(from._internal_destroy_immediately());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgParticleSystemManager_DestroyParticle::CopyFrom(const CMsgParticleSystemManager_DestroyParticle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgParticleSystemManager.DestroyParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgParticleSystemManager_DestroyParticle::IsInitialized() const {
  return true;
}

void CMsgParticleSystemManager_DestroyParticle::InternalSwap(CMsgParticleSystemManager_DestroyParticle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.destroy_immediately_, other->_impl_.destroy_immediately_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgParticleSystemManager_DestroyParticle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgameevents_2eproto_getter, &descriptor_table_citadel_5fgameevents_2eproto_once,
      file_level_metadata_citadel_5fgameevents_2eproto[5]);
}

// ===================================================================

class CMsgParticleSystemManager_DestroyParticleInvolving::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgParticleSystemManager_DestroyParticleInvolving>()._impl_._has_bits_);
  static void set_has_destroy_immediately(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entity_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgParticleSystemManager_DestroyParticleInvolving::CMsgParticleSystemManager_DestroyParticleInvolving(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgParticleSystemManager.DestroyParticleInvolving)
}
CMsgParticleSystemManager_DestroyParticleInvolving::CMsgParticleSystemManager_DestroyParticleInvolving(const CMsgParticleSystemManager_DestroyParticleInvolving& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgParticleSystemManager_DestroyParticleInvolving* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destroy_immediately_){}
    , decltype(_impl_.entity_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.destroy_immediately_, &from._impl_.destroy_immediately_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entity_handle_) -
    reinterpret_cast<char*>(&_impl_.destroy_immediately_)) + sizeof(_impl_.entity_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgParticleSystemManager.DestroyParticleInvolving)
}

inline void CMsgParticleSystemManager_DestroyParticleInvolving::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destroy_immediately_){false}
    , decltype(_impl_.entity_handle_){16777215u}
  };
}

CMsgParticleSystemManager_DestroyParticleInvolving::~CMsgParticleSystemManager_DestroyParticleInvolving() {
  // @@protoc_insertion_point(destructor:CMsgParticleSystemManager.DestroyParticleInvolving)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgParticleSystemManager_DestroyParticleInvolving::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgParticleSystemManager_DestroyParticleInvolving::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgParticleSystemManager_DestroyParticleInvolving::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgParticleSystemManager.DestroyParticleInvolving)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.destroy_immediately_ = false;
    _impl_.entity_handle_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgParticleSystemManager_DestroyParticleInvolving::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool destroy_immediately = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_destroy_immediately(&has_bits);
          _impl_.destroy_immediately_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 entity_handle = 3 [default = 16777215];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_entity_handle(&has_bits);
          _impl_.entity_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgParticleSystemManager_DestroyParticleInvolving::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgParticleSystemManager.DestroyParticleInvolving)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool destroy_immediately = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_destroy_immediately(), target);
  }

  // optional uint32 entity_handle = 3 [default = 16777215];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_entity_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgParticleSystemManager.DestroyParticleInvolving)
  return target;
}

size_t CMsgParticleSystemManager_DestroyParticleInvolving::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgParticleSystemManager.DestroyParticleInvolving)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool destroy_immediately = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 entity_handle = 3 [default = 16777215];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_handle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgParticleSystemManager_DestroyParticleInvolving::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgParticleSystemManager_DestroyParticleInvolving::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgParticleSystemManager_DestroyParticleInvolving::GetClassData() const { return &_class_data_; }


void CMsgParticleSystemManager_DestroyParticleInvolving::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgParticleSystemManager_DestroyParticleInvolving*>(&to_msg);
  auto& from = static_cast<const CMsgParticleSystemManager_DestroyParticleInvolving&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgParticleSystemManager.DestroyParticleInvolving)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.destroy_immediately_ = from._impl_.destroy_immediately_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.entity_handle_ = from._impl_.entity_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgParticleSystemManager_DestroyParticleInvolving::CopyFrom(const CMsgParticleSystemManager_DestroyParticleInvolving& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgParticleSystemManager.DestroyParticleInvolving)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgParticleSystemManager_DestroyParticleInvolving::IsInitialized() const {
  return true;
}

void CMsgParticleSystemManager_DestroyParticleInvolving::InternalSwap(CMsgParticleSystemManager_DestroyParticleInvolving* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.destroy_immediately_, other->_impl_.destroy_immediately_);
  swap(_impl_.entity_handle_, other->_impl_.entity_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgParticleSystemManager_DestroyParticleInvolving::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgameevents_2eproto_getter, &descriptor_table_citadel_5fgameevents_2eproto_once,
      file_level_metadata_citadel_5fgameevents_2eproto[6]);
}

// ===================================================================

class CMsgParticleSystemManager_ReleaseParticleIndex::_Internal {
 public:
};

CMsgParticleSystemManager_ReleaseParticleIndex::CMsgParticleSystemManager_ReleaseParticleIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgParticleSystemManager.ReleaseParticleIndex)
}
CMsgParticleSystemManager_ReleaseParticleIndex::CMsgParticleSystemManager_ReleaseParticleIndex(const CMsgParticleSystemManager_ReleaseParticleIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgParticleSystemManager_ReleaseParticleIndex* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgParticleSystemManager.ReleaseParticleIndex)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgParticleSystemManager_ReleaseParticleIndex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgParticleSystemManager_ReleaseParticleIndex::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgParticleSystemManager_ReleaseParticleIndex::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgameevents_2eproto_getter, &descriptor_table_citadel_5fgameevents_2eproto_once,
      file_level_metadata_citadel_5fgameevents_2eproto[7]);
}

// ===================================================================

class CMsgParticleSystemManager_UpdateParticle::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgParticleSystemManager_UpdateParticle>()._impl_._has_bits_);
  static void set_has_control_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgVector& position(const CMsgParticleSystemManager_UpdateParticle* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgVector&
CMsgParticleSystemManager_UpdateParticle::_Internal::position(const CMsgParticleSystemManager_UpdateParticle* msg) {
  return *msg->_impl_.position_;
}
void CMsgParticleSystemManager_UpdateParticle::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CMsgParticleSystemManager_UpdateParticle::CMsgParticleSystemManager_UpdateParticle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgParticleSystemManager.UpdateParticle)
}
CMsgParticleSystemManager_UpdateParticle::CMsgParticleSystemManager_UpdateParticle(const CMsgParticleSystemManager_UpdateParticle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgParticleSystemManager_UpdateParticle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.control_point_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::CMsgVector(*from._impl_.position_);
  }
  _this->_impl_.control_point_ = from._impl_.control_point_;
  // @@protoc_insertion_point(copy_constructor:CMsgParticleSystemManager.UpdateParticle)
}

inline void CMsgParticleSystemManager_UpdateParticle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.control_point_){0}
  };
}

CMsgParticleSystemManager_UpdateParticle::~CMsgParticleSystemManager_UpdateParticle() {
  // @@protoc_insertion_point(destructor:CMsgParticleSystemManager.UpdateParticle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgParticleSystemManager_UpdateParticle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
}

void CMsgParticleSystemManager_UpdateParticle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgParticleSystemManager_UpdateParticle::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgParticleSystemManager.UpdateParticle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.position_ != nullptr);
    _impl_.position_->Clear();
  }
  _impl_.control_point_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgParticleSystemManager_UpdateParticle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 control_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_control_point(&has_bits);
          _impl_.control_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgParticleSystemManager_UpdateParticle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgParticleSystemManager.UpdateParticle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_control_point(), target);
  }

  // optional .CMsgVector position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgParticleSystemManager.UpdateParticle)
  return target;
}

size_t CMsgParticleSystemManager_UpdateParticle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgParticleSystemManager.UpdateParticle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgVector position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // optional int32 control_point = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_control_point());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgParticleSystemManager_UpdateParticle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgParticleSystemManager_UpdateParticle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgParticleSystemManager_UpdateParticle::GetClassData() const { return &_class_data_; }


void CMsgParticleSystemManager_UpdateParticle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgParticleSystemManager_UpdateParticle*>(&to_msg);
  auto& from = static_cast<const CMsgParticleSystemManager_UpdateParticle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgParticleSystemManager.UpdateParticle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::CMsgVector::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.control_point_ = from._impl_.control_point_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgParticleSystemManager_UpdateParticle::CopyFrom(const CMsgParticleSystemManager_UpdateParticle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgParticleSystemManager.UpdateParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgParticleSystemManager_UpdateParticle::IsInitialized() const {
  return true;
}

void CMsgParticleSystemManager_UpdateParticle::InternalSwap(CMsgParticleSystemManager_UpdateParticle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgParticleSystemManager_UpdateParticle, _impl_.control_point_)
      + sizeof(CMsgParticleSystemManager_UpdateParticle::_impl_.control_point_)
      - PROTOBUF_FIELD_OFFSET(CMsgParticleSystemManager_UpdateParticle, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgParticleSystemManager_UpdateParticle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgameevents_2eproto_getter, &descriptor_table_citadel_5fgameevents_2eproto_once,
      file_level_metadata_citadel_5fgameevents_2eproto[8]);
}

// ===================================================================

class CMsgParticleSystemManager_UpdateParticleFwd::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgParticleSystemManager_UpdateParticleFwd>()._impl_._has_bits_);
  static void set_has_control_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgVector& forward(const CMsgParticleSystemManager_UpdateParticleFwd* msg);
  static void set_has_forward(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgVector&
CMsgParticleSystemManager_UpdateParticleFwd::_Internal::forward(const CMsgParticleSystemManager_UpdateParticleFwd* msg) {
  return *msg->_impl_.forward_;
}
void CMsgParticleSystemManager_UpdateParticleFwd::clear_forward() {
  if (_impl_.forward_ != nullptr) _impl_.forward_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CMsgParticleSystemManager_UpdateParticleFwd::CMsgParticleSystemManager_UpdateParticleFwd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgParticleSystemManager.UpdateParticleFwd)
}
CMsgParticleSystemManager_UpdateParticleFwd::CMsgParticleSystemManager_UpdateParticleFwd(const CMsgParticleSystemManager_UpdateParticleFwd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgParticleSystemManager_UpdateParticleFwd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.forward_){nullptr}
    , decltype(_impl_.control_point_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_forward()) {
    _this->_impl_.forward_ = new ::CMsgVector(*from._impl_.forward_);
  }
  _this->_impl_.control_point_ = from._impl_.control_point_;
  // @@protoc_insertion_point(copy_constructor:CMsgParticleSystemManager.UpdateParticleFwd)
}

inline void CMsgParticleSystemManager_UpdateParticleFwd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.forward_){nullptr}
    , decltype(_impl_.control_point_){0}
  };
}

CMsgParticleSystemManager_UpdateParticleFwd::~CMsgParticleSystemManager_UpdateParticleFwd() {
  // @@protoc_insertion_point(destructor:CMsgParticleSystemManager.UpdateParticleFwd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgParticleSystemManager_UpdateParticleFwd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.forward_;
}

void CMsgParticleSystemManager_UpdateParticleFwd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgParticleSystemManager_UpdateParticleFwd::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgParticleSystemManager.UpdateParticleFwd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.forward_ != nullptr);
    _impl_.forward_->Clear();
  }
  _impl_.control_point_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgParticleSystemManager_UpdateParticleFwd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 control_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_control_point(&has_bits);
          _impl_.control_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector forward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgParticleSystemManager_UpdateParticleFwd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgParticleSystemManager.UpdateParticleFwd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_control_point(), target);
  }

  // optional .CMsgVector forward = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::forward(this),
        _Internal::forward(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgParticleSystemManager.UpdateParticleFwd)
  return target;
}

size_t CMsgParticleSystemManager_UpdateParticleFwd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgParticleSystemManager.UpdateParticleFwd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgVector forward = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.forward_);
    }

    // optional int32 control_point = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_control_point());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgParticleSystemManager_UpdateParticleFwd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgParticleSystemManager_UpdateParticleFwd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgParticleSystemManager_UpdateParticleFwd::GetClassData() const { return &_class_data_; }


void CMsgParticleSystemManager_UpdateParticleFwd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgParticleSystemManager_UpdateParticleFwd*>(&to_msg);
  auto& from = static_cast<const CMsgParticleSystemManager_UpdateParticleFwd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgParticleSystemManager.UpdateParticleFwd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_forward()->::CMsgVector::MergeFrom(
          from._internal_forward());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.control_point_ = from._impl_.control_point_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgParticleSystemManager_UpdateParticleFwd::CopyFrom(const CMsgParticleSystemManager_UpdateParticleFwd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgParticleSystemManager.UpdateParticleFwd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgParticleSystemManager_UpdateParticleFwd::IsInitialized() const {
  return true;
}

void CMsgParticleSystemManager_UpdateParticleFwd::InternalSwap(CMsgParticleSystemManager_UpdateParticleFwd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgParticleSystemManager_UpdateParticleFwd, _impl_.control_point_)
      + sizeof(CMsgParticleSystemManager_UpdateParticleFwd::_impl_.control_point_)
      - PROTOBUF_FIELD_OFFSET(CMsgParticleSystemManager_UpdateParticleFwd, _impl_.forward_)>(
          reinterpret_cast<char*>(&_impl_.forward_),
          reinterpret_cast<char*>(&other->_impl_.forward_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgParticleSystemManager_UpdateParticleFwd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgameevents_2eproto_getter, &descriptor_table_citadel_5fgameevents_2eproto_once,
      file_level_metadata_citadel_5fgameevents_2eproto[9]);
}

// ===================================================================

class CMsgParticleSystemManager_UpdateParticleOrient::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgParticleSystemManager_UpdateParticleOrient>()._impl_._has_bits_);
  static void set_has_control_point(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgVector& forward(const CMsgParticleSystemManager_UpdateParticleOrient* msg);
  static void set_has_forward(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgVector& left(const CMsgParticleSystemManager_UpdateParticleOrient* msg);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgVector& up(const CMsgParticleSystemManager_UpdateParticleOrient* msg);
  static void set_has_up(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgVector&
CMsgParticleSystemManager_UpdateParticleOrient::_Internal::forward(const CMsgParticleSystemManager_UpdateParticleOrient* msg) {
  return *msg->_impl_.forward_;
}
const ::CMsgVector&
CMsgParticleSystemManager_UpdateParticleOrient::_Internal::left(const CMsgParticleSystemManager_UpdateParticleOrient* msg) {
  return *msg->_impl_.left_;
}
const ::CMsgVector&
CMsgParticleSystemManager_UpdateParticleOrient::_Internal::up(const CMsgParticleSystemManager_UpdateParticleOrient* msg) {
  return *msg->_impl_.up_;
}
void CMsgParticleSystemManager_UpdateParticleOrient::clear_forward() {
  if (_impl_.forward_ != nullptr) _impl_.forward_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CMsgParticleSystemManager_UpdateParticleOrient::clear_left() {
  if (_impl_.left_ != nullptr) _impl_.left_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CMsgParticleSystemManager_UpdateParticleOrient::clear_up() {
  if (_impl_.up_ != nullptr) _impl_.up_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CMsgParticleSystemManager_UpdateParticleOrient::CMsgParticleSystemManager_UpdateParticleOrient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgParticleSystemManager.UpdateParticleOrient)
}
CMsgParticleSystemManager_UpdateParticleOrient::CMsgParticleSystemManager_UpdateParticleOrient(const CMsgParticleSystemManager_UpdateParticleOrient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgParticleSystemManager_UpdateParticleOrient* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.forward_){nullptr}
    , decltype(_impl_.left_){nullptr}
    , decltype(_impl_.up_){nullptr}
    , decltype(_impl_.control_point_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_forward()) {
    _this->_impl_.forward_ = new ::CMsgVector(*from._impl_.forward_);
  }
  if (from._internal_has_left()) {
    _this->_impl_.left_ = new ::CMsgVector(*from._impl_.left_);
  }
  if (from._internal_has_up()) {
    _this->_impl_.up_ = new ::CMsgVector(*from._impl_.up_);
  }
  _this->_impl_.control_point_ = from._impl_.control_point_;
  // @@protoc_insertion_point(copy_constructor:CMsgParticleSystemManager.UpdateParticleOrient)
}

inline void CMsgParticleSystemManager_UpdateParticleOrient::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.forward_){nullptr}
    , decltype(_impl_.left_){nullptr}
    , decltype(_impl_.up_){nullptr}
    , decltype(_impl_.control_point_){0}
  };
}

CMsgParticleSystemManager_UpdateParticleOrient::~CMsgParticleSystemManager_UpdateParticleOrient() {
  // @@protoc_insertion_point(destructor:CMsgParticleSystemManager.UpdateParticleOrient)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgParticleSystemManager_UpdateParticleOrient::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.forward_;
  if (this != internal_default_instance()) delete _impl_.left_;
  if (this != internal_default_instance()) delete _impl_.up_;
}

void CMsgParticleSystemManager_UpdateParticleOrient::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgParticleSystemManager_UpdateParticleOrient::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgParticleSystemManager.UpdateParticleOrient)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.forward_ != nullptr);
      _impl_.forward_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.left_ != nullptr);
      _impl_.left_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.up_ != nullptr);
      _impl_.up_->Clear();
    }
  }
  _impl_.control_point_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgParticleSystemManager_UpdateParticleOrient::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 control_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_control_point(&has_bits);
          _impl_.control_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector forward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector up = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_up(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgParticleSystemManager_UpdateParticleOrient::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgParticleSystemManager.UpdateParticleOrient)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_control_point(), target);
  }

  // optional .CMsgVector forward = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::forward(this),
        _Internal::forward(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgVector left = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::left(this),
        _Internal::left(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgVector up = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::up(this),
        _Internal::up(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgParticleSystemManager.UpdateParticleOrient)
  return target;
}

size_t CMsgParticleSystemManager_UpdateParticleOrient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgParticleSystemManager.UpdateParticleOrient)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgVector forward = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.forward_);
    }

    // optional .CMsgVector left = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.left_);
    }

    // optional .CMsgVector up = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.up_);
    }

    // optional int32 control_point = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_control_point());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgParticleSystemManager_UpdateParticleOrient::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgParticleSystemManager_UpdateParticleOrient::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgParticleSystemManager_UpdateParticleOrient::GetClassData() const { return &_class_data_; }


void CMsgParticleSystemManager_UpdateParticleOrient::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgParticleSystemManager_UpdateParticleOrient*>(&to_msg);
  auto& from = static_cast<const CMsgParticleSystemManager_UpdateParticleOrient&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgParticleSystemManager.UpdateParticleOrient)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_forward()->::CMsgVector::MergeFrom(
          from._internal_forward());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_left()->::CMsgVector::MergeFrom(
          from._internal_left());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_up()->::CMsgVector::MergeFrom(
          from._internal_up());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.control_point_ = from._impl_.control_point_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgParticleSystemManager_UpdateParticleOrient::CopyFrom(const CMsgParticleSystemManager_UpdateParticleOrient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgParticleSystemManager.UpdateParticleOrient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgParticleSystemManager_UpdateParticleOrient::IsInitialized() const {
  return true;
}

void CMsgParticleSystemManager_UpdateParticleOrient::InternalSwap(CMsgParticleSystemManager_UpdateParticleOrient* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgParticleSystemManager_UpdateParticleOrient, _impl_.control_point_)
      + sizeof(CMsgParticleSystemManager_UpdateParticleOrient::_impl_.control_point_)
      - PROTOBUF_FIELD_OFFSET(CMsgParticleSystemManager_UpdateParticleOrient, _impl_.forward_)>(
          reinterpret_cast<char*>(&_impl_.forward_),
          reinterpret_cast<char*>(&other->_impl_.forward_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgParticleSystemManager_UpdateParticleOrient::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgameevents_2eproto_getter, &descriptor_table_citadel_5fgameevents_2eproto_once,
      file_level_metadata_citadel_5fgameevents_2eproto[10]);
}

// ===================================================================

class CMsgParticleSystemManager_UpdateParticleFallback::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgParticleSystemManager_UpdateParticleFallback>()._impl_._has_bits_);
  static void set_has_control_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgVector& position(const CMsgParticleSystemManager_UpdateParticleFallback* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgVector&
CMsgParticleSystemManager_UpdateParticleFallback::_Internal::position(const CMsgParticleSystemManager_UpdateParticleFallback* msg) {
  return *msg->_impl_.position_;
}
void CMsgParticleSystemManager_UpdateParticleFallback::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CMsgParticleSystemManager_UpdateParticleFallback::CMsgParticleSystemManager_UpdateParticleFallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgParticleSystemManager.UpdateParticleFallback)
}
CMsgParticleSystemManager_UpdateParticleFallback::CMsgParticleSystemManager_UpdateParticleFallback(const CMsgParticleSystemManager_UpdateParticleFallback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgParticleSystemManager_UpdateParticleFallback* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.control_point_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::CMsgVector(*from._impl_.position_);
  }
  _this->_impl_.control_point_ = from._impl_.control_point_;
  // @@protoc_insertion_point(copy_constructor:CMsgParticleSystemManager.UpdateParticleFallback)
}

inline void CMsgParticleSystemManager_UpdateParticleFallback::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.control_point_){0}
  };
}

CMsgParticleSystemManager_UpdateParticleFallback::~CMsgParticleSystemManager_UpdateParticleFallback() {
  // @@protoc_insertion_point(destructor:CMsgParticleSystemManager.UpdateParticleFallback)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgParticleSystemManager_UpdateParticleFallback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
}

void CMsgParticleSystemManager_UpdateParticleFallback::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgParticleSystemManager_UpdateParticleFallback::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgParticleSystemManager.UpdateParticleFallback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.position_ != nullptr);
    _impl_.position_->Clear();
  }
  _impl_.control_point_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgParticleSystemManager_UpdateParticleFallback::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 control_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_control_point(&has_bits);
          _impl_.control_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgParticleSystemManager_UpdateParticleFallback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgParticleSystemManager.UpdateParticleFallback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_control_point(), target);
  }

  // optional .CMsgVector position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgParticleSystemManager.UpdateParticleFallback)
  return target;
}

size_t CMsgParticleSystemManager_UpdateParticleFallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgParticleSystemManager.UpdateParticleFallback)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgVector position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // optional int32 control_point = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_control_point());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgParticleSystemManager_UpdateParticleFallback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgParticleSystemManager_UpdateParticleFallback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgParticleSystemManager_UpdateParticleFallback::GetClassData() const { return &_class_data_; }


void CMsgParticleSystemManager_UpdateParticleFallback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgParticleSystemManager_UpdateParticleFallback*>(&to_msg);
  auto& from = static_cast<const CMsgParticleSystemManager_UpdateParticleFallback&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgParticleSystemManager.UpdateParticleFallback)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::CMsgVector::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.control_point_ = from._impl_.control_point_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgParticleSystemManager_UpdateParticleFallback::CopyFrom(const CMsgParticleSystemManager_UpdateParticleFallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgParticleSystemManager.UpdateParticleFallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgParticleSystemManager_UpdateParticleFallback::IsInitialized() const {
  return true;
}

void CMsgParticleSystemManager_UpdateParticleFallback::InternalSwap(CMsgParticleSystemManager_UpdateParticleFallback* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgParticleSystemManager_UpdateParticleFallback, _impl_.control_point_)
      + sizeof(CMsgParticleSystemManager_UpdateParticleFallback::_impl_.control_point_)
      - PROTOBUF_FIELD_OFFSET(CMsgParticleSystemManager_UpdateParticleFallback, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgParticleSystemManager_UpdateParticleFallback::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgameevents_2eproto_getter, &descriptor_table_citadel_5fgameevents_2eproto_once,
      file_level_metadata_citadel_5fgameevents_2eproto[11]);
}

// ===================================================================

class CMsgParticleSystemManager_UpdateParticleEnt::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgParticleSystemManager_UpdateParticleEnt>()._impl_._has_bits_);
  static void set_has_control_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entity_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_attach_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_attachment(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgVector& fallback_position(const CMsgParticleSystemManager_UpdateParticleEnt* msg);
  static void set_has_fallback_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgVector&
CMsgParticleSystemManager_UpdateParticleEnt::_Internal::fallback_position(const CMsgParticleSystemManager_UpdateParticleEnt* msg) {
  return *msg->_impl_.fallback_position_;
}
void CMsgParticleSystemManager_UpdateParticleEnt::clear_fallback_position() {
  if (_impl_.fallback_position_ != nullptr) _impl_.fallback_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CMsgParticleSystemManager_UpdateParticleEnt::CMsgParticleSystemManager_UpdateParticleEnt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgParticleSystemManager.UpdateParticleEnt)
}
CMsgParticleSystemManager_UpdateParticleEnt::CMsgParticleSystemManager_UpdateParticleEnt(const CMsgParticleSystemManager_UpdateParticleEnt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgParticleSystemManager_UpdateParticleEnt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fallback_position_){nullptr}
    , decltype(_impl_.control_point_){}
    , decltype(_impl_.attach_type_){}
    , decltype(_impl_.attachment_){}
    , decltype(_impl_.entity_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fallback_position()) {
    _this->_impl_.fallback_position_ = new ::CMsgVector(*from._impl_.fallback_position_);
  }
  ::memcpy(&_impl_.control_point_, &from._impl_.control_point_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entity_handle_) -
    reinterpret_cast<char*>(&_impl_.control_point_)) + sizeof(_impl_.entity_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgParticleSystemManager.UpdateParticleEnt)
}

inline void CMsgParticleSystemManager_UpdateParticleEnt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fallback_position_){nullptr}
    , decltype(_impl_.control_point_){0}
    , decltype(_impl_.attach_type_){0}
    , decltype(_impl_.attachment_){0}
    , decltype(_impl_.entity_handle_){16777215u}
  };
}

CMsgParticleSystemManager_UpdateParticleEnt::~CMsgParticleSystemManager_UpdateParticleEnt() {
  // @@protoc_insertion_point(destructor:CMsgParticleSystemManager.UpdateParticleEnt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgParticleSystemManager_UpdateParticleEnt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fallback_position_;
}

void CMsgParticleSystemManager_UpdateParticleEnt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgParticleSystemManager_UpdateParticleEnt::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgParticleSystemManager.UpdateParticleEnt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.fallback_position_ != nullptr);
    _impl_.fallback_position_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.control_point_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.attachment_) -
        reinterpret_cast<char*>(&_impl_.control_point_)) + sizeof(_impl_.attachment_));
    _impl_.entity_handle_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgParticleSystemManager_UpdateParticleEnt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 control_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_control_point(&has_bits);
          _impl_.control_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 entity_handle = 2 [default = 16777215];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_entity_handle(&has_bits);
          _impl_.entity_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 attach_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_attach_type(&has_bits);
          _impl_.attach_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 attachment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_attachment(&has_bits);
          _impl_.attachment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector fallback_position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_fallback_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgParticleSystemManager_UpdateParticleEnt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgParticleSystemManager.UpdateParticleEnt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_control_point(), target);
  }

  // optional uint32 entity_handle = 2 [default = 16777215];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entity_handle(), target);
  }

  // optional int32 attach_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_attach_type(), target);
  }

  // optional int32 attachment = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_attachment(), target);
  }

  // optional .CMsgVector fallback_position = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::fallback_position(this),
        _Internal::fallback_position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgParticleSystemManager.UpdateParticleEnt)
  return target;
}

size_t CMsgParticleSystemManager_UpdateParticleEnt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgParticleSystemManager.UpdateParticleEnt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgVector fallback_position = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.fallback_position_);
    }

    // optional int32 control_point = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_control_point());
    }

    // optional int32 attach_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_attach_type());
    }

    // optional int32 attachment = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_attachment());
    }

    // optional uint32 entity_handle = 2 [default = 16777215];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_handle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgParticleSystemManager_UpdateParticleEnt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgParticleSystemManager_UpdateParticleEnt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgParticleSystemManager_UpdateParticleEnt::GetClassData() const { return &_class_data_; }


void CMsgParticleSystemManager_UpdateParticleEnt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgParticleSystemManager_UpdateParticleEnt*>(&to_msg);
  auto& from = static_cast<const CMsgParticleSystemManager_UpdateParticleEnt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgParticleSystemManager.UpdateParticleEnt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_fallback_position()->::CMsgVector::MergeFrom(
          from._internal_fallback_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.control_point_ = from._impl_.control_point_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.attach_type_ = from._impl_.attach_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.attachment_ = from._impl_.attachment_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.entity_handle_ = from._impl_.entity_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgParticleSystemManager_UpdateParticleEnt::CopyFrom(const CMsgParticleSystemManager_UpdateParticleEnt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgParticleSystemManager.UpdateParticleEnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgParticleSystemManager_UpdateParticleEnt::IsInitialized() const {
  return true;
}

void CMsgParticleSystemManager_UpdateParticleEnt::InternalSwap(CMsgParticleSystemManager_UpdateParticleEnt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgParticleSystemManager_UpdateParticleEnt, _impl_.attachment_)
      + sizeof(CMsgParticleSystemManager_UpdateParticleEnt::_impl_.attachment_)
      - PROTOBUF_FIELD_OFFSET(CMsgParticleSystemManager_UpdateParticleEnt, _impl_.fallback_position_)>(
          reinterpret_cast<char*>(&_impl_.fallback_position_),
          reinterpret_cast<char*>(&other->_impl_.fallback_position_));
  swap(_impl_.entity_handle_, other->_impl_.entity_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgParticleSystemManager_UpdateParticleEnt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgameevents_2eproto_getter, &descriptor_table_citadel_5fgameevents_2eproto_once,
      file_level_metadata_citadel_5fgameevents_2eproto[12]);
}

// ===================================================================

class CMsgParticleSystemManager_UpdateParticleOffset::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgParticleSystemManager_UpdateParticleOffset>()._impl_._has_bits_);
  static void set_has_control_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgVector& origin_offset(const CMsgParticleSystemManager_UpdateParticleOffset* msg);
  static void set_has_origin_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgVector&
CMsgParticleSystemManager_UpdateParticleOffset::_Internal::origin_offset(const CMsgParticleSystemManager_UpdateParticleOffset* msg) {
  return *msg->_impl_.origin_offset_;
}
void CMsgParticleSystemManager_UpdateParticleOffset::clear_origin_offset() {
  if (_impl_.origin_offset_ != nullptr) _impl_.origin_offset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CMsgParticleSystemManager_UpdateParticleOffset::CMsgParticleSystemManager_UpdateParticleOffset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgParticleSystemManager.UpdateParticleOffset)
}
CMsgParticleSystemManager_UpdateParticleOffset::CMsgParticleSystemManager_UpdateParticleOffset(const CMsgParticleSystemManager_UpdateParticleOffset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgParticleSystemManager_UpdateParticleOffset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.origin_offset_){nullptr}
    , decltype(_impl_.control_point_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin_offset()) {
    _this->_impl_.origin_offset_ = new ::CMsgVector(*from._impl_.origin_offset_);
  }
  _this->_impl_.control_point_ = from._impl_.control_point_;
  // @@protoc_insertion_point(copy_constructor:CMsgParticleSystemManager.UpdateParticleOffset)
}

inline void CMsgParticleSystemManager_UpdateParticleOffset::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.origin_offset_){nullptr}
    , decltype(_impl_.control_point_){0}
  };
}

CMsgParticleSystemManager_UpdateParticleOffset::~CMsgParticleSystemManager_UpdateParticleOffset() {
  // @@protoc_insertion_point(destructor:CMsgParticleSystemManager.UpdateParticleOffset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgParticleSystemManager_UpdateParticleOffset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.origin_offset_;
}

void CMsgParticleSystemManager_UpdateParticleOffset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgParticleSystemManager_UpdateParticleOffset::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgParticleSystemManager.UpdateParticleOffset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.origin_offset_ != nullptr);
    _impl_.origin_offset_->Clear();
  }
  _impl_.control_point_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgParticleSystemManager_UpdateParticleOffset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 control_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_control_point(&has_bits);
          _impl_.control_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector origin_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin_offset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgParticleSystemManager_UpdateParticleOffset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgParticleSystemManager.UpdateParticleOffset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_control_point(), target);
  }

  // optional .CMsgVector origin_offset = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::origin_offset(this),
        _Internal::origin_offset(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgParticleSystemManager.UpdateParticleOffset)
  return target;
}

size_t CMsgParticleSystemManager_UpdateParticleOffset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgParticleSystemManager.UpdateParticleOffset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgVector origin_offset = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.origin_offset_);
    }

    // optional int32 control_point = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_control_point());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgParticleSystemManager_UpdateParticleOffset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgParticleSystemManager_UpdateParticleOffset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgParticleSystemManager_UpdateParticleOffset::GetClassData() const { return &_class_data_; }


void CMsgParticleSystemManager_UpdateParticleOffset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgParticleSystemManager_UpdateParticleOffset*>(&to_msg);
  auto& from = static_cast<const CMsgParticleSystemManager_UpdateParticleOffset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgParticleSystemManager.UpdateParticleOffset)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_origin_offset()->::CMsgVector::MergeFrom(
          from._internal_origin_offset());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.control_point_ = from._impl_.control_point_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgParticleSystemManager_UpdateParticleOffset::CopyFrom(const CMsgParticleSystemManager_UpdateParticleOffset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgParticleSystemManager.UpdateParticleOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgParticleSystemManager_UpdateParticleOffset::IsInitialized() const {
  return true;
}

void CMsgParticleSystemManager_UpdateParticleOffset::InternalSwap(CMsgParticleSystemManager_UpdateParticleOffset* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgParticleSystemManager_UpdateParticleOffset, _impl_.control_point_)
      + sizeof(CMsgParticleSystemManager_UpdateParticleOffset::_impl_.control_point_)
      - PROTOBUF_FIELD_OFFSET(CMsgParticleSystemManager_UpdateParticleOffset, _impl_.origin_offset_)>(
          reinterpret_cast<char*>(&_impl_.origin_offset_),
          reinterpret_cast<char*>(&other->_impl_.origin_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgParticleSystemManager_UpdateParticleOffset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgameevents_2eproto_getter, &descriptor_table_citadel_5fgameevents_2eproto_once,
      file_level_metadata_citadel_5fgameevents_2eproto[13]);
}

// ===================================================================

class CMsgParticleSystemManager_UpdateParticleFrozen::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgParticleSystemManager_UpdateParticleFrozen>()._impl_._has_bits_);
  static void set_has_set_frozen(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgParticleSystemManager_UpdateParticleFrozen::CMsgParticleSystemManager_UpdateParticleFrozen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgParticleSystemManager.UpdateParticleFrozen)
}
CMsgParticleSystemManager_UpdateParticleFrozen::CMsgParticleSystemManager_UpdateParticleFrozen(const CMsgParticleSystemManager_UpdateParticleFrozen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgParticleSystemManager_UpdateParticleFrozen* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.set_frozen_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.set_frozen_ = from._impl_.set_frozen_;
  // @@protoc_insertion_point(copy_constructor:CMsgParticleSystemManager.UpdateParticleFrozen)
}

inline void CMsgParticleSystemManager_UpdateParticleFrozen::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.set_frozen_){false}
  };
}

CMsgParticleSystemManager_UpdateParticleFrozen::~CMsgParticleSystemManager_UpdateParticleFrozen() {
  // @@protoc_insertion_point(destructor:CMsgParticleSystemManager.UpdateParticleFrozen)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgParticleSystemManager_UpdateParticleFrozen::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgParticleSystemManager_UpdateParticleFrozen::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgParticleSystemManager_UpdateParticleFrozen::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgParticleSystemManager.UpdateParticleFrozen)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.set_frozen_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgParticleSystemManager_UpdateParticleFrozen::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool set_frozen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_set_frozen(&has_bits);
          _impl_.set_frozen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgParticleSystemManager_UpdateParticleFrozen::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgParticleSystemManager.UpdateParticleFrozen)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool set_frozen = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_set_frozen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgParticleSystemManager.UpdateParticleFrozen)
  return target;
}

size_t CMsgParticleSystemManager_UpdateParticleFrozen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgParticleSystemManager.UpdateParticleFrozen)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool set_frozen = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgParticleSystemManager_UpdateParticleFrozen::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgParticleSystemManager_UpdateParticleFrozen::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgParticleSystemManager_UpdateParticleFrozen::GetClassData() const { return &_class_data_; }


void CMsgParticleSystemManager_UpdateParticleFrozen::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgParticleSystemManager_UpdateParticleFrozen*>(&to_msg);
  auto& from = static_cast<const CMsgParticleSystemManager_UpdateParticleFrozen&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgParticleSystemManager.UpdateParticleFrozen)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_set_frozen()) {
    _this->_internal_set_set_frozen(from._internal_set_frozen());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgParticleSystemManager_UpdateParticleFrozen::CopyFrom(const CMsgParticleSystemManager_UpdateParticleFrozen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgParticleSystemManager.UpdateParticleFrozen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgParticleSystemManager_UpdateParticleFrozen::IsInitialized() const {
  return true;
}

void CMsgParticleSystemManager_UpdateParticleFrozen::InternalSwap(CMsgParticleSystemManager_UpdateParticleFrozen* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.set_frozen_, other->_impl_.set_frozen_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgParticleSystemManager_UpdateParticleFrozen::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgameevents_2eproto_getter, &descriptor_table_citadel_5fgameevents_2eproto_once,
      file_level_metadata_citadel_5fgameevents_2eproto[14]);
}

// ===================================================================

class CMsgParticleSystemManager_UpdateParticleShouldDraw::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgParticleSystemManager_UpdateParticleShouldDraw>()._impl_._has_bits_);
  static void set_has_should_draw(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgParticleSystemManager_UpdateParticleShouldDraw::CMsgParticleSystemManager_UpdateParticleShouldDraw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgParticleSystemManager.UpdateParticleShouldDraw)
}
CMsgParticleSystemManager_UpdateParticleShouldDraw::CMsgParticleSystemManager_UpdateParticleShouldDraw(const CMsgParticleSystemManager_UpdateParticleShouldDraw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgParticleSystemManager_UpdateParticleShouldDraw* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.should_draw_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.should_draw_ = from._impl_.should_draw_;
  // @@protoc_insertion_point(copy_constructor:CMsgParticleSystemManager.UpdateParticleShouldDraw)
}

inline void CMsgParticleSystemManager_UpdateParticleShouldDraw::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.should_draw_){false}
  };
}

CMsgParticleSystemManager_UpdateParticleShouldDraw::~CMsgParticleSystemManager_UpdateParticleShouldDraw() {
  // @@protoc_insertion_point(destructor:CMsgParticleSystemManager.UpdateParticleShouldDraw)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgParticleSystemManager_UpdateParticleShouldDraw::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgParticleSystemManager_UpdateParticleShouldDraw::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgParticleSystemManager_UpdateParticleShouldDraw::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgParticleSystemManager.UpdateParticleShouldDraw)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.should_draw_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgParticleSystemManager_UpdateParticleShouldDraw::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool should_draw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_should_draw(&has_bits);
          _impl_.should_draw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgParticleSystemManager_UpdateParticleShouldDraw::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgParticleSystemManager.UpdateParticleShouldDraw)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool should_draw = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_should_draw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgParticleSystemManager.UpdateParticleShouldDraw)
  return target;
}

size_t CMsgParticleSystemManager_UpdateParticleShouldDraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgParticleSystemManager.UpdateParticleShouldDraw)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool should_draw = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgParticleSystemManager_UpdateParticleShouldDraw::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgParticleSystemManager_UpdateParticleShouldDraw::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgParticleSystemManager_UpdateParticleShouldDraw::GetClassData() const { return &_class_data_; }


void CMsgParticleSystemManager_UpdateParticleShouldDraw::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgParticleSystemManager_UpdateParticleShouldDraw*>(&to_msg);
  auto& from = static_cast<const CMsgParticleSystemManager_UpdateParticleShouldDraw&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgParticleSystemManager.UpdateParticleShouldDraw)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_should_draw()) {
    _this->_internal_set_should_draw(from._internal_should_draw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgParticleSystemManager_UpdateParticleShouldDraw::CopyFrom(const CMsgParticleSystemManager_UpdateParticleShouldDraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgParticleSystemManager.UpdateParticleShouldDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgParticleSystemManager_UpdateParticleShouldDraw::IsInitialized() const {
  return true;
}

void CMsgParticleSystemManager_UpdateParticleShouldDraw::InternalSwap(CMsgParticleSystemManager_UpdateParticleShouldDraw* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.should_draw_, other->_impl_.should_draw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgParticleSystemManager_UpdateParticleShouldDraw::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgameevents_2eproto_getter, &descriptor_table_citadel_5fgameevents_2eproto_once,
      file_level_metadata_citadel_5fgameevents_2eproto[15]);
}

// ===================================================================

class CMsgParticleSystemManager::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgParticleSystemManager>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::CMsgParticleSystemManager_CreateParticle& create_particle(const CMsgParticleSystemManager* msg);
  static void set_has_create_particle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgParticleSystemManager_DestroyParticle& destroy_particle(const CMsgParticleSystemManager* msg);
  static void set_has_destroy_particle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgParticleSystemManager_DestroyParticleInvolving& destroy_particle_involving(const CMsgParticleSystemManager* msg);
  static void set_has_destroy_particle_involving(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgParticleSystemManager_ReleaseParticleIndex& release_particle_index(const CMsgParticleSystemManager* msg);
  static void set_has_release_particle_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgParticleSystemManager_UpdateParticle& update_particle(const CMsgParticleSystemManager* msg);
  static void set_has_update_particle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgParticleSystemManager_UpdateParticleFwd& update_particle_fwd(const CMsgParticleSystemManager* msg);
  static void set_has_update_particle_fwd(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgParticleSystemManager_UpdateParticleOrient& update_particle_orient(const CMsgParticleSystemManager* msg);
  static void set_has_update_particle_orient(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CMsgParticleSystemManager_UpdateParticleFallback& update_particle_fallback(const CMsgParticleSystemManager* msg);
  static void set_has_update_particle_fallback(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CMsgParticleSystemManager_UpdateParticleOffset& update_particle_offset(const CMsgParticleSystemManager* msg);
  static void set_has_update_particle_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::CMsgParticleSystemManager_UpdateParticleEnt& update_particle_ent(const CMsgParticleSystemManager* msg);
  static void set_has_update_particle_ent(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::CMsgParticleSystemManager_UpdateParticleFrozen& update_particle_frozen(const CMsgParticleSystemManager* msg);
  static void set_has_update_particle_frozen(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::CMsgParticleSystemManager_UpdateParticleShouldDraw& update_particle_should_draw(const CMsgParticleSystemManager* msg);
  static void set_has_update_particle_should_draw(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00003000) ^ 0x00003000) != 0;
  }
};

const ::CMsgParticleSystemManager_CreateParticle&
CMsgParticleSystemManager::_Internal::create_particle(const CMsgParticleSystemManager* msg) {
  return *msg->_impl_.create_particle_;
}
const ::CMsgParticleSystemManager_DestroyParticle&
CMsgParticleSystemManager::_Internal::destroy_particle(const CMsgParticleSystemManager* msg) {
  return *msg->_impl_.destroy_particle_;
}
const ::CMsgParticleSystemManager_DestroyParticleInvolving&
CMsgParticleSystemManager::_Internal::destroy_particle_involving(const CMsgParticleSystemManager* msg) {
  return *msg->_impl_.destroy_particle_involving_;
}
const ::CMsgParticleSystemManager_ReleaseParticleIndex&
CMsgParticleSystemManager::_Internal::release_particle_index(const CMsgParticleSystemManager* msg) {
  return *msg->_impl_.release_particle_index_;
}
const ::CMsgParticleSystemManager_UpdateParticle&
CMsgParticleSystemManager::_Internal::update_particle(const CMsgParticleSystemManager* msg) {
  return *msg->_impl_.update_particle_;
}
const ::CMsgParticleSystemManager_UpdateParticleFwd&
CMsgParticleSystemManager::_Internal::update_particle_fwd(const CMsgParticleSystemManager* msg) {
  return *msg->_impl_.update_particle_fwd_;
}
const ::CMsgParticleSystemManager_UpdateParticleOrient&
CMsgParticleSystemManager::_Internal::update_particle_orient(const CMsgParticleSystemManager* msg) {
  return *msg->_impl_.update_particle_orient_;
}
const ::CMsgParticleSystemManager_UpdateParticleFallback&
CMsgParticleSystemManager::_Internal::update_particle_fallback(const CMsgParticleSystemManager* msg) {
  return *msg->_impl_.update_particle_fallback_;
}
const ::CMsgParticleSystemManager_UpdateParticleOffset&
CMsgParticleSystemManager::_Internal::update_particle_offset(const CMsgParticleSystemManager* msg) {
  return *msg->_impl_.update_particle_offset_;
}
const ::CMsgParticleSystemManager_UpdateParticleEnt&
CMsgParticleSystemManager::_Internal::update_particle_ent(const CMsgParticleSystemManager* msg) {
  return *msg->_impl_.update_particle_ent_;
}
const ::CMsgParticleSystemManager_UpdateParticleFrozen&
CMsgParticleSystemManager::_Internal::update_particle_frozen(const CMsgParticleSystemManager* msg) {
  return *msg->_impl_.update_particle_frozen_;
}
const ::CMsgParticleSystemManager_UpdateParticleShouldDraw&
CMsgParticleSystemManager::_Internal::update_particle_should_draw(const CMsgParticleSystemManager* msg) {
  return *msg->_impl_.update_particle_should_draw_;
}
CMsgParticleSystemManager::CMsgParticleSystemManager(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgParticleSystemManager)
}
CMsgParticleSystemManager::CMsgParticleSystemManager(const CMsgParticleSystemManager& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgParticleSystemManager* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.create_particle_){nullptr}
    , decltype(_impl_.destroy_particle_){nullptr}
    , decltype(_impl_.destroy_particle_involving_){nullptr}
    , decltype(_impl_.release_particle_index_){nullptr}
    , decltype(_impl_.update_particle_){nullptr}
    , decltype(_impl_.update_particle_fwd_){nullptr}
    , decltype(_impl_.update_particle_orient_){nullptr}
    , decltype(_impl_.update_particle_fallback_){nullptr}
    , decltype(_impl_.update_particle_offset_){nullptr}
    , decltype(_impl_.update_particle_ent_){nullptr}
    , decltype(_impl_.update_particle_frozen_){nullptr}
    , decltype(_impl_.update_particle_should_draw_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_create_particle()) {
    _this->_impl_.create_particle_ = new ::CMsgParticleSystemManager_CreateParticle(*from._impl_.create_particle_);
  }
  if (from._internal_has_destroy_particle()) {
    _this->_impl_.destroy_particle_ = new ::CMsgParticleSystemManager_DestroyParticle(*from._impl_.destroy_particle_);
  }
  if (from._internal_has_destroy_particle_involving()) {
    _this->_impl_.destroy_particle_involving_ = new ::CMsgParticleSystemManager_DestroyParticleInvolving(*from._impl_.destroy_particle_involving_);
  }
  if (from._internal_has_release_particle_index()) {
    _this->_impl_.release_particle_index_ = new ::CMsgParticleSystemManager_ReleaseParticleIndex(*from._impl_.release_particle_index_);
  }
  if (from._internal_has_update_particle()) {
    _this->_impl_.update_particle_ = new ::CMsgParticleSystemManager_UpdateParticle(*from._impl_.update_particle_);
  }
  if (from._internal_has_update_particle_fwd()) {
    _this->_impl_.update_particle_fwd_ = new ::CMsgParticleSystemManager_UpdateParticleFwd(*from._impl_.update_particle_fwd_);
  }
  if (from._internal_has_update_particle_orient()) {
    _this->_impl_.update_particle_orient_ = new ::CMsgParticleSystemManager_UpdateParticleOrient(*from._impl_.update_particle_orient_);
  }
  if (from._internal_has_update_particle_fallback()) {
    _this->_impl_.update_particle_fallback_ = new ::CMsgParticleSystemManager_UpdateParticleFallback(*from._impl_.update_particle_fallback_);
  }
  if (from._internal_has_update_particle_offset()) {
    _this->_impl_.update_particle_offset_ = new ::CMsgParticleSystemManager_UpdateParticleOffset(*from._impl_.update_particle_offset_);
  }
  if (from._internal_has_update_particle_ent()) {
    _this->_impl_.update_particle_ent_ = new ::CMsgParticleSystemManager_UpdateParticleEnt(*from._impl_.update_particle_ent_);
  }
  if (from._internal_has_update_particle_frozen()) {
    _this->_impl_.update_particle_frozen_ = new ::CMsgParticleSystemManager_UpdateParticleFrozen(*from._impl_.update_particle_frozen_);
  }
  if (from._internal_has_update_particle_should_draw()) {
    _this->_impl_.update_particle_should_draw_ = new ::CMsgParticleSystemManager_UpdateParticleShouldDraw(*from._impl_.update_particle_should_draw_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.index_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.index_));
  // @@protoc_insertion_point(copy_constructor:CMsgParticleSystemManager)
}

inline void CMsgParticleSystemManager::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.create_particle_){nullptr}
    , decltype(_impl_.destroy_particle_){nullptr}
    , decltype(_impl_.destroy_particle_involving_){nullptr}
    , decltype(_impl_.release_particle_index_){nullptr}
    , decltype(_impl_.update_particle_){nullptr}
    , decltype(_impl_.update_particle_fwd_){nullptr}
    , decltype(_impl_.update_particle_orient_){nullptr}
    , decltype(_impl_.update_particle_fallback_){nullptr}
    , decltype(_impl_.update_particle_offset_){nullptr}
    , decltype(_impl_.update_particle_ent_){nullptr}
    , decltype(_impl_.update_particle_frozen_){nullptr}
    , decltype(_impl_.update_particle_should_draw_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.index_){0u}
  };
}

CMsgParticleSystemManager::~CMsgParticleSystemManager() {
  // @@protoc_insertion_point(destructor:CMsgParticleSystemManager)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgParticleSystemManager::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.create_particle_;
  if (this != internal_default_instance()) delete _impl_.destroy_particle_;
  if (this != internal_default_instance()) delete _impl_.destroy_particle_involving_;
  if (this != internal_default_instance()) delete _impl_.release_particle_index_;
  if (this != internal_default_instance()) delete _impl_.update_particle_;
  if (this != internal_default_instance()) delete _impl_.update_particle_fwd_;
  if (this != internal_default_instance()) delete _impl_.update_particle_orient_;
  if (this != internal_default_instance()) delete _impl_.update_particle_fallback_;
  if (this != internal_default_instance()) delete _impl_.update_particle_offset_;
  if (this != internal_default_instance()) delete _impl_.update_particle_ent_;
  if (this != internal_default_instance()) delete _impl_.update_particle_frozen_;
  if (this != internal_default_instance()) delete _impl_.update_particle_should_draw_;
}

void CMsgParticleSystemManager::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgParticleSystemManager::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgParticleSystemManager)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.create_particle_ != nullptr);
      _impl_.create_particle_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.destroy_particle_ != nullptr);
      _impl_.destroy_particle_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.destroy_particle_involving_ != nullptr);
      _impl_.destroy_particle_involving_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.release_particle_index_ != nullptr);
      _impl_.release_particle_index_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.update_particle_ != nullptr);
      _impl_.update_particle_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.update_particle_fwd_ != nullptr);
      _impl_.update_particle_fwd_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.update_particle_orient_ != nullptr);
      _impl_.update_particle_orient_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.update_particle_fallback_ != nullptr);
      _impl_.update_particle_fallback_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.update_particle_offset_ != nullptr);
      _impl_.update_particle_offset_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.update_particle_ent_ != nullptr);
      _impl_.update_particle_ent_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.update_particle_frozen_ != nullptr);
      _impl_.update_particle_frozen_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.update_particle_should_draw_ != nullptr);
      _impl_.update_particle_should_draw_->Clear();
    }
  }
  if (cached_has_bits & 0x00003000u) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.index_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgParticleSystemManager::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .PARTICLE_SYSTEM_MANAGER_MESSAGE type = 1 [default = PARTICLE_SYSTEM_MANAGER_EVENT_CREATE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PARTICLE_SYSTEM_MANAGER_MESSAGE_IsValid(val))) {
            _internal_set_type(static_cast<::PARTICLE_SYSTEM_MANAGER_MESSAGE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgParticleSystemManager.CreateParticle create_particle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_particle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgParticleSystemManager.DestroyParticle destroy_particle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_destroy_particle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgParticleSystemManager.DestroyParticleInvolving destroy_particle_involving = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_destroy_particle_involving(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgParticleSystemManager.ReleaseParticleIndex release_particle_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_release_particle_index(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgParticleSystemManager.UpdateParticle update_particle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_particle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgParticleSystemManager.UpdateParticleFwd update_particle_fwd = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_particle_fwd(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgParticleSystemManager.UpdateParticleOrient update_particle_orient = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_particle_orient(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgParticleSystemManager.UpdateParticleFallback update_particle_fallback = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_particle_fallback(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgParticleSystemManager.UpdateParticleOffset update_particle_offset = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_particle_offset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgParticleSystemManager.UpdateParticleEnt update_particle_ent = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_particle_ent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgParticleSystemManager.UpdateParticleFrozen update_particle_frozen = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_particle_frozen(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgParticleSystemManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_particle_should_draw(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgParticleSystemManager::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgParticleSystemManager)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .PARTICLE_SYSTEM_MANAGER_MESSAGE type = 1 [default = PARTICLE_SYSTEM_MANAGER_EVENT_CREATE];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required uint32 index = 2;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  // optional .CMsgParticleSystemManager.CreateParticle create_particle = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::create_particle(this),
        _Internal::create_particle(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgParticleSystemManager.DestroyParticle destroy_particle = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::destroy_particle(this),
        _Internal::destroy_particle(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgParticleSystemManager.DestroyParticleInvolving destroy_particle_involving = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::destroy_particle_involving(this),
        _Internal::destroy_particle_involving(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgParticleSystemManager.ReleaseParticleIndex release_particle_index = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::release_particle_index(this),
        _Internal::release_particle_index(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgParticleSystemManager.UpdateParticle update_particle = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::update_particle(this),
        _Internal::update_particle(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgParticleSystemManager.UpdateParticleFwd update_particle_fwd = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::update_particle_fwd(this),
        _Internal::update_particle_fwd(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgParticleSystemManager.UpdateParticleOrient update_particle_orient = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::update_particle_orient(this),
        _Internal::update_particle_orient(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgParticleSystemManager.UpdateParticleFallback update_particle_fallback = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::update_particle_fallback(this),
        _Internal::update_particle_fallback(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgParticleSystemManager.UpdateParticleOffset update_particle_offset = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::update_particle_offset(this),
        _Internal::update_particle_offset(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgParticleSystemManager.UpdateParticleEnt update_particle_ent = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::update_particle_ent(this),
        _Internal::update_particle_ent(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgParticleSystemManager.UpdateParticleFrozen update_particle_frozen = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::update_particle_frozen(this),
        _Internal::update_particle_frozen(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgParticleSystemManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::update_particle_should_draw(this),
        _Internal::update_particle_should_draw(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgParticleSystemManager)
  return target;
}

size_t CMsgParticleSystemManager::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CMsgParticleSystemManager)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required .PARTICLE_SYSTEM_MANAGER_MESSAGE type = 1 [default = PARTICLE_SYSTEM_MANAGER_EVENT_CREATE];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (_internal_has_index()) {
    // required uint32 index = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return total_size;
}
size_t CMsgParticleSystemManager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgParticleSystemManager)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00003000) ^ 0x00003000) == 0) {  // All required fields are present.
    // required .PARTICLE_SYSTEM_MANAGER_MESSAGE type = 1 [default = PARTICLE_SYSTEM_MANAGER_EVENT_CREATE];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());

    // required uint32 index = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgParticleSystemManager.CreateParticle create_particle = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.create_particle_);
    }

    // optional .CMsgParticleSystemManager.DestroyParticle destroy_particle = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.destroy_particle_);
    }

    // optional .CMsgParticleSystemManager.DestroyParticleInvolving destroy_particle_involving = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.destroy_particle_involving_);
    }

    // optional .CMsgParticleSystemManager.ReleaseParticleIndex release_particle_index = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.release_particle_index_);
    }

    // optional .CMsgParticleSystemManager.UpdateParticle update_particle = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_particle_);
    }

    // optional .CMsgParticleSystemManager.UpdateParticleFwd update_particle_fwd = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_particle_fwd_);
    }

    // optional .CMsgParticleSystemManager.UpdateParticleOrient update_particle_orient = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_particle_orient_);
    }

    // optional .CMsgParticleSystemManager.UpdateParticleFallback update_particle_fallback = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_particle_fallback_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .CMsgParticleSystemManager.UpdateParticleOffset update_particle_offset = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_particle_offset_);
    }

    // optional .CMsgParticleSystemManager.UpdateParticleEnt update_particle_ent = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_particle_ent_);
    }

    // optional .CMsgParticleSystemManager.UpdateParticleFrozen update_particle_frozen = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_particle_frozen_);
    }

    // optional .CMsgParticleSystemManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_particle_should_draw_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgParticleSystemManager::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgParticleSystemManager::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgParticleSystemManager::GetClassData() const { return &_class_data_; }


void CMsgParticleSystemManager::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgParticleSystemManager*>(&to_msg);
  auto& from = static_cast<const CMsgParticleSystemManager&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgParticleSystemManager)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_create_particle()->::CMsgParticleSystemManager_CreateParticle::MergeFrom(
          from._internal_create_particle());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_destroy_particle()->::CMsgParticleSystemManager_DestroyParticle::MergeFrom(
          from._internal_destroy_particle());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_destroy_particle_involving()->::CMsgParticleSystemManager_DestroyParticleInvolving::MergeFrom(
          from._internal_destroy_particle_involving());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_release_particle_index()->::CMsgParticleSystemManager_ReleaseParticleIndex::MergeFrom(
          from._internal_release_particle_index());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_update_particle()->::CMsgParticleSystemManager_UpdateParticle::MergeFrom(
          from._internal_update_particle());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_update_particle_fwd()->::CMsgParticleSystemManager_UpdateParticleFwd::MergeFrom(
          from._internal_update_particle_fwd());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_update_particle_orient()->::CMsgParticleSystemManager_UpdateParticleOrient::MergeFrom(
          from._internal_update_particle_orient());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_update_particle_fallback()->::CMsgParticleSystemManager_UpdateParticleFallback::MergeFrom(
          from._internal_update_particle_fallback());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_update_particle_offset()->::CMsgParticleSystemManager_UpdateParticleOffset::MergeFrom(
          from._internal_update_particle_offset());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_update_particle_ent()->::CMsgParticleSystemManager_UpdateParticleEnt::MergeFrom(
          from._internal_update_particle_ent());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_update_particle_frozen()->::CMsgParticleSystemManager_UpdateParticleFrozen::MergeFrom(
          from._internal_update_particle_frozen());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_update_particle_should_draw()->::CMsgParticleSystemManager_UpdateParticleShouldDraw::MergeFrom(
          from._internal_update_particle_should_draw());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgParticleSystemManager::CopyFrom(const CMsgParticleSystemManager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgParticleSystemManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgParticleSystemManager::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CMsgParticleSystemManager::InternalSwap(CMsgParticleSystemManager* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgParticleSystemManager, _impl_.index_)
      + sizeof(CMsgParticleSystemManager::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(CMsgParticleSystemManager, _impl_.create_particle_)>(
          reinterpret_cast<char*>(&_impl_.create_particle_),
          reinterpret_cast<char*>(&other->_impl_.create_particle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgParticleSystemManager::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgameevents_2eproto_getter, &descriptor_table_citadel_5fgameevents_2eproto_once,
      file_level_metadata_citadel_5fgameevents_2eproto[16]);
}

// ===================================================================

class CMsgScreenTextPretty::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgScreenTextPretty>()._impl_._has_bits_);
  static void set_has_x_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_line(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_r(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_g(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_font_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_font_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_bold_font(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

CMsgScreenTextPretty::CMsgScreenTextPretty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgScreenTextPretty)
}
CMsgScreenTextPretty::CMsgScreenTextPretty(const CMsgScreenTextPretty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgScreenTextPretty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.font_name_){}
    , decltype(_impl_.x_pos_){}
    , decltype(_impl_.y_pos_){}
    , decltype(_impl_.line_){}
    , decltype(_impl_.r_){}
    , decltype(_impl_.g_){}
    , decltype(_impl_.b_){}
    , decltype(_impl_.a_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.font_size_){}
    , decltype(_impl_.bold_font_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.font_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.font_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_font_name()) {
    _this->_impl_.font_name_.Set(from._internal_font_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.x_pos_, &from._impl_.x_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bold_font_) -
    reinterpret_cast<char*>(&_impl_.x_pos_)) + sizeof(_impl_.bold_font_));
  // @@protoc_insertion_point(copy_constructor:CMsgScreenTextPretty)
}

inline void CMsgScreenTextPretty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.font_name_){}
    , decltype(_impl_.x_pos_){0}
    , decltype(_impl_.y_pos_){0}
    , decltype(_impl_.line_){0}
    , decltype(_impl_.r_){0}
    , decltype(_impl_.g_){0}
    , decltype(_impl_.b_){0}
    , decltype(_impl_.a_){0}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.font_size_){0}
    , decltype(_impl_.bold_font_){false}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.font_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.font_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgScreenTextPretty::~CMsgScreenTextPretty() {
  // @@protoc_insertion_point(destructor:CMsgScreenTextPretty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgScreenTextPretty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
  _impl_.font_name_.Destroy();
}

void CMsgScreenTextPretty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgScreenTextPretty::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgScreenTextPretty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.font_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.x_pos_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.b_) -
        reinterpret_cast<char*>(&_impl_.x_pos_)) + sizeof(_impl_.b_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bold_font_) -
        reinterpret_cast<char*>(&_impl_.a_)) + sizeof(_impl_.bold_font_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgScreenTextPretty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float x_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x_pos(&has_bits);
          _impl_.x_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y_pos(&has_bits);
          _impl_.y_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 line = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_line(&has_bits);
          _impl_.line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgScreenTextPretty.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 r = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_r(&has_bits);
          _impl_.r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 g = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_g(&has_bits);
          _impl_.g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 b = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_b(&has_bits);
          _impl_.b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 a = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_a(&has_bits);
          _impl_.a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float duration = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string font_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_font_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgScreenTextPretty.font_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 font_size = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_font_size(&has_bits);
          _impl_.font_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bold_font = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_bold_font(&has_bits);
          _impl_.bold_font_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgScreenTextPretty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgScreenTextPretty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float x_pos = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x_pos(), target);
  }

  // optional float y_pos = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y_pos(), target);
  }

  // optional int32 line = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_line(), target);
  }

  // optional string text = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgScreenTextPretty.text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_text(), target);
  }

  // optional int32 r = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_r(), target);
  }

  // optional int32 g = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_g(), target);
  }

  // optional int32 b = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_b(), target);
  }

  // optional int32 a = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_a(), target);
  }

  // optional float duration = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_duration(), target);
  }

  // optional string font_name = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_font_name().data(), static_cast<int>(this->_internal_font_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgScreenTextPretty.font_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_font_name(), target);
  }

  // optional int32 font_size = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_font_size(), target);
  }

  // optional bool bold_font = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_bold_font(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgScreenTextPretty)
  return target;
}

size_t CMsgScreenTextPretty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgScreenTextPretty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string text = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional string font_name = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_font_name());
    }

    // optional float x_pos = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float y_pos = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 line = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_line());
    }

    // optional int32 r = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_r());
    }

    // optional int32 g = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_g());
    }

    // optional int32 b = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_b());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int32 a = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a());
    }

    // optional float duration = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional int32 font_size = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_font_size());
    }

    // optional bool bold_font = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgScreenTextPretty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgScreenTextPretty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgScreenTextPretty::GetClassData() const { return &_class_data_; }


void CMsgScreenTextPretty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgScreenTextPretty*>(&to_msg);
  auto& from = static_cast<const CMsgScreenTextPretty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgScreenTextPretty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_font_name(from._internal_font_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.x_pos_ = from._impl_.x_pos_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.y_pos_ = from._impl_.y_pos_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.line_ = from._impl_.line_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.r_ = from._impl_.r_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.g_ = from._impl_.g_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.b_ = from._impl_.b_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.a_ = from._impl_.a_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.font_size_ = from._impl_.font_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.bold_font_ = from._impl_.bold_font_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgScreenTextPretty::CopyFrom(const CMsgScreenTextPretty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgScreenTextPretty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgScreenTextPretty::IsInitialized() const {
  return true;
}

void CMsgScreenTextPretty::InternalSwap(CMsgScreenTextPretty* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.font_name_, lhs_arena,
      &other->_impl_.font_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgScreenTextPretty, _impl_.bold_font_)
      + sizeof(CMsgScreenTextPretty::_impl_.bold_font_)
      - PROTOBUF_FIELD_OFFSET(CMsgScreenTextPretty, _impl_.x_pos_)>(
          reinterpret_cast<char*>(&_impl_.x_pos_),
          reinterpret_cast<char*>(&other->_impl_.x_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgScreenTextPretty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgameevents_2eproto_getter, &descriptor_table_citadel_5fgameevents_2eproto_once,
      file_level_metadata_citadel_5fgameevents_2eproto[17]);
}

// ===================================================================

class CMsgServerRequestedTracer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerRequestedTracer>()._impl_._has_bits_);
  static const ::CMsgVector& origin(const CMsgServerRequestedTracer* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgVector& end(const CMsgServerRequestedTracer* msg);
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_weaponid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_entity_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgVector&
CMsgServerRequestedTracer::_Internal::origin(const CMsgServerRequestedTracer* msg) {
  return *msg->_impl_.origin_;
}
const ::CMsgVector&
CMsgServerRequestedTracer::_Internal::end(const CMsgServerRequestedTracer* msg) {
  return *msg->_impl_.end_;
}
void CMsgServerRequestedTracer::clear_origin() {
  if (_impl_.origin_ != nullptr) _impl_.origin_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CMsgServerRequestedTracer::clear_end() {
  if (_impl_.end_ != nullptr) _impl_.end_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CMsgServerRequestedTracer::CMsgServerRequestedTracer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerRequestedTracer)
}
CMsgServerRequestedTracer::CMsgServerRequestedTracer(const CMsgServerRequestedTracer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerRequestedTracer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.origin_){nullptr}
    , decltype(_impl_.end_){nullptr}
    , decltype(_impl_.dps_){}
    , decltype(_impl_.weaponid_){}
    , decltype(_impl_.entity_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    _this->_impl_.origin_ = new ::CMsgVector(*from._impl_.origin_);
  }
  if (from._internal_has_end()) {
    _this->_impl_.end_ = new ::CMsgVector(*from._impl_.end_);
  }
  ::memcpy(&_impl_.dps_, &from._impl_.dps_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entity_handle_) -
    reinterpret_cast<char*>(&_impl_.dps_)) + sizeof(_impl_.entity_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerRequestedTracer)
}

inline void CMsgServerRequestedTracer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.origin_){nullptr}
    , decltype(_impl_.end_){nullptr}
    , decltype(_impl_.dps_){0}
    , decltype(_impl_.weaponid_){-1}
    , decltype(_impl_.entity_handle_){16777215u}
  };
}

CMsgServerRequestedTracer::~CMsgServerRequestedTracer() {
  // @@protoc_insertion_point(destructor:CMsgServerRequestedTracer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerRequestedTracer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.origin_;
  if (this != internal_default_instance()) delete _impl_.end_;
}

void CMsgServerRequestedTracer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerRequestedTracer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerRequestedTracer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.origin_ != nullptr);
      _impl_.origin_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.end_ != nullptr);
      _impl_.end_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    _impl_.dps_ = 0;
    _impl_.weaponid_ = -1;
    _impl_.entity_handle_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerRequestedTracer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgVector origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 weaponid = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_weaponid(&has_bits);
          _impl_.weaponid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 entity_handle = 4 [default = 16777215];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_entity_handle(&has_bits);
          _impl_.entity_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float dps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_dps(&has_bits);
          _impl_.dps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerRequestedTracer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerRequestedTracer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::origin(this),
        _Internal::origin(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgVector end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::end(this),
        _Internal::end(this).GetCachedSize(), target, stream);
  }

  // optional int32 weaponid = 3 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_weaponid(), target);
  }

  // optional uint32 entity_handle = 4 [default = 16777215];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_entity_handle(), target);
  }

  // optional float dps = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_dps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerRequestedTracer)
  return target;
}

size_t CMsgServerRequestedTracer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerRequestedTracer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgVector origin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.origin_);
    }

    // optional .CMsgVector end = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.end_);
    }

    // optional float dps = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 weaponid = 3 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_weaponid());
    }

    // optional uint32 entity_handle = 4 [default = 16777215];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_handle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerRequestedTracer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerRequestedTracer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerRequestedTracer::GetClassData() const { return &_class_data_; }


void CMsgServerRequestedTracer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerRequestedTracer*>(&to_msg);
  auto& from = static_cast<const CMsgServerRequestedTracer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerRequestedTracer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_origin()->::CMsgVector::MergeFrom(
          from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_end()->::CMsgVector::MergeFrom(
          from._internal_end());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dps_ = from._impl_.dps_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.weaponid_ = from._impl_.weaponid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.entity_handle_ = from._impl_.entity_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerRequestedTracer::CopyFrom(const CMsgServerRequestedTracer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerRequestedTracer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerRequestedTracer::IsInitialized() const {
  return true;
}

void CMsgServerRequestedTracer::InternalSwap(CMsgServerRequestedTracer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerRequestedTracer, _impl_.dps_)
      + sizeof(CMsgServerRequestedTracer::_impl_.dps_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerRequestedTracer, _impl_.origin_)>(
          reinterpret_cast<char*>(&_impl_.origin_),
          reinterpret_cast<char*>(&other->_impl_.origin_));
  swap(_impl_.weaponid_, other->_impl_.weaponid_);
  swap(_impl_.entity_handle_, other->_impl_.entity_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerRequestedTracer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgameevents_2eproto_getter, &descriptor_table_citadel_5fgameevents_2eproto_once,
      file_level_metadata_citadel_5fgameevents_2eproto[18]);
}

// ===================================================================

class CMsgEnableSatVolumesEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgEnableSatVolumesEvent>()._impl_._has_bits_);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_desat_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sat_tint(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_desat_tint(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_outline_color(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgEnableSatVolumesEvent::CMsgEnableSatVolumesEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgEnableSatVolumesEvent)
}
CMsgEnableSatVolumesEvent::CMsgEnableSatVolumesEvent(const CMsgEnableSatVolumesEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgEnableSatVolumesEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.desat_amount_){}
    , decltype(_impl_.sat_tint_){}
    , decltype(_impl_.desat_tint_){}
    , decltype(_impl_.outline_color_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mode_, &from._impl_.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.outline_color_) -
    reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.outline_color_));
  // @@protoc_insertion_point(copy_constructor:CMsgEnableSatVolumesEvent)
}

inline void CMsgEnableSatVolumesEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mode_){0u}
    , decltype(_impl_.desat_amount_){0}
    , decltype(_impl_.sat_tint_){0u}
    , decltype(_impl_.desat_tint_){0u}
    , decltype(_impl_.outline_color_){0u}
  };
}

CMsgEnableSatVolumesEvent::~CMsgEnableSatVolumesEvent() {
  // @@protoc_insertion_point(destructor:CMsgEnableSatVolumesEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgEnableSatVolumesEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgEnableSatVolumesEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgEnableSatVolumesEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgEnableSatVolumesEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.outline_color_) -
        reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.outline_color_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgEnableSatVolumesEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mode(&has_bits);
          _impl_.mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float desat_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_desat_amount(&has_bits);
          _impl_.desat_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 sat_tint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_sat_tint(&has_bits);
          _impl_.sat_tint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 desat_tint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_desat_tint(&has_bits);
          _impl_.desat_tint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 outline_color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_outline_color(&has_bits);
          _impl_.outline_color_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgEnableSatVolumesEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgEnableSatVolumesEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mode(), target);
  }

  // optional float desat_amount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_desat_amount(), target);
  }

  // optional fixed32 sat_tint = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(3, this->_internal_sat_tint(), target);
  }

  // optional fixed32 desat_tint = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(4, this->_internal_desat_tint(), target);
  }

  // optional fixed32 outline_color = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(5, this->_internal_outline_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgEnableSatVolumesEvent)
  return target;
}

size_t CMsgEnableSatVolumesEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgEnableSatVolumesEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 mode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mode());
    }

    // optional float desat_amount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional fixed32 sat_tint = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional fixed32 desat_tint = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional fixed32 outline_color = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgEnableSatVolumesEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgEnableSatVolumesEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgEnableSatVolumesEvent::GetClassData() const { return &_class_data_; }


void CMsgEnableSatVolumesEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgEnableSatVolumesEvent*>(&to_msg);
  auto& from = static_cast<const CMsgEnableSatVolumesEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgEnableSatVolumesEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mode_ = from._impl_.mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.desat_amount_ = from._impl_.desat_amount_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.sat_tint_ = from._impl_.sat_tint_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.desat_tint_ = from._impl_.desat_tint_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.outline_color_ = from._impl_.outline_color_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgEnableSatVolumesEvent::CopyFrom(const CMsgEnableSatVolumesEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgEnableSatVolumesEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgEnableSatVolumesEvent::IsInitialized() const {
  return true;
}

void CMsgEnableSatVolumesEvent::InternalSwap(CMsgEnableSatVolumesEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgEnableSatVolumesEvent, _impl_.outline_color_)
      + sizeof(CMsgEnableSatVolumesEvent::_impl_.outline_color_)
      - PROTOBUF_FIELD_OFFSET(CMsgEnableSatVolumesEvent, _impl_.mode_)>(
          reinterpret_cast<char*>(&_impl_.mode_),
          reinterpret_cast<char*>(&other->_impl_.mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgEnableSatVolumesEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgameevents_2eproto_getter, &descriptor_table_citadel_5fgameevents_2eproto_once,
      file_level_metadata_citadel_5fgameevents_2eproto[19]);
}

// ===================================================================

class CMsgPlaceSatVolumeEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPlaceSatVolumeEvent>()._impl_._has_bits_);
  static const ::CMsgVector& position(const CMsgPlaceSatVolumeEvent* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgVector& direction(const CMsgPlaceSatVolumeEvent* msg);
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_falloff_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_theta_dot(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_phi_dot(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_entity_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_attachment_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_volume_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::CMsgVector&
CMsgPlaceSatVolumeEvent::_Internal::position(const CMsgPlaceSatVolumeEvent* msg) {
  return *msg->_impl_.position_;
}
const ::CMsgVector&
CMsgPlaceSatVolumeEvent::_Internal::direction(const CMsgPlaceSatVolumeEvent* msg) {
  return *msg->_impl_.direction_;
}
void CMsgPlaceSatVolumeEvent::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CMsgPlaceSatVolumeEvent::clear_direction() {
  if (_impl_.direction_ != nullptr) _impl_.direction_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CMsgPlaceSatVolumeEvent::CMsgPlaceSatVolumeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPlaceSatVolumeEvent)
}
CMsgPlaceSatVolumeEvent::CMsgPlaceSatVolumeEvent(const CMsgPlaceSatVolumeEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPlaceSatVolumeEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.direction_){nullptr}
    , decltype(_impl_.radius_){}
    , decltype(_impl_.falloff_distance_){}
    , decltype(_impl_.theta_dot_){}
    , decltype(_impl_.phi_dot_){}
    , decltype(_impl_.attachment_handle_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.volume_id_){}
    , decltype(_impl_.entity_handle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::CMsgVector(*from._impl_.position_);
  }
  if (from._internal_has_direction()) {
    _this->_impl_.direction_ = new ::CMsgVector(*from._impl_.direction_);
  }
  ::memcpy(&_impl_.radius_, &from._impl_.radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entity_handle_) -
    reinterpret_cast<char*>(&_impl_.radius_)) + sizeof(_impl_.entity_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgPlaceSatVolumeEvent)
}

inline void CMsgPlaceSatVolumeEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.direction_){nullptr}
    , decltype(_impl_.radius_){0}
    , decltype(_impl_.falloff_distance_){0}
    , decltype(_impl_.theta_dot_){0}
    , decltype(_impl_.phi_dot_){0}
    , decltype(_impl_.attachment_handle_){0u}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.volume_id_){0}
    , decltype(_impl_.entity_handle_){16777215u}
  };
}

CMsgPlaceSatVolumeEvent::~CMsgPlaceSatVolumeEvent() {
  // @@protoc_insertion_point(destructor:CMsgPlaceSatVolumeEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPlaceSatVolumeEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.direction_;
}

void CMsgPlaceSatVolumeEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPlaceSatVolumeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPlaceSatVolumeEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.direction_ != nullptr);
      _impl_.direction_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.radius_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.radius_)) + sizeof(_impl_.type_));
  }
  if (cached_has_bits & 0x00000300u) {
    _impl_.volume_id_ = 0;
    _impl_.entity_handle_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPlaceSatVolumeEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgVector position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float radius = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_radius(&has_bits);
          _impl_.radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float falloff_distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_falloff_distance(&has_bits);
          _impl_.falloff_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float theta_dot = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_theta_dot(&has_bits);
          _impl_.theta_dot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float phi_dot = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_phi_dot(&has_bits);
          _impl_.phi_dot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 entity_handle = 7 [default = 16777215];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_entity_handle(&has_bits);
          _impl_.entity_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 attachment_handle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_attachment_handle(&has_bits);
          _impl_.attachment_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 volume_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_volume_id(&has_bits);
          _impl_.volume_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPlaceSatVolumeEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPlaceSatVolumeEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgVector position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgVector direction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::direction(this),
        _Internal::direction(this).GetCachedSize(), target, stream);
  }

  // optional float radius = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_radius(), target);
  }

  // optional float falloff_distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_falloff_distance(), target);
  }

  // optional float theta_dot = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_theta_dot(), target);
  }

  // optional float phi_dot = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_phi_dot(), target);
  }

  // optional uint32 entity_handle = 7 [default = 16777215];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_entity_handle(), target);
  }

  // optional uint32 attachment_handle = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_attachment_handle(), target);
  }

  // optional uint32 type = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_type(), target);
  }

  // optional int32 volume_id = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_volume_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPlaceSatVolumeEvent)
  return target;
}

size_t CMsgPlaceSatVolumeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPlaceSatVolumeEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgVector position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // optional .CMsgVector direction = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.direction_);
    }

    // optional float radius = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float falloff_distance = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float theta_dot = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float phi_dot = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 attachment_handle = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attachment_handle());
    }

    // optional uint32 type = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 volume_id = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_volume_id());
    }

    // optional uint32 entity_handle = 7 [default = 16777215];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_handle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPlaceSatVolumeEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPlaceSatVolumeEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPlaceSatVolumeEvent::GetClassData() const { return &_class_data_; }


void CMsgPlaceSatVolumeEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPlaceSatVolumeEvent*>(&to_msg);
  auto& from = static_cast<const CMsgPlaceSatVolumeEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPlaceSatVolumeEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::CMsgVector::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_direction()->::CMsgVector::MergeFrom(
          from._internal_direction());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.radius_ = from._impl_.radius_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.falloff_distance_ = from._impl_.falloff_distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.theta_dot_ = from._impl_.theta_dot_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.phi_dot_ = from._impl_.phi_dot_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.attachment_handle_ = from._impl_.attachment_handle_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.volume_id_ = from._impl_.volume_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.entity_handle_ = from._impl_.entity_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPlaceSatVolumeEvent::CopyFrom(const CMsgPlaceSatVolumeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPlaceSatVolumeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlaceSatVolumeEvent::IsInitialized() const {
  return true;
}

void CMsgPlaceSatVolumeEvent::InternalSwap(CMsgPlaceSatVolumeEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPlaceSatVolumeEvent, _impl_.volume_id_)
      + sizeof(CMsgPlaceSatVolumeEvent::_impl_.volume_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgPlaceSatVolumeEvent, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
  swap(_impl_.entity_handle_, other->_impl_.entity_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPlaceSatVolumeEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgameevents_2eproto_getter, &descriptor_table_citadel_5fgameevents_2eproto_once,
      file_level_metadata_citadel_5fgameevents_2eproto[20]);
}

// ===================================================================

class CMsgRemoveSatVolumeEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRemoveSatVolumeEvent>()._impl_._has_bits_);
  static void set_has_volume_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgRemoveSatVolumeEvent::CMsgRemoveSatVolumeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgRemoveSatVolumeEvent)
}
CMsgRemoveSatVolumeEvent::CMsgRemoveSatVolumeEvent(const CMsgRemoveSatVolumeEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgRemoveSatVolumeEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.volume_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.volume_id_ = from._impl_.volume_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgRemoveSatVolumeEvent)
}

inline void CMsgRemoveSatVolumeEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.volume_id_){0}
  };
}

CMsgRemoveSatVolumeEvent::~CMsgRemoveSatVolumeEvent() {
  // @@protoc_insertion_point(destructor:CMsgRemoveSatVolumeEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgRemoveSatVolumeEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgRemoveSatVolumeEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgRemoveSatVolumeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRemoveSatVolumeEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.volume_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRemoveSatVolumeEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 volume_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_volume_id(&has_bits);
          _impl_.volume_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgRemoveSatVolumeEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRemoveSatVolumeEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 volume_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_volume_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRemoveSatVolumeEvent)
  return target;
}

size_t CMsgRemoveSatVolumeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRemoveSatVolumeEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 volume_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_volume_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgRemoveSatVolumeEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgRemoveSatVolumeEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgRemoveSatVolumeEvent::GetClassData() const { return &_class_data_; }


void CMsgRemoveSatVolumeEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgRemoveSatVolumeEvent*>(&to_msg);
  auto& from = static_cast<const CMsgRemoveSatVolumeEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgRemoveSatVolumeEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_volume_id()) {
    _this->_internal_set_volume_id(from._internal_volume_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgRemoveSatVolumeEvent::CopyFrom(const CMsgRemoveSatVolumeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRemoveSatVolumeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoveSatVolumeEvent::IsInitialized() const {
  return true;
}

void CMsgRemoveSatVolumeEvent::InternalSwap(CMsgRemoveSatVolumeEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.volume_id_, other->_impl_.volume_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRemoveSatVolumeEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgameevents_2eproto_getter, &descriptor_table_citadel_5fgameevents_2eproto_once,
      file_level_metadata_citadel_5fgameevents_2eproto[21]);
}

// ===================================================================

class CMsgDisableSatVolumesEvent::_Internal {
 public:
};

CMsgDisableSatVolumesEvent::CMsgDisableSatVolumesEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgDisableSatVolumesEvent)
}
CMsgDisableSatVolumesEvent::CMsgDisableSatVolumesEvent(const CMsgDisableSatVolumesEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgDisableSatVolumesEvent* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDisableSatVolumesEvent)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDisableSatVolumesEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDisableSatVolumesEvent::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgDisableSatVolumesEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgameevents_2eproto_getter, &descriptor_table_citadel_5fgameevents_2eproto_once,
      file_level_metadata_citadel_5fgameevents_2eproto[22]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgFireBullets_TracerAssignment*
Arena::CreateMaybeMessage< ::CMsgFireBullets_TracerAssignment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFireBullets_TracerAssignment >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgFireBullets*
Arena::CreateMaybeMessage< ::CMsgFireBullets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFireBullets >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBulletImpact*
Arena::CreateMaybeMessage< ::CMsgBulletImpact >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBulletImpact >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPlayerAnimEvent*
Arena::CreateMaybeMessage< ::CMsgPlayerAnimEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPlayerAnimEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgParticleSystemManager_CreateParticle*
Arena::CreateMaybeMessage< ::CMsgParticleSystemManager_CreateParticle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgParticleSystemManager_CreateParticle >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgParticleSystemManager_DestroyParticle*
Arena::CreateMaybeMessage< ::CMsgParticleSystemManager_DestroyParticle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgParticleSystemManager_DestroyParticle >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgParticleSystemManager_DestroyParticleInvolving*
Arena::CreateMaybeMessage< ::CMsgParticleSystemManager_DestroyParticleInvolving >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgParticleSystemManager_DestroyParticleInvolving >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgParticleSystemManager_ReleaseParticleIndex*
Arena::CreateMaybeMessage< ::CMsgParticleSystemManager_ReleaseParticleIndex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgParticleSystemManager_ReleaseParticleIndex >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgParticleSystemManager_UpdateParticle*
Arena::CreateMaybeMessage< ::CMsgParticleSystemManager_UpdateParticle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgParticleSystemManager_UpdateParticle >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgParticleSystemManager_UpdateParticleFwd*
Arena::CreateMaybeMessage< ::CMsgParticleSystemManager_UpdateParticleFwd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgParticleSystemManager_UpdateParticleFwd >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgParticleSystemManager_UpdateParticleOrient*
Arena::CreateMaybeMessage< ::CMsgParticleSystemManager_UpdateParticleOrient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgParticleSystemManager_UpdateParticleOrient >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgParticleSystemManager_UpdateParticleFallback*
Arena::CreateMaybeMessage< ::CMsgParticleSystemManager_UpdateParticleFallback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgParticleSystemManager_UpdateParticleFallback >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgParticleSystemManager_UpdateParticleEnt*
Arena::CreateMaybeMessage< ::CMsgParticleSystemManager_UpdateParticleEnt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgParticleSystemManager_UpdateParticleEnt >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgParticleSystemManager_UpdateParticleOffset*
Arena::CreateMaybeMessage< ::CMsgParticleSystemManager_UpdateParticleOffset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgParticleSystemManager_UpdateParticleOffset >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgParticleSystemManager_UpdateParticleFrozen*
Arena::CreateMaybeMessage< ::CMsgParticleSystemManager_UpdateParticleFrozen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgParticleSystemManager_UpdateParticleFrozen >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgParticleSystemManager_UpdateParticleShouldDraw*
Arena::CreateMaybeMessage< ::CMsgParticleSystemManager_UpdateParticleShouldDraw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgParticleSystemManager_UpdateParticleShouldDraw >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgParticleSystemManager*
Arena::CreateMaybeMessage< ::CMsgParticleSystemManager >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgParticleSystemManager >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgScreenTextPretty*
Arena::CreateMaybeMessage< ::CMsgScreenTextPretty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgScreenTextPretty >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerRequestedTracer*
Arena::CreateMaybeMessage< ::CMsgServerRequestedTracer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerRequestedTracer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgEnableSatVolumesEvent*
Arena::CreateMaybeMessage< ::CMsgEnableSatVolumesEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgEnableSatVolumesEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPlaceSatVolumeEvent*
Arena::CreateMaybeMessage< ::CMsgPlaceSatVolumeEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPlaceSatVolumeEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRemoveSatVolumeEvent*
Arena::CreateMaybeMessage< ::CMsgRemoveSatVolumeEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRemoveSatVolumeEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDisableSatVolumesEvent*
Arena::CreateMaybeMessage< ::CMsgDisableSatVolumesEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDisableSatVolumesEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
