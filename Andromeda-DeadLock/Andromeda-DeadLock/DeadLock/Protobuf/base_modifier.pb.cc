// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base_modifier.proto

#include "base_modifier.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CModifierTableEntry::CModifierTableEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.string1__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.string2__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.string3__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.string4__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vec1__)*/nullptr
  , /*decltype(_impl_.vec2__)*/nullptr
  , /*decltype(_impl_.vec3__)*/nullptr
  , /*decltype(_impl_.vec4__)*/nullptr
  , /*decltype(_impl_.serial_number_)*/0u
  , /*decltype(_impl_.modifier_subclass_)*/0u
  , /*decltype(_impl_.stack_count_)*/0
  , /*decltype(_impl_.max_stack_count_)*/0
  , /*decltype(_impl_.last_applied_time_)*/0
  , /*decltype(_impl_.aura_provider_serial_number_)*/0
  , /*decltype(_impl_.ability_subclass_)*/0u
  , /*decltype(_impl_.bool1__)*/false
  , /*decltype(_impl_.bool2__)*/false
  , /*decltype(_impl_.bool3__)*/false
  , /*decltype(_impl_.bool4__)*/false
  , /*decltype(_impl_.int1__)*/0
  , /*decltype(_impl_.int2__)*/0
  , /*decltype(_impl_.int3__)*/0
  , /*decltype(_impl_.int4__)*/0
  , /*decltype(_impl_.float1__)*/0
  , /*decltype(_impl_.float2__)*/0
  , /*decltype(_impl_.float3__)*/0
  , /*decltype(_impl_.float4__)*/0
  , /*decltype(_impl_.uint1__)*/uint64_t{0u}
  , /*decltype(_impl_.uint2__)*/uint64_t{0u}
  , /*decltype(_impl_.uint3__)*/uint64_t{0u}
  , /*decltype(_impl_.uint4__)*/uint64_t{0u}
  , /*decltype(_impl_.float5__)*/0
  , /*decltype(_impl_.float6__)*/0
  , /*decltype(_impl_.float7__)*/0
  , /*decltype(_impl_.float8__)*/0
  , /*decltype(_impl_.float9__)*/0
  , /*decltype(_impl_.float10__)*/0
  , /*decltype(_impl_.entry_type_)*/1
  , /*decltype(_impl_.parent_)*/16777215u
  , /*decltype(_impl_.duration_)*/-1
  , /*decltype(_impl_.caster_)*/16777215u
  , /*decltype(_impl_.ability_)*/16777215u
  , /*decltype(_impl_.aura_provider_ehandle_)*/16777215u} {}
struct CModifierTableEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CModifierTableEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CModifierTableEntryDefaultTypeInternal() {}
  union {
    CModifierTableEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CModifierTableEntryDefaultTypeInternal _CModifierTableEntry_default_instance_;
static ::_pb::Metadata file_level_metadata_base_5fmodifier_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_base_5fmodifier_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_base_5fmodifier_2eproto = nullptr;

const uint32_t TableStruct_base_5fmodifier_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.entry_type_),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.serial_number_),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.modifier_subclass_),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.stack_count_),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.max_stack_count_),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.last_applied_time_),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.caster_),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.ability_),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.aura_provider_serial_number_),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.aura_provider_ehandle_),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.ability_subclass_),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.bool1__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.bool2__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.bool3__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.bool4__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.int1__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.int2__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.int3__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.int4__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.float1__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.float2__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.float3__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.float4__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.float5__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.float6__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.float7__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.float8__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.float9__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.float10__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.uint1__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.uint2__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.uint3__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.uint4__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.vec1__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.vec2__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.vec3__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.vec4__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.string1__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.string2__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.string3__),
  PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.string4__),
  37,
  38,
  8,
  9,
  10,
  11,
  12,
  39,
  40,
  41,
  13,
  42,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  31,
  32,
  33,
  34,
  35,
  36,
  27,
  28,
  29,
  30,
  4,
  5,
  6,
  7,
  0,
  1,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 49, -1, sizeof(::CModifierTableEntry)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CModifierTableEntry_default_instance_._instance,
};

const char descriptor_table_protodef_base_5fmodifier_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023base_modifier.proto\032\026networkbasetypes."
  "proto\"\302\007\n\023CModifierTableEntry\022D\n\nentry_t"
  "ype\030\001 \002(\0162\024.MODIFIER_ENTRY_TYPE:\032MODIFIE"
  "R_ENTRY_TYPE_ACTIVE\022\030\n\006parent\030\002 \002(\r:\010167"
  "77215\022\025\n\rserial_number\030\003 \002(\r\022\031\n\021modifier"
  "_subclass\030\004 \001(\r\022\023\n\013stack_count\030\005 \001(\005\022\027\n\017"
  "max_stack_count\030\006 \001(\005\022\031\n\021last_applied_ti"
  "me\030\007 \001(\002\022\024\n\010duration\030\010 \001(\002:\002-1\022\030\n\006caster"
  "\030\t \001(\r:\01016777215\022\031\n\007ability\030\n \001(\r:\01016777"
  "215\022#\n\033aura_provider_serial_number\030\013 \001(\005"
  "\022\'\n\025aura_provider_ehandle\030\014 \001(\r:\0101677721"
  "5\022\030\n\020ability_subclass\030\r \001(\r\022\016\n\006bool1_\030\024 "
  "\001(\010\022\016\n\006bool2_\030\025 \001(\010\022\016\n\006bool3_\030\026 \001(\010\022\016\n\006b"
  "ool4_\030\027 \001(\010\022\r\n\005int1_\030\031 \001(\005\022\r\n\005int2_\030\032 \001("
  "\005\022\r\n\005int3_\030\033 \001(\005\022\r\n\005int4_\030\034 \001(\005\022\017\n\007float"
  "1_\030\036 \001(\002\022\017\n\007float2_\030\037 \001(\002\022\017\n\007float3_\030  \001"
  "(\002\022\017\n\007float4_\030! \001(\002\022\017\n\007float5_\0301 \001(\002\022\017\n\007"
  "float6_\0302 \001(\002\022\017\n\007float7_\0303 \001(\002\022\017\n\007float8"
  "_\0304 \001(\002\022\017\n\007float9_\0305 \001(\002\022\020\n\010float10_\0306 \001"
  "(\002\022\016\n\006uint1_\030# \001(\004\022\016\n\006uint2_\030$ \001(\004\022\016\n\006ui"
  "nt3_\030% \001(\004\022\016\n\006uint4_\030& \001(\004\022\032\n\005vec1_\030( \001("
  "\0132\013.CMsgVector\022\032\n\005vec2_\030) \001(\0132\013.CMsgVect"
  "or\022\032\n\005vec3_\030* \001(\0132\013.CMsgVector\022\032\n\005vec4_\030"
  "+ \001(\0132\013.CMsgVector\022\020\n\010string1_\030- \001(\t\022\020\n\010"
  "string2_\030. \001(\t\022\020\n\010string3_\030/ \001(\t\022\020\n\010stri"
  "ng4_\0300 \001(\t*V\n\023MODIFIER_ENTRY_TYPE\022\036\n\032MOD"
  "IFIER_ENTRY_TYPE_ACTIVE\020\001\022\037\n\033MODIFIER_EN"
  "TRY_TYPE_REMOVED\020\002"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_base_5fmodifier_2eproto_deps[1] = {
  &::descriptor_table_networkbasetypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_base_5fmodifier_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_base_5fmodifier_2eproto = {
    false, false, 1098, descriptor_table_protodef_base_5fmodifier_2eproto,
    "base_modifier.proto",
    &descriptor_table_base_5fmodifier_2eproto_once, descriptor_table_base_5fmodifier_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_base_5fmodifier_2eproto::offsets,
    file_level_metadata_base_5fmodifier_2eproto, file_level_enum_descriptors_base_5fmodifier_2eproto,
    file_level_service_descriptors_base_5fmodifier_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_base_5fmodifier_2eproto_getter() {
  return &descriptor_table_base_5fmodifier_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_base_5fmodifier_2eproto(&descriptor_table_base_5fmodifier_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MODIFIER_ENTRY_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_5fmodifier_2eproto);
  return file_level_enum_descriptors_base_5fmodifier_2eproto[0];
}
bool MODIFIER_ENTRY_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CModifierTableEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CModifierTableEntry>()._impl_._has_bits_);
  static void set_has_entry_type(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_modifier_subclass(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_stack_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_max_stack_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_last_applied_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_caster(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_ability(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_aura_provider_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_aura_provider_ehandle(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_ability_subclass(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_bool1_(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_bool2_(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_bool3_(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_bool4_(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_int1_(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_int2_(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_int3_(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_int4_(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_float1_(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_float2_(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_float3_(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_float4_(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_float5_(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_float6_(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_float7_(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_float8_(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_float9_(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_float10_(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_uint1_(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_uint2_(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_uint3_(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_uint4_(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::CMsgVector& vec1_(const CModifierTableEntry* msg);
  static void set_has_vec1_(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgVector& vec2_(const CModifierTableEntry* msg);
  static void set_has_vec2_(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgVector& vec3_(const CModifierTableEntry* msg);
  static void set_has_vec3_(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CMsgVector& vec4_(const CModifierTableEntry* msg);
  static void set_has_vec4_(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_string1_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_string2_(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_string3_(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_string4_(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return (((has_bits[0] & 0x00000100) ^ 0x00000100)
       | ((has_bits[1] & 0x00000060) ^ 0x00000060)) != 0;
  }
};

const ::CMsgVector&
CModifierTableEntry::_Internal::vec1_(const CModifierTableEntry* msg) {
  return *msg->_impl_.vec1__;
}
const ::CMsgVector&
CModifierTableEntry::_Internal::vec2_(const CModifierTableEntry* msg) {
  return *msg->_impl_.vec2__;
}
const ::CMsgVector&
CModifierTableEntry::_Internal::vec3_(const CModifierTableEntry* msg) {
  return *msg->_impl_.vec3__;
}
const ::CMsgVector&
CModifierTableEntry::_Internal::vec4_(const CModifierTableEntry* msg) {
  return *msg->_impl_.vec4__;
}
void CModifierTableEntry::clear_vec1_() {
  if (_impl_.vec1__ != nullptr) _impl_.vec1__->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CModifierTableEntry::clear_vec2_() {
  if (_impl_.vec2__ != nullptr) _impl_.vec2__->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void CModifierTableEntry::clear_vec3_() {
  if (_impl_.vec3__ != nullptr) _impl_.vec3__->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void CModifierTableEntry::clear_vec4_() {
  if (_impl_.vec4__ != nullptr) _impl_.vec4__->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
CModifierTableEntry::CModifierTableEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CModifierTableEntry)
}
CModifierTableEntry::CModifierTableEntry(const CModifierTableEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CModifierTableEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.string1__){}
    , decltype(_impl_.string2__){}
    , decltype(_impl_.string3__){}
    , decltype(_impl_.string4__){}
    , decltype(_impl_.vec1__){nullptr}
    , decltype(_impl_.vec2__){nullptr}
    , decltype(_impl_.vec3__){nullptr}
    , decltype(_impl_.vec4__){nullptr}
    , decltype(_impl_.serial_number_){}
    , decltype(_impl_.modifier_subclass_){}
    , decltype(_impl_.stack_count_){}
    , decltype(_impl_.max_stack_count_){}
    , decltype(_impl_.last_applied_time_){}
    , decltype(_impl_.aura_provider_serial_number_){}
    , decltype(_impl_.ability_subclass_){}
    , decltype(_impl_.bool1__){}
    , decltype(_impl_.bool2__){}
    , decltype(_impl_.bool3__){}
    , decltype(_impl_.bool4__){}
    , decltype(_impl_.int1__){}
    , decltype(_impl_.int2__){}
    , decltype(_impl_.int3__){}
    , decltype(_impl_.int4__){}
    , decltype(_impl_.float1__){}
    , decltype(_impl_.float2__){}
    , decltype(_impl_.float3__){}
    , decltype(_impl_.float4__){}
    , decltype(_impl_.uint1__){}
    , decltype(_impl_.uint2__){}
    , decltype(_impl_.uint3__){}
    , decltype(_impl_.uint4__){}
    , decltype(_impl_.float5__){}
    , decltype(_impl_.float6__){}
    , decltype(_impl_.float7__){}
    , decltype(_impl_.float8__){}
    , decltype(_impl_.float9__){}
    , decltype(_impl_.float10__){}
    , decltype(_impl_.entry_type_){}
    , decltype(_impl_.parent_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.caster_){}
    , decltype(_impl_.ability_){}
    , decltype(_impl_.aura_provider_ehandle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.string1__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string1__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_string1_()) {
    _this->_impl_.string1__.Set(from._internal_string1_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.string2__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string2__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_string2_()) {
    _this->_impl_.string2__.Set(from._internal_string2_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.string3__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string3__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_string3_()) {
    _this->_impl_.string3__.Set(from._internal_string3_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.string4__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string4__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_string4_()) {
    _this->_impl_.string4__.Set(from._internal_string4_(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_vec1_()) {
    _this->_impl_.vec1__ = new ::CMsgVector(*from._impl_.vec1__);
  }
  if (from._internal_has_vec2_()) {
    _this->_impl_.vec2__ = new ::CMsgVector(*from._impl_.vec2__);
  }
  if (from._internal_has_vec3_()) {
    _this->_impl_.vec3__ = new ::CMsgVector(*from._impl_.vec3__);
  }
  if (from._internal_has_vec4_()) {
    _this->_impl_.vec4__ = new ::CMsgVector(*from._impl_.vec4__);
  }
  ::memcpy(&_impl_.serial_number_, &from._impl_.serial_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.aura_provider_ehandle_) -
    reinterpret_cast<char*>(&_impl_.serial_number_)) + sizeof(_impl_.aura_provider_ehandle_));
  // @@protoc_insertion_point(copy_constructor:CModifierTableEntry)
}

inline void CModifierTableEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.string1__){}
    , decltype(_impl_.string2__){}
    , decltype(_impl_.string3__){}
    , decltype(_impl_.string4__){}
    , decltype(_impl_.vec1__){nullptr}
    , decltype(_impl_.vec2__){nullptr}
    , decltype(_impl_.vec3__){nullptr}
    , decltype(_impl_.vec4__){nullptr}
    , decltype(_impl_.serial_number_){0u}
    , decltype(_impl_.modifier_subclass_){0u}
    , decltype(_impl_.stack_count_){0}
    , decltype(_impl_.max_stack_count_){0}
    , decltype(_impl_.last_applied_time_){0}
    , decltype(_impl_.aura_provider_serial_number_){0}
    , decltype(_impl_.ability_subclass_){0u}
    , decltype(_impl_.bool1__){false}
    , decltype(_impl_.bool2__){false}
    , decltype(_impl_.bool3__){false}
    , decltype(_impl_.bool4__){false}
    , decltype(_impl_.int1__){0}
    , decltype(_impl_.int2__){0}
    , decltype(_impl_.int3__){0}
    , decltype(_impl_.int4__){0}
    , decltype(_impl_.float1__){0}
    , decltype(_impl_.float2__){0}
    , decltype(_impl_.float3__){0}
    , decltype(_impl_.float4__){0}
    , decltype(_impl_.uint1__){uint64_t{0u}}
    , decltype(_impl_.uint2__){uint64_t{0u}}
    , decltype(_impl_.uint3__){uint64_t{0u}}
    , decltype(_impl_.uint4__){uint64_t{0u}}
    , decltype(_impl_.float5__){0}
    , decltype(_impl_.float6__){0}
    , decltype(_impl_.float7__){0}
    , decltype(_impl_.float8__){0}
    , decltype(_impl_.float9__){0}
    , decltype(_impl_.float10__){0}
    , decltype(_impl_.entry_type_){1}
    , decltype(_impl_.parent_){16777215u}
    , decltype(_impl_.duration_){-1}
    , decltype(_impl_.caster_){16777215u}
    , decltype(_impl_.ability_){16777215u}
    , decltype(_impl_.aura_provider_ehandle_){16777215u}
  };
  _impl_.string1__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string1__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.string2__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string2__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.string3__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string3__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.string4__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string4__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CModifierTableEntry::~CModifierTableEntry() {
  // @@protoc_insertion_point(destructor:CModifierTableEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CModifierTableEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.string1__.Destroy();
  _impl_.string2__.Destroy();
  _impl_.string3__.Destroy();
  _impl_.string4__.Destroy();
  if (this != internal_default_instance()) delete _impl_.vec1__;
  if (this != internal_default_instance()) delete _impl_.vec2__;
  if (this != internal_default_instance()) delete _impl_.vec3__;
  if (this != internal_default_instance()) delete _impl_.vec4__;
}

void CModifierTableEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CModifierTableEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CModifierTableEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.string1__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.string2__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.string3__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.string4__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.vec1__ != nullptr);
      _impl_.vec1__->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.vec2__ != nullptr);
      _impl_.vec2__->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.vec3__ != nullptr);
      _impl_.vec3__->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.vec4__ != nullptr);
      _impl_.vec4__->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.serial_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bool1__) -
        reinterpret_cast<char*>(&_impl_.serial_number_)) + sizeof(_impl_.bool1__));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.bool2__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.float1__) -
        reinterpret_cast<char*>(&_impl_.bool2__)) + sizeof(_impl_.float1__));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.float2__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.float5__) -
        reinterpret_cast<char*>(&_impl_.float2__)) + sizeof(_impl_.float5__));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.float6__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.float10__) -
        reinterpret_cast<char*>(&_impl_.float6__)) + sizeof(_impl_.float10__));
    _impl_.entry_type_ = 1;
    _impl_.parent_ = 16777215u;
    _impl_.duration_ = -1;
  }
  if (cached_has_bits & 0x00000700u) {
    _impl_.caster_ = 16777215u;
    _impl_.ability_ = 16777215u;
    _impl_.aura_provider_ehandle_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CModifierTableEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .MODIFIER_ENTRY_TYPE entry_type = 1 [default = MODIFIER_ENTRY_TYPE_ACTIVE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::MODIFIER_ENTRY_TYPE_IsValid(val))) {
            _internal_set_entry_type(static_cast<::MODIFIER_ENTRY_TYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint32 parent = 2 [default = 16777215];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_parent(&_impl_._has_bits_);
          _impl_.parent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 serial_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_serial_number(&_impl_._has_bits_);
          _impl_.serial_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 modifier_subclass = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_modifier_subclass(&_impl_._has_bits_);
          _impl_.modifier_subclass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 stack_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_stack_count(&_impl_._has_bits_);
          _impl_.stack_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_stack_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_max_stack_count(&_impl_._has_bits_);
          _impl_.max_stack_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float last_applied_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_last_applied_time(&_impl_._has_bits_);
          _impl_.last_applied_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float duration = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_duration(&_impl_._has_bits_);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 caster = 9 [default = 16777215];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_caster(&_impl_._has_bits_);
          _impl_.caster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability = 10 [default = 16777215];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_ability(&_impl_._has_bits_);
          _impl_.ability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 aura_provider_serial_number = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_aura_provider_serial_number(&_impl_._has_bits_);
          _impl_.aura_provider_serial_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 aura_provider_ehandle = 12 [default = 16777215];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_aura_provider_ehandle(&_impl_._has_bits_);
          _impl_.aura_provider_ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_subclass = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_ability_subclass(&_impl_._has_bits_);
          _impl_.ability_subclass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bool1_ = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_bool1_(&_impl_._has_bits_);
          _impl_.bool1__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bool2_ = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_bool2_(&_impl_._has_bits_);
          _impl_.bool2__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bool3_ = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_bool3_(&_impl_._has_bits_);
          _impl_.bool3__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bool4_ = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_bool4_(&_impl_._has_bits_);
          _impl_.bool4__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 int1_ = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_int1_(&_impl_._has_bits_);
          _impl_.int1__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 int2_ = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_int2_(&_impl_._has_bits_);
          _impl_.int2__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 int3_ = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_int3_(&_impl_._has_bits_);
          _impl_.int3__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 int4_ = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_int4_(&_impl_._has_bits_);
          _impl_.int4__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float float1_ = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 245)) {
          _Internal::set_has_float1_(&_impl_._has_bits_);
          _impl_.float1__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float float2_ = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 253)) {
          _Internal::set_has_float2_(&_impl_._has_bits_);
          _impl_.float2__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float float3_ = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 5)) {
          _Internal::set_has_float3_(&_impl_._has_bits_);
          _impl_.float3__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float float4_ = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_float4_(&_impl_._has_bits_);
          _impl_.float4__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 uint1_ = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_uint1_(&_impl_._has_bits_);
          _impl_.uint1__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 uint2_ = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_uint2_(&_impl_._has_bits_);
          _impl_.uint2__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 uint3_ = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_uint3_(&_impl_._has_bits_);
          _impl_.uint3__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 uint4_ = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_uint4_(&_impl_._has_bits_);
          _impl_.uint4__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector vec1_ = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_vec1_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector vec2_ = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_vec2_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector vec3_ = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_vec3_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector vec4_ = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_vec4_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string string1_ = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_string1_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CModifierTableEntry.string1_");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string string2_ = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_string2_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CModifierTableEntry.string2_");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string string3_ = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_string3_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CModifierTableEntry.string3_");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string string4_ = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_string4_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CModifierTableEntry.string4_");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float float5_ = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _Internal::set_has_float5_(&_impl_._has_bits_);
          _impl_.float5__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float float6_ = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _Internal::set_has_float6_(&_impl_._has_bits_);
          _impl_.float6__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float float7_ = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_float7_(&_impl_._has_bits_);
          _impl_.float7__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float float8_ = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _Internal::set_has_float8_(&_impl_._has_bits_);
          _impl_.float8__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float float9_ = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 173)) {
          _Internal::set_has_float9_(&_impl_._has_bits_);
          _impl_.float9__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float float10_ = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          _Internal::set_has_float10_(&_impl_._has_bits_);
          _impl_.float10__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CModifierTableEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CModifierTableEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[1];
  // required .MODIFIER_ENTRY_TYPE entry_type = 1 [default = MODIFIER_ENTRY_TYPE_ACTIVE];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_entry_type(), target);
  }

  // required uint32 parent = 2 [default = 16777215];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_parent(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 serial_number = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_serial_number(), target);
  }

  // optional uint32 modifier_subclass = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_modifier_subclass(), target);
  }

  // optional int32 stack_count = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_stack_count(), target);
  }

  // optional int32 max_stack_count = 6;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_max_stack_count(), target);
  }

  // optional float last_applied_time = 7;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_last_applied_time(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional float duration = 8 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_duration(), target);
  }

  // optional uint32 caster = 9 [default = 16777215];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_caster(), target);
  }

  // optional uint32 ability = 10 [default = 16777215];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_ability(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 aura_provider_serial_number = 11;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_aura_provider_serial_number(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 aura_provider_ehandle = 12 [default = 16777215];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_aura_provider_ehandle(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 ability_subclass = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_ability_subclass(), target);
  }

  // optional bool bool1_ = 20;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_bool1_(), target);
  }

  // optional bool bool2_ = 21;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_bool2_(), target);
  }

  // optional bool bool3_ = 22;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_bool3_(), target);
  }

  // optional bool bool4_ = 23;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_bool4_(), target);
  }

  // optional int32 int1_ = 25;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_int1_(), target);
  }

  // optional int32 int2_ = 26;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_int2_(), target);
  }

  // optional int32 int3_ = 27;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(27, this->_internal_int3_(), target);
  }

  // optional int32 int4_ = 28;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(28, this->_internal_int4_(), target);
  }

  // optional float float1_ = 30;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(30, this->_internal_float1_(), target);
  }

  // optional float float2_ = 31;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(31, this->_internal_float2_(), target);
  }

  // optional float float3_ = 32;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(32, this->_internal_float3_(), target);
  }

  // optional float float4_ = 33;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(33, this->_internal_float4_(), target);
  }

  // optional uint64 uint1_ = 35;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(35, this->_internal_uint1_(), target);
  }

  // optional uint64 uint2_ = 36;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(36, this->_internal_uint2_(), target);
  }

  // optional uint64 uint3_ = 37;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(37, this->_internal_uint3_(), target);
  }

  // optional uint64 uint4_ = 38;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(38, this->_internal_uint4_(), target);
  }

  // optional .CMsgVector vec1_ = 40;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::vec1_(this),
        _Internal::vec1_(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgVector vec2_ = 41;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::vec2_(this),
        _Internal::vec2_(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgVector vec3_ = 42;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, _Internal::vec3_(this),
        _Internal::vec3_(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgVector vec4_ = 43;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(43, _Internal::vec4_(this),
        _Internal::vec4_(this).GetCachedSize(), target, stream);
  }

  // optional string string1_ = 45;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string1_().data(), static_cast<int>(this->_internal_string1_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CModifierTableEntry.string1_");
    target = stream->WriteStringMaybeAliased(
        45, this->_internal_string1_(), target);
  }

  // optional string string2_ = 46;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string2_().data(), static_cast<int>(this->_internal_string2_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CModifierTableEntry.string2_");
    target = stream->WriteStringMaybeAliased(
        46, this->_internal_string2_(), target);
  }

  // optional string string3_ = 47;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string3_().data(), static_cast<int>(this->_internal_string3_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CModifierTableEntry.string3_");
    target = stream->WriteStringMaybeAliased(
        47, this->_internal_string3_(), target);
  }

  // optional string string4_ = 48;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string4_().data(), static_cast<int>(this->_internal_string4_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CModifierTableEntry.string4_");
    target = stream->WriteStringMaybeAliased(
        48, this->_internal_string4_(), target);
  }

  // optional float float5_ = 49;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(49, this->_internal_float5_(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional float float6_ = 50;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(50, this->_internal_float6_(), target);
  }

  // optional float float7_ = 51;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(51, this->_internal_float7_(), target);
  }

  // optional float float8_ = 52;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(52, this->_internal_float8_(), target);
  }

  // optional float float9_ = 53;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(53, this->_internal_float9_(), target);
  }

  // optional float float10_ = 54;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(54, this->_internal_float10_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CModifierTableEntry)
  return target;
}

size_t CModifierTableEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CModifierTableEntry)
  size_t total_size = 0;

  if (_internal_has_serial_number()) {
    // required uint32 serial_number = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_serial_number());
  }

  if (_internal_has_entry_type()) {
    // required .MODIFIER_ENTRY_TYPE entry_type = 1 [default = MODIFIER_ENTRY_TYPE_ACTIVE];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_entry_type());
  }

  if (_internal_has_parent()) {
    // required uint32 parent = 2 [default = 16777215];
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_parent());
  }

  return total_size;
}
size_t CModifierTableEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CModifierTableEntry)
  size_t total_size = 0;

  if ((((_impl_._has_bits_[0] & 0x00000100) ^ 0x00000100)
       | ((_impl_._has_bits_[1] & 0x00000060) ^ 0x00000060)) == 0) {  // All required fields are present.
    // required uint32 serial_number = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_serial_number());

    // required .MODIFIER_ENTRY_TYPE entry_type = 1 [default = MODIFIER_ENTRY_TYPE_ACTIVE];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_entry_type());

    // required uint32 parent = 2 [default = 16777215];
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_parent());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string string1_ = 45;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string1_());
    }

    // optional string string2_ = 46;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string2_());
    }

    // optional string string3_ = 47;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string3_());
    }

    // optional string string4_ = 48;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string4_());
    }

    // optional .CMsgVector vec1_ = 40;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vec1__);
    }

    // optional .CMsgVector vec2_ = 41;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vec2__);
    }

    // optional .CMsgVector vec3_ = 42;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vec3__);
    }

    // optional .CMsgVector vec4_ = 43;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vec4__);
    }

  }
  if (cached_has_bits & 0x0000fe00u) {
    // optional uint32 modifier_subclass = 4;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_modifier_subclass());
    }

    // optional int32 stack_count = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stack_count());
    }

    // optional int32 max_stack_count = 6;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_stack_count());
    }

    // optional float last_applied_time = 7;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional int32 aura_provider_serial_number = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_aura_provider_serial_number());
    }

    // optional uint32 ability_subclass = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ability_subclass());
    }

    // optional bool bool1_ = 20;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool bool2_ = 21;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool bool3_ = 22;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool bool4_ = 23;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional int32 int1_ = 25;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_int1_());
    }

    // optional int32 int2_ = 26;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_int2_());
    }

    // optional int32 int3_ = 27;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_int3_());
    }

    // optional int32 int4_ = 28;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_int4_());
    }

    // optional float float1_ = 30;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float float2_ = 31;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional float float3_ = 32;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional float float4_ = 33;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional uint64 uint1_ = 35;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_uint1_());
    }

    // optional uint64 uint2_ = 36;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_uint2_());
    }

    // optional uint64 uint3_ = 37;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_uint3_());
    }

    // optional uint64 uint4_ = 38;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_uint4_());
    }

    // optional float float5_ = 49;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    // optional float float6_ = 50;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float float7_ = 51;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional float float8_ = 52;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional float float9_ = 53;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 4;
    }

    // optional float float10_ = 54;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

  }
  // optional float duration = 8 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 + 4;
  }

  if (cached_has_bits & 0x00000700u) {
    // optional uint32 caster = 9 [default = 16777215];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_caster());
    }

    // optional uint32 ability = 10 [default = 16777215];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ability());
    }

    // optional uint32 aura_provider_ehandle = 12 [default = 16777215];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_aura_provider_ehandle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CModifierTableEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CModifierTableEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CModifierTableEntry::GetClassData() const { return &_class_data_; }


void CModifierTableEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CModifierTableEntry*>(&to_msg);
  auto& from = static_cast<const CModifierTableEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CModifierTableEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_string1_(from._internal_string1_());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_string2_(from._internal_string2_());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_string3_(from._internal_string3_());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_string4_(from._internal_string4_());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_vec1_()->::CMsgVector::MergeFrom(
          from._internal_vec1_());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_vec2_()->::CMsgVector::MergeFrom(
          from._internal_vec2_());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_vec3_()->::CMsgVector::MergeFrom(
          from._internal_vec3_());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_vec4_()->::CMsgVector::MergeFrom(
          from._internal_vec4_());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.serial_number_ = from._impl_.serial_number_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.modifier_subclass_ = from._impl_.modifier_subclass_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.stack_count_ = from._impl_.stack_count_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.max_stack_count_ = from._impl_.max_stack_count_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.last_applied_time_ = from._impl_.last_applied_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.aura_provider_serial_number_ = from._impl_.aura_provider_serial_number_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.ability_subclass_ = from._impl_.ability_subclass_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.bool1__ = from._impl_.bool1__;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.bool2__ = from._impl_.bool2__;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.bool3__ = from._impl_.bool3__;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.bool4__ = from._impl_.bool4__;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.int1__ = from._impl_.int1__;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.int2__ = from._impl_.int2__;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.int3__ = from._impl_.int3__;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.int4__ = from._impl_.int4__;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.float1__ = from._impl_.float1__;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.float2__ = from._impl_.float2__;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.float3__ = from._impl_.float3__;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.float4__ = from._impl_.float4__;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.uint1__ = from._impl_.uint1__;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.uint2__ = from._impl_.uint2__;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.uint3__ = from._impl_.uint3__;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.uint4__ = from._impl_.uint4__;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.float5__ = from._impl_.float5__;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.float6__ = from._impl_.float6__;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.float7__ = from._impl_.float7__;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.float8__ = from._impl_.float8__;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.float9__ = from._impl_.float9__;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.float10__ = from._impl_.float10__;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.entry_type_ = from._impl_.entry_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.parent_ = from._impl_.parent_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.caster_ = from._impl_.caster_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.ability_ = from._impl_.ability_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.aura_provider_ehandle_ = from._impl_.aura_provider_ehandle_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CModifierTableEntry::CopyFrom(const CModifierTableEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CModifierTableEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CModifierTableEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CModifierTableEntry::InternalSwap(CModifierTableEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.string1__, lhs_arena,
      &other->_impl_.string1__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.string2__, lhs_arena,
      &other->_impl_.string2__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.string3__, lhs_arena,
      &other->_impl_.string3__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.string4__, lhs_arena,
      &other->_impl_.string4__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.float10__)
      + sizeof(CModifierTableEntry::_impl_.float10__)
      - PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.vec1__)>(
          reinterpret_cast<char*>(&_impl_.vec1__),
          reinterpret_cast<char*>(&other->_impl_.vec1__));
  swap(_impl_.entry_type_, other->_impl_.entry_type_);
  swap(_impl_.parent_, other->_impl_.parent_);
  swap(_impl_.duration_, other->_impl_.duration_);
  swap(_impl_.caster_, other->_impl_.caster_);
  swap(_impl_.ability_, other->_impl_.ability_);
  swap(_impl_.aura_provider_ehandle_, other->_impl_.aura_provider_ehandle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CModifierTableEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_5fmodifier_2eproto_getter, &descriptor_table_base_5fmodifier_2eproto_once,
      file_level_metadata_base_5fmodifier_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CModifierTableEntry*
Arena::CreateMaybeMessage< ::CModifierTableEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CModifierTableEntry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
