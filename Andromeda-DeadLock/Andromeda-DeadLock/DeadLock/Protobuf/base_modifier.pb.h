// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base_modifier.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_base_5fmodifier_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_base_5fmodifier_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "networkbasetypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_base_5fmodifier_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_base_5fmodifier_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_5fmodifier_2eproto;
class CModifierTableEntry;
struct CModifierTableEntryDefaultTypeInternal;
extern CModifierTableEntryDefaultTypeInternal _CModifierTableEntry_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CModifierTableEntry* Arena::CreateMaybeMessage<::CModifierTableEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum MODIFIER_ENTRY_TYPE : int {
  MODIFIER_ENTRY_TYPE_ACTIVE = 1,
  MODIFIER_ENTRY_TYPE_REMOVED = 2
};
bool MODIFIER_ENTRY_TYPE_IsValid(int value);
constexpr MODIFIER_ENTRY_TYPE MODIFIER_ENTRY_TYPE_MIN = MODIFIER_ENTRY_TYPE_ACTIVE;
constexpr MODIFIER_ENTRY_TYPE MODIFIER_ENTRY_TYPE_MAX = MODIFIER_ENTRY_TYPE_REMOVED;
constexpr int MODIFIER_ENTRY_TYPE_ARRAYSIZE = MODIFIER_ENTRY_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MODIFIER_ENTRY_TYPE_descriptor();
template<typename T>
inline const std::string& MODIFIER_ENTRY_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MODIFIER_ENTRY_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MODIFIER_ENTRY_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MODIFIER_ENTRY_TYPE_descriptor(), enum_t_value);
}
inline bool MODIFIER_ENTRY_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MODIFIER_ENTRY_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MODIFIER_ENTRY_TYPE>(
    MODIFIER_ENTRY_TYPE_descriptor(), name, value);
}
// ===================================================================

class CModifierTableEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CModifierTableEntry) */ {
 public:
  inline CModifierTableEntry() : CModifierTableEntry(nullptr) {}
  ~CModifierTableEntry() override;
  explicit PROTOBUF_CONSTEXPR CModifierTableEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CModifierTableEntry(const CModifierTableEntry& from);
  CModifierTableEntry(CModifierTableEntry&& from) noexcept
    : CModifierTableEntry() {
    *this = ::std::move(from);
  }

  inline CModifierTableEntry& operator=(const CModifierTableEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CModifierTableEntry& operator=(CModifierTableEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CModifierTableEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CModifierTableEntry* internal_default_instance() {
    return reinterpret_cast<const CModifierTableEntry*>(
               &_CModifierTableEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CModifierTableEntry& a, CModifierTableEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CModifierTableEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CModifierTableEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CModifierTableEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CModifierTableEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CModifierTableEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CModifierTableEntry& from) {
    CModifierTableEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CModifierTableEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CModifierTableEntry";
  }
  protected:
  explicit CModifierTableEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kString1FieldNumber = 45,
    kString2FieldNumber = 46,
    kString3FieldNumber = 47,
    kString4FieldNumber = 48,
    kVec1FieldNumber = 40,
    kVec2FieldNumber = 41,
    kVec3FieldNumber = 42,
    kVec4FieldNumber = 43,
    kSerialNumberFieldNumber = 3,
    kModifierSubclassFieldNumber = 4,
    kStackCountFieldNumber = 5,
    kMaxStackCountFieldNumber = 6,
    kLastAppliedTimeFieldNumber = 7,
    kAuraProviderSerialNumberFieldNumber = 11,
    kAbilitySubclassFieldNumber = 13,
    kBool1FieldNumber = 20,
    kBool2FieldNumber = 21,
    kBool3FieldNumber = 22,
    kBool4FieldNumber = 23,
    kInt1FieldNumber = 25,
    kInt2FieldNumber = 26,
    kInt3FieldNumber = 27,
    kInt4FieldNumber = 28,
    kFloat1FieldNumber = 30,
    kFloat2FieldNumber = 31,
    kFloat3FieldNumber = 32,
    kFloat4FieldNumber = 33,
    kUint1FieldNumber = 35,
    kUint2FieldNumber = 36,
    kUint3FieldNumber = 37,
    kUint4FieldNumber = 38,
    kFloat5FieldNumber = 49,
    kFloat6FieldNumber = 50,
    kFloat7FieldNumber = 51,
    kFloat8FieldNumber = 52,
    kFloat9FieldNumber = 53,
    kFloat10FieldNumber = 54,
    kEntryTypeFieldNumber = 1,
    kParentFieldNumber = 2,
    kDurationFieldNumber = 8,
    kCasterFieldNumber = 9,
    kAbilityFieldNumber = 10,
    kAuraProviderEhandleFieldNumber = 12,
  };
  // optional string string1_ = 45;
  bool has_string1_() const;
  private:
  bool _internal_has_string1_() const;
  public:
  void clear_string1_();
  const std::string& string1_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string1_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string1_();
  PROTOBUF_NODISCARD std::string* release_string1_();
  void set_allocated_string1_(std::string* string1_);
  private:
  const std::string& _internal_string1_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string1_(const std::string& value);
  std::string* _internal_mutable_string1_();
  public:

  // optional string string2_ = 46;
  bool has_string2_() const;
  private:
  bool _internal_has_string2_() const;
  public:
  void clear_string2_();
  const std::string& string2_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string2_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string2_();
  PROTOBUF_NODISCARD std::string* release_string2_();
  void set_allocated_string2_(std::string* string2_);
  private:
  const std::string& _internal_string2_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string2_(const std::string& value);
  std::string* _internal_mutable_string2_();
  public:

  // optional string string3_ = 47;
  bool has_string3_() const;
  private:
  bool _internal_has_string3_() const;
  public:
  void clear_string3_();
  const std::string& string3_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string3_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string3_();
  PROTOBUF_NODISCARD std::string* release_string3_();
  void set_allocated_string3_(std::string* string3_);
  private:
  const std::string& _internal_string3_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string3_(const std::string& value);
  std::string* _internal_mutable_string3_();
  public:

  // optional string string4_ = 48;
  bool has_string4_() const;
  private:
  bool _internal_has_string4_() const;
  public:
  void clear_string4_();
  const std::string& string4_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string4_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string4_();
  PROTOBUF_NODISCARD std::string* release_string4_();
  void set_allocated_string4_(std::string* string4_);
  private:
  const std::string& _internal_string4_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string4_(const std::string& value);
  std::string* _internal_mutable_string4_();
  public:

  // optional .CMsgVector vec1_ = 40;
  bool has_vec1_() const;
  private:
  bool _internal_has_vec1_() const;
  public:
  void clear_vec1_();
  const ::CMsgVector& vec1_() const;
  PROTOBUF_NODISCARD ::CMsgVector* release_vec1_();
  ::CMsgVector* mutable_vec1_();
  void set_allocated_vec1_(::CMsgVector* vec1_);
  private:
  const ::CMsgVector& _internal_vec1_() const;
  ::CMsgVector* _internal_mutable_vec1_();
  public:
  void unsafe_arena_set_allocated_vec1_(
      ::CMsgVector* vec1_);
  ::CMsgVector* unsafe_arena_release_vec1_();

  // optional .CMsgVector vec2_ = 41;
  bool has_vec2_() const;
  private:
  bool _internal_has_vec2_() const;
  public:
  void clear_vec2_();
  const ::CMsgVector& vec2_() const;
  PROTOBUF_NODISCARD ::CMsgVector* release_vec2_();
  ::CMsgVector* mutable_vec2_();
  void set_allocated_vec2_(::CMsgVector* vec2_);
  private:
  const ::CMsgVector& _internal_vec2_() const;
  ::CMsgVector* _internal_mutable_vec2_();
  public:
  void unsafe_arena_set_allocated_vec2_(
      ::CMsgVector* vec2_);
  ::CMsgVector* unsafe_arena_release_vec2_();

  // optional .CMsgVector vec3_ = 42;
  bool has_vec3_() const;
  private:
  bool _internal_has_vec3_() const;
  public:
  void clear_vec3_();
  const ::CMsgVector& vec3_() const;
  PROTOBUF_NODISCARD ::CMsgVector* release_vec3_();
  ::CMsgVector* mutable_vec3_();
  void set_allocated_vec3_(::CMsgVector* vec3_);
  private:
  const ::CMsgVector& _internal_vec3_() const;
  ::CMsgVector* _internal_mutable_vec3_();
  public:
  void unsafe_arena_set_allocated_vec3_(
      ::CMsgVector* vec3_);
  ::CMsgVector* unsafe_arena_release_vec3_();

  // optional .CMsgVector vec4_ = 43;
  bool has_vec4_() const;
  private:
  bool _internal_has_vec4_() const;
  public:
  void clear_vec4_();
  const ::CMsgVector& vec4_() const;
  PROTOBUF_NODISCARD ::CMsgVector* release_vec4_();
  ::CMsgVector* mutable_vec4_();
  void set_allocated_vec4_(::CMsgVector* vec4_);
  private:
  const ::CMsgVector& _internal_vec4_() const;
  ::CMsgVector* _internal_mutable_vec4_();
  public:
  void unsafe_arena_set_allocated_vec4_(
      ::CMsgVector* vec4_);
  ::CMsgVector* unsafe_arena_release_vec4_();

  // required uint32 serial_number = 3;
  bool has_serial_number() const;
  private:
  bool _internal_has_serial_number() const;
  public:
  void clear_serial_number();
  uint32_t serial_number() const;
  void set_serial_number(uint32_t value);
  private:
  uint32_t _internal_serial_number() const;
  void _internal_set_serial_number(uint32_t value);
  public:

  // optional uint32 modifier_subclass = 4;
  bool has_modifier_subclass() const;
  private:
  bool _internal_has_modifier_subclass() const;
  public:
  void clear_modifier_subclass();
  uint32_t modifier_subclass() const;
  void set_modifier_subclass(uint32_t value);
  private:
  uint32_t _internal_modifier_subclass() const;
  void _internal_set_modifier_subclass(uint32_t value);
  public:

  // optional int32 stack_count = 5;
  bool has_stack_count() const;
  private:
  bool _internal_has_stack_count() const;
  public:
  void clear_stack_count();
  int32_t stack_count() const;
  void set_stack_count(int32_t value);
  private:
  int32_t _internal_stack_count() const;
  void _internal_set_stack_count(int32_t value);
  public:

  // optional int32 max_stack_count = 6;
  bool has_max_stack_count() const;
  private:
  bool _internal_has_max_stack_count() const;
  public:
  void clear_max_stack_count();
  int32_t max_stack_count() const;
  void set_max_stack_count(int32_t value);
  private:
  int32_t _internal_max_stack_count() const;
  void _internal_set_max_stack_count(int32_t value);
  public:

  // optional float last_applied_time = 7;
  bool has_last_applied_time() const;
  private:
  bool _internal_has_last_applied_time() const;
  public:
  void clear_last_applied_time();
  float last_applied_time() const;
  void set_last_applied_time(float value);
  private:
  float _internal_last_applied_time() const;
  void _internal_set_last_applied_time(float value);
  public:

  // optional int32 aura_provider_serial_number = 11;
  bool has_aura_provider_serial_number() const;
  private:
  bool _internal_has_aura_provider_serial_number() const;
  public:
  void clear_aura_provider_serial_number();
  int32_t aura_provider_serial_number() const;
  void set_aura_provider_serial_number(int32_t value);
  private:
  int32_t _internal_aura_provider_serial_number() const;
  void _internal_set_aura_provider_serial_number(int32_t value);
  public:

  // optional uint32 ability_subclass = 13;
  bool has_ability_subclass() const;
  private:
  bool _internal_has_ability_subclass() const;
  public:
  void clear_ability_subclass();
  uint32_t ability_subclass() const;
  void set_ability_subclass(uint32_t value);
  private:
  uint32_t _internal_ability_subclass() const;
  void _internal_set_ability_subclass(uint32_t value);
  public:

  // optional bool bool1_ = 20;
  bool has_bool1_() const;
  private:
  bool _internal_has_bool1_() const;
  public:
  void clear_bool1_();
  bool bool1_() const;
  void set_bool1_(bool value);
  private:
  bool _internal_bool1_() const;
  void _internal_set_bool1_(bool value);
  public:

  // optional bool bool2_ = 21;
  bool has_bool2_() const;
  private:
  bool _internal_has_bool2_() const;
  public:
  void clear_bool2_();
  bool bool2_() const;
  void set_bool2_(bool value);
  private:
  bool _internal_bool2_() const;
  void _internal_set_bool2_(bool value);
  public:

  // optional bool bool3_ = 22;
  bool has_bool3_() const;
  private:
  bool _internal_has_bool3_() const;
  public:
  void clear_bool3_();
  bool bool3_() const;
  void set_bool3_(bool value);
  private:
  bool _internal_bool3_() const;
  void _internal_set_bool3_(bool value);
  public:

  // optional bool bool4_ = 23;
  bool has_bool4_() const;
  private:
  bool _internal_has_bool4_() const;
  public:
  void clear_bool4_();
  bool bool4_() const;
  void set_bool4_(bool value);
  private:
  bool _internal_bool4_() const;
  void _internal_set_bool4_(bool value);
  public:

  // optional int32 int1_ = 25;
  bool has_int1_() const;
  private:
  bool _internal_has_int1_() const;
  public:
  void clear_int1_();
  int32_t int1_() const;
  void set_int1_(int32_t value);
  private:
  int32_t _internal_int1_() const;
  void _internal_set_int1_(int32_t value);
  public:

  // optional int32 int2_ = 26;
  bool has_int2_() const;
  private:
  bool _internal_has_int2_() const;
  public:
  void clear_int2_();
  int32_t int2_() const;
  void set_int2_(int32_t value);
  private:
  int32_t _internal_int2_() const;
  void _internal_set_int2_(int32_t value);
  public:

  // optional int32 int3_ = 27;
  bool has_int3_() const;
  private:
  bool _internal_has_int3_() const;
  public:
  void clear_int3_();
  int32_t int3_() const;
  void set_int3_(int32_t value);
  private:
  int32_t _internal_int3_() const;
  void _internal_set_int3_(int32_t value);
  public:

  // optional int32 int4_ = 28;
  bool has_int4_() const;
  private:
  bool _internal_has_int4_() const;
  public:
  void clear_int4_();
  int32_t int4_() const;
  void set_int4_(int32_t value);
  private:
  int32_t _internal_int4_() const;
  void _internal_set_int4_(int32_t value);
  public:

  // optional float float1_ = 30;
  bool has_float1_() const;
  private:
  bool _internal_has_float1_() const;
  public:
  void clear_float1_();
  float float1_() const;
  void set_float1_(float value);
  private:
  float _internal_float1_() const;
  void _internal_set_float1_(float value);
  public:

  // optional float float2_ = 31;
  bool has_float2_() const;
  private:
  bool _internal_has_float2_() const;
  public:
  void clear_float2_();
  float float2_() const;
  void set_float2_(float value);
  private:
  float _internal_float2_() const;
  void _internal_set_float2_(float value);
  public:

  // optional float float3_ = 32;
  bool has_float3_() const;
  private:
  bool _internal_has_float3_() const;
  public:
  void clear_float3_();
  float float3_() const;
  void set_float3_(float value);
  private:
  float _internal_float3_() const;
  void _internal_set_float3_(float value);
  public:

  // optional float float4_ = 33;
  bool has_float4_() const;
  private:
  bool _internal_has_float4_() const;
  public:
  void clear_float4_();
  float float4_() const;
  void set_float4_(float value);
  private:
  float _internal_float4_() const;
  void _internal_set_float4_(float value);
  public:

  // optional uint64 uint1_ = 35;
  bool has_uint1_() const;
  private:
  bool _internal_has_uint1_() const;
  public:
  void clear_uint1_();
  uint64_t uint1_() const;
  void set_uint1_(uint64_t value);
  private:
  uint64_t _internal_uint1_() const;
  void _internal_set_uint1_(uint64_t value);
  public:

  // optional uint64 uint2_ = 36;
  bool has_uint2_() const;
  private:
  bool _internal_has_uint2_() const;
  public:
  void clear_uint2_();
  uint64_t uint2_() const;
  void set_uint2_(uint64_t value);
  private:
  uint64_t _internal_uint2_() const;
  void _internal_set_uint2_(uint64_t value);
  public:

  // optional uint64 uint3_ = 37;
  bool has_uint3_() const;
  private:
  bool _internal_has_uint3_() const;
  public:
  void clear_uint3_();
  uint64_t uint3_() const;
  void set_uint3_(uint64_t value);
  private:
  uint64_t _internal_uint3_() const;
  void _internal_set_uint3_(uint64_t value);
  public:

  // optional uint64 uint4_ = 38;
  bool has_uint4_() const;
  private:
  bool _internal_has_uint4_() const;
  public:
  void clear_uint4_();
  uint64_t uint4_() const;
  void set_uint4_(uint64_t value);
  private:
  uint64_t _internal_uint4_() const;
  void _internal_set_uint4_(uint64_t value);
  public:

  // optional float float5_ = 49;
  bool has_float5_() const;
  private:
  bool _internal_has_float5_() const;
  public:
  void clear_float5_();
  float float5_() const;
  void set_float5_(float value);
  private:
  float _internal_float5_() const;
  void _internal_set_float5_(float value);
  public:

  // optional float float6_ = 50;
  bool has_float6_() const;
  private:
  bool _internal_has_float6_() const;
  public:
  void clear_float6_();
  float float6_() const;
  void set_float6_(float value);
  private:
  float _internal_float6_() const;
  void _internal_set_float6_(float value);
  public:

  // optional float float7_ = 51;
  bool has_float7_() const;
  private:
  bool _internal_has_float7_() const;
  public:
  void clear_float7_();
  float float7_() const;
  void set_float7_(float value);
  private:
  float _internal_float7_() const;
  void _internal_set_float7_(float value);
  public:

  // optional float float8_ = 52;
  bool has_float8_() const;
  private:
  bool _internal_has_float8_() const;
  public:
  void clear_float8_();
  float float8_() const;
  void set_float8_(float value);
  private:
  float _internal_float8_() const;
  void _internal_set_float8_(float value);
  public:

  // optional float float9_ = 53;
  bool has_float9_() const;
  private:
  bool _internal_has_float9_() const;
  public:
  void clear_float9_();
  float float9_() const;
  void set_float9_(float value);
  private:
  float _internal_float9_() const;
  void _internal_set_float9_(float value);
  public:

  // optional float float10_ = 54;
  bool has_float10_() const;
  private:
  bool _internal_has_float10_() const;
  public:
  void clear_float10_();
  float float10_() const;
  void set_float10_(float value);
  private:
  float _internal_float10_() const;
  void _internal_set_float10_(float value);
  public:

  // required .MODIFIER_ENTRY_TYPE entry_type = 1 [default = MODIFIER_ENTRY_TYPE_ACTIVE];
  bool has_entry_type() const;
  private:
  bool _internal_has_entry_type() const;
  public:
  void clear_entry_type();
  ::MODIFIER_ENTRY_TYPE entry_type() const;
  void set_entry_type(::MODIFIER_ENTRY_TYPE value);
  private:
  ::MODIFIER_ENTRY_TYPE _internal_entry_type() const;
  void _internal_set_entry_type(::MODIFIER_ENTRY_TYPE value);
  public:

  // required uint32 parent = 2 [default = 16777215];
  bool has_parent() const;
  private:
  bool _internal_has_parent() const;
  public:
  void clear_parent();
  uint32_t parent() const;
  void set_parent(uint32_t value);
  private:
  uint32_t _internal_parent() const;
  void _internal_set_parent(uint32_t value);
  public:

  // optional float duration = 8 [default = -1];
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  float duration() const;
  void set_duration(float value);
  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);
  public:

  // optional uint32 caster = 9 [default = 16777215];
  bool has_caster() const;
  private:
  bool _internal_has_caster() const;
  public:
  void clear_caster();
  uint32_t caster() const;
  void set_caster(uint32_t value);
  private:
  uint32_t _internal_caster() const;
  void _internal_set_caster(uint32_t value);
  public:

  // optional uint32 ability = 10 [default = 16777215];
  bool has_ability() const;
  private:
  bool _internal_has_ability() const;
  public:
  void clear_ability();
  uint32_t ability() const;
  void set_ability(uint32_t value);
  private:
  uint32_t _internal_ability() const;
  void _internal_set_ability(uint32_t value);
  public:

  // optional uint32 aura_provider_ehandle = 12 [default = 16777215];
  bool has_aura_provider_ehandle() const;
  private:
  bool _internal_has_aura_provider_ehandle() const;
  public:
  void clear_aura_provider_ehandle();
  uint32_t aura_provider_ehandle() const;
  void set_aura_provider_ehandle(uint32_t value);
  private:
  uint32_t _internal_aura_provider_ehandle() const;
  void _internal_set_aura_provider_ehandle(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CModifierTableEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string1__;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string2__;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string3__;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string4__;
    ::CMsgVector* vec1__;
    ::CMsgVector* vec2__;
    ::CMsgVector* vec3__;
    ::CMsgVector* vec4__;
    uint32_t serial_number_;
    uint32_t modifier_subclass_;
    int32_t stack_count_;
    int32_t max_stack_count_;
    float last_applied_time_;
    int32_t aura_provider_serial_number_;
    uint32_t ability_subclass_;
    bool bool1__;
    bool bool2__;
    bool bool3__;
    bool bool4__;
    int32_t int1__;
    int32_t int2__;
    int32_t int3__;
    int32_t int4__;
    float float1__;
    float float2__;
    float float3__;
    float float4__;
    uint64_t uint1__;
    uint64_t uint2__;
    uint64_t uint3__;
    uint64_t uint4__;
    float float5__;
    float float6__;
    float float7__;
    float float8__;
    float float9__;
    float float10__;
    int entry_type_;
    uint32_t parent_;
    float duration_;
    uint32_t caster_;
    uint32_t ability_;
    uint32_t aura_provider_ehandle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_5fmodifier_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CModifierTableEntry

// required .MODIFIER_ENTRY_TYPE entry_type = 1 [default = MODIFIER_ENTRY_TYPE_ACTIVE];
inline bool CModifierTableEntry::_internal_has_entry_type() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_entry_type() const {
  return _internal_has_entry_type();
}
inline void CModifierTableEntry::clear_entry_type() {
  _impl_.entry_type_ = 1;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline ::MODIFIER_ENTRY_TYPE CModifierTableEntry::_internal_entry_type() const {
  return static_cast< ::MODIFIER_ENTRY_TYPE >(_impl_.entry_type_);
}
inline ::MODIFIER_ENTRY_TYPE CModifierTableEntry::entry_type() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.entry_type)
  return _internal_entry_type();
}
inline void CModifierTableEntry::_internal_set_entry_type(::MODIFIER_ENTRY_TYPE value) {
  assert(::MODIFIER_ENTRY_TYPE_IsValid(value));
  _impl_._has_bits_[1] |= 0x00000020u;
  _impl_.entry_type_ = value;
}
inline void CModifierTableEntry::set_entry_type(::MODIFIER_ENTRY_TYPE value) {
  _internal_set_entry_type(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.entry_type)
}

// required uint32 parent = 2 [default = 16777215];
inline bool CModifierTableEntry::_internal_has_parent() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_parent() const {
  return _internal_has_parent();
}
inline void CModifierTableEntry::clear_parent() {
  _impl_.parent_ = 16777215u;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline uint32_t CModifierTableEntry::_internal_parent() const {
  return _impl_.parent_;
}
inline uint32_t CModifierTableEntry::parent() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.parent)
  return _internal_parent();
}
inline void CModifierTableEntry::_internal_set_parent(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000040u;
  _impl_.parent_ = value;
}
inline void CModifierTableEntry::set_parent(uint32_t value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.parent)
}

// required uint32 serial_number = 3;
inline bool CModifierTableEntry::_internal_has_serial_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_serial_number() const {
  return _internal_has_serial_number();
}
inline void CModifierTableEntry::clear_serial_number() {
  _impl_.serial_number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CModifierTableEntry::_internal_serial_number() const {
  return _impl_.serial_number_;
}
inline uint32_t CModifierTableEntry::serial_number() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.serial_number)
  return _internal_serial_number();
}
inline void CModifierTableEntry::_internal_set_serial_number(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.serial_number_ = value;
}
inline void CModifierTableEntry::set_serial_number(uint32_t value) {
  _internal_set_serial_number(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.serial_number)
}

// optional uint32 modifier_subclass = 4;
inline bool CModifierTableEntry::_internal_has_modifier_subclass() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_modifier_subclass() const {
  return _internal_has_modifier_subclass();
}
inline void CModifierTableEntry::clear_modifier_subclass() {
  _impl_.modifier_subclass_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CModifierTableEntry::_internal_modifier_subclass() const {
  return _impl_.modifier_subclass_;
}
inline uint32_t CModifierTableEntry::modifier_subclass() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.modifier_subclass)
  return _internal_modifier_subclass();
}
inline void CModifierTableEntry::_internal_set_modifier_subclass(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.modifier_subclass_ = value;
}
inline void CModifierTableEntry::set_modifier_subclass(uint32_t value) {
  _internal_set_modifier_subclass(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.modifier_subclass)
}

// optional int32 stack_count = 5;
inline bool CModifierTableEntry::_internal_has_stack_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_stack_count() const {
  return _internal_has_stack_count();
}
inline void CModifierTableEntry::clear_stack_count() {
  _impl_.stack_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t CModifierTableEntry::_internal_stack_count() const {
  return _impl_.stack_count_;
}
inline int32_t CModifierTableEntry::stack_count() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.stack_count)
  return _internal_stack_count();
}
inline void CModifierTableEntry::_internal_set_stack_count(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.stack_count_ = value;
}
inline void CModifierTableEntry::set_stack_count(int32_t value) {
  _internal_set_stack_count(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.stack_count)
}

// optional int32 max_stack_count = 6;
inline bool CModifierTableEntry::_internal_has_max_stack_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_max_stack_count() const {
  return _internal_has_max_stack_count();
}
inline void CModifierTableEntry::clear_max_stack_count() {
  _impl_.max_stack_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t CModifierTableEntry::_internal_max_stack_count() const {
  return _impl_.max_stack_count_;
}
inline int32_t CModifierTableEntry::max_stack_count() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.max_stack_count)
  return _internal_max_stack_count();
}
inline void CModifierTableEntry::_internal_set_max_stack_count(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.max_stack_count_ = value;
}
inline void CModifierTableEntry::set_max_stack_count(int32_t value) {
  _internal_set_max_stack_count(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.max_stack_count)
}

// optional float last_applied_time = 7;
inline bool CModifierTableEntry::_internal_has_last_applied_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_last_applied_time() const {
  return _internal_has_last_applied_time();
}
inline void CModifierTableEntry::clear_last_applied_time() {
  _impl_.last_applied_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float CModifierTableEntry::_internal_last_applied_time() const {
  return _impl_.last_applied_time_;
}
inline float CModifierTableEntry::last_applied_time() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.last_applied_time)
  return _internal_last_applied_time();
}
inline void CModifierTableEntry::_internal_set_last_applied_time(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.last_applied_time_ = value;
}
inline void CModifierTableEntry::set_last_applied_time(float value) {
  _internal_set_last_applied_time(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.last_applied_time)
}

// optional float duration = 8 [default = -1];
inline bool CModifierTableEntry::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_duration() const {
  return _internal_has_duration();
}
inline void CModifierTableEntry::clear_duration() {
  _impl_.duration_ = -1;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline float CModifierTableEntry::_internal_duration() const {
  return _impl_.duration_;
}
inline float CModifierTableEntry::duration() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.duration)
  return _internal_duration();
}
inline void CModifierTableEntry::_internal_set_duration(float value) {
  _impl_._has_bits_[1] |= 0x00000080u;
  _impl_.duration_ = value;
}
inline void CModifierTableEntry::set_duration(float value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.duration)
}

// optional uint32 caster = 9 [default = 16777215];
inline bool CModifierTableEntry::_internal_has_caster() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_caster() const {
  return _internal_has_caster();
}
inline void CModifierTableEntry::clear_caster() {
  _impl_.caster_ = 16777215u;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline uint32_t CModifierTableEntry::_internal_caster() const {
  return _impl_.caster_;
}
inline uint32_t CModifierTableEntry::caster() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.caster)
  return _internal_caster();
}
inline void CModifierTableEntry::_internal_set_caster(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000100u;
  _impl_.caster_ = value;
}
inline void CModifierTableEntry::set_caster(uint32_t value) {
  _internal_set_caster(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.caster)
}

// optional uint32 ability = 10 [default = 16777215];
inline bool CModifierTableEntry::_internal_has_ability() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_ability() const {
  return _internal_has_ability();
}
inline void CModifierTableEntry::clear_ability() {
  _impl_.ability_ = 16777215u;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline uint32_t CModifierTableEntry::_internal_ability() const {
  return _impl_.ability_;
}
inline uint32_t CModifierTableEntry::ability() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.ability)
  return _internal_ability();
}
inline void CModifierTableEntry::_internal_set_ability(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000200u;
  _impl_.ability_ = value;
}
inline void CModifierTableEntry::set_ability(uint32_t value) {
  _internal_set_ability(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.ability)
}

// optional int32 aura_provider_serial_number = 11;
inline bool CModifierTableEntry::_internal_has_aura_provider_serial_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_aura_provider_serial_number() const {
  return _internal_has_aura_provider_serial_number();
}
inline void CModifierTableEntry::clear_aura_provider_serial_number() {
  _impl_.aura_provider_serial_number_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline int32_t CModifierTableEntry::_internal_aura_provider_serial_number() const {
  return _impl_.aura_provider_serial_number_;
}
inline int32_t CModifierTableEntry::aura_provider_serial_number() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.aura_provider_serial_number)
  return _internal_aura_provider_serial_number();
}
inline void CModifierTableEntry::_internal_set_aura_provider_serial_number(int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.aura_provider_serial_number_ = value;
}
inline void CModifierTableEntry::set_aura_provider_serial_number(int32_t value) {
  _internal_set_aura_provider_serial_number(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.aura_provider_serial_number)
}

// optional uint32 aura_provider_ehandle = 12 [default = 16777215];
inline bool CModifierTableEntry::_internal_has_aura_provider_ehandle() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_aura_provider_ehandle() const {
  return _internal_has_aura_provider_ehandle();
}
inline void CModifierTableEntry::clear_aura_provider_ehandle() {
  _impl_.aura_provider_ehandle_ = 16777215u;
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline uint32_t CModifierTableEntry::_internal_aura_provider_ehandle() const {
  return _impl_.aura_provider_ehandle_;
}
inline uint32_t CModifierTableEntry::aura_provider_ehandle() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.aura_provider_ehandle)
  return _internal_aura_provider_ehandle();
}
inline void CModifierTableEntry::_internal_set_aura_provider_ehandle(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000400u;
  _impl_.aura_provider_ehandle_ = value;
}
inline void CModifierTableEntry::set_aura_provider_ehandle(uint32_t value) {
  _internal_set_aura_provider_ehandle(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.aura_provider_ehandle)
}

// optional uint32 ability_subclass = 13;
inline bool CModifierTableEntry::_internal_has_ability_subclass() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_ability_subclass() const {
  return _internal_has_ability_subclass();
}
inline void CModifierTableEntry::clear_ability_subclass() {
  _impl_.ability_subclass_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CModifierTableEntry::_internal_ability_subclass() const {
  return _impl_.ability_subclass_;
}
inline uint32_t CModifierTableEntry::ability_subclass() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.ability_subclass)
  return _internal_ability_subclass();
}
inline void CModifierTableEntry::_internal_set_ability_subclass(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.ability_subclass_ = value;
}
inline void CModifierTableEntry::set_ability_subclass(uint32_t value) {
  _internal_set_ability_subclass(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.ability_subclass)
}

// optional bool bool1_ = 20;
inline bool CModifierTableEntry::_internal_has_bool1_() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_bool1_() const {
  return _internal_has_bool1_();
}
inline void CModifierTableEntry::clear_bool1_() {
  _impl_.bool1__ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool CModifierTableEntry::_internal_bool1_() const {
  return _impl_.bool1__;
}
inline bool CModifierTableEntry::bool1_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.bool1_)
  return _internal_bool1_();
}
inline void CModifierTableEntry::_internal_set_bool1_(bool value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.bool1__ = value;
}
inline void CModifierTableEntry::set_bool1_(bool value) {
  _internal_set_bool1_(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.bool1_)
}

// optional bool bool2_ = 21;
inline bool CModifierTableEntry::_internal_has_bool2_() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_bool2_() const {
  return _internal_has_bool2_();
}
inline void CModifierTableEntry::clear_bool2_() {
  _impl_.bool2__ = false;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline bool CModifierTableEntry::_internal_bool2_() const {
  return _impl_.bool2__;
}
inline bool CModifierTableEntry::bool2_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.bool2_)
  return _internal_bool2_();
}
inline void CModifierTableEntry::_internal_set_bool2_(bool value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.bool2__ = value;
}
inline void CModifierTableEntry::set_bool2_(bool value) {
  _internal_set_bool2_(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.bool2_)
}

// optional bool bool3_ = 22;
inline bool CModifierTableEntry::_internal_has_bool3_() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_bool3_() const {
  return _internal_has_bool3_();
}
inline void CModifierTableEntry::clear_bool3_() {
  _impl_.bool3__ = false;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline bool CModifierTableEntry::_internal_bool3_() const {
  return _impl_.bool3__;
}
inline bool CModifierTableEntry::bool3_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.bool3_)
  return _internal_bool3_();
}
inline void CModifierTableEntry::_internal_set_bool3_(bool value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.bool3__ = value;
}
inline void CModifierTableEntry::set_bool3_(bool value) {
  _internal_set_bool3_(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.bool3_)
}

// optional bool bool4_ = 23;
inline bool CModifierTableEntry::_internal_has_bool4_() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_bool4_() const {
  return _internal_has_bool4_();
}
inline void CModifierTableEntry::clear_bool4_() {
  _impl_.bool4__ = false;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline bool CModifierTableEntry::_internal_bool4_() const {
  return _impl_.bool4__;
}
inline bool CModifierTableEntry::bool4_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.bool4_)
  return _internal_bool4_();
}
inline void CModifierTableEntry::_internal_set_bool4_(bool value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.bool4__ = value;
}
inline void CModifierTableEntry::set_bool4_(bool value) {
  _internal_set_bool4_(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.bool4_)
}

// optional int32 int1_ = 25;
inline bool CModifierTableEntry::_internal_has_int1_() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_int1_() const {
  return _internal_has_int1_();
}
inline void CModifierTableEntry::clear_int1_() {
  _impl_.int1__ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline int32_t CModifierTableEntry::_internal_int1_() const {
  return _impl_.int1__;
}
inline int32_t CModifierTableEntry::int1_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.int1_)
  return _internal_int1_();
}
inline void CModifierTableEntry::_internal_set_int1_(int32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.int1__ = value;
}
inline void CModifierTableEntry::set_int1_(int32_t value) {
  _internal_set_int1_(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.int1_)
}

// optional int32 int2_ = 26;
inline bool CModifierTableEntry::_internal_has_int2_() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_int2_() const {
  return _internal_has_int2_();
}
inline void CModifierTableEntry::clear_int2_() {
  _impl_.int2__ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline int32_t CModifierTableEntry::_internal_int2_() const {
  return _impl_.int2__;
}
inline int32_t CModifierTableEntry::int2_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.int2_)
  return _internal_int2_();
}
inline void CModifierTableEntry::_internal_set_int2_(int32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.int2__ = value;
}
inline void CModifierTableEntry::set_int2_(int32_t value) {
  _internal_set_int2_(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.int2_)
}

// optional int32 int3_ = 27;
inline bool CModifierTableEntry::_internal_has_int3_() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_int3_() const {
  return _internal_has_int3_();
}
inline void CModifierTableEntry::clear_int3_() {
  _impl_.int3__ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline int32_t CModifierTableEntry::_internal_int3_() const {
  return _impl_.int3__;
}
inline int32_t CModifierTableEntry::int3_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.int3_)
  return _internal_int3_();
}
inline void CModifierTableEntry::_internal_set_int3_(int32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.int3__ = value;
}
inline void CModifierTableEntry::set_int3_(int32_t value) {
  _internal_set_int3_(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.int3_)
}

// optional int32 int4_ = 28;
inline bool CModifierTableEntry::_internal_has_int4_() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_int4_() const {
  return _internal_has_int4_();
}
inline void CModifierTableEntry::clear_int4_() {
  _impl_.int4__ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline int32_t CModifierTableEntry::_internal_int4_() const {
  return _impl_.int4__;
}
inline int32_t CModifierTableEntry::int4_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.int4_)
  return _internal_int4_();
}
inline void CModifierTableEntry::_internal_set_int4_(int32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.int4__ = value;
}
inline void CModifierTableEntry::set_int4_(int32_t value) {
  _internal_set_int4_(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.int4_)
}

// optional float float1_ = 30;
inline bool CModifierTableEntry::_internal_has_float1_() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_float1_() const {
  return _internal_has_float1_();
}
inline void CModifierTableEntry::clear_float1_() {
  _impl_.float1__ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline float CModifierTableEntry::_internal_float1_() const {
  return _impl_.float1__;
}
inline float CModifierTableEntry::float1_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.float1_)
  return _internal_float1_();
}
inline void CModifierTableEntry::_internal_set_float1_(float value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.float1__ = value;
}
inline void CModifierTableEntry::set_float1_(float value) {
  _internal_set_float1_(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.float1_)
}

// optional float float2_ = 31;
inline bool CModifierTableEntry::_internal_has_float2_() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_float2_() const {
  return _internal_has_float2_();
}
inline void CModifierTableEntry::clear_float2_() {
  _impl_.float2__ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline float CModifierTableEntry::_internal_float2_() const {
  return _impl_.float2__;
}
inline float CModifierTableEntry::float2_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.float2_)
  return _internal_float2_();
}
inline void CModifierTableEntry::_internal_set_float2_(float value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.float2__ = value;
}
inline void CModifierTableEntry::set_float2_(float value) {
  _internal_set_float2_(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.float2_)
}

// optional float float3_ = 32;
inline bool CModifierTableEntry::_internal_has_float3_() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_float3_() const {
  return _internal_has_float3_();
}
inline void CModifierTableEntry::clear_float3_() {
  _impl_.float3__ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline float CModifierTableEntry::_internal_float3_() const {
  return _impl_.float3__;
}
inline float CModifierTableEntry::float3_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.float3_)
  return _internal_float3_();
}
inline void CModifierTableEntry::_internal_set_float3_(float value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.float3__ = value;
}
inline void CModifierTableEntry::set_float3_(float value) {
  _internal_set_float3_(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.float3_)
}

// optional float float4_ = 33;
inline bool CModifierTableEntry::_internal_has_float4_() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_float4_() const {
  return _internal_has_float4_();
}
inline void CModifierTableEntry::clear_float4_() {
  _impl_.float4__ = 0;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline float CModifierTableEntry::_internal_float4_() const {
  return _impl_.float4__;
}
inline float CModifierTableEntry::float4_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.float4_)
  return _internal_float4_();
}
inline void CModifierTableEntry::_internal_set_float4_(float value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.float4__ = value;
}
inline void CModifierTableEntry::set_float4_(float value) {
  _internal_set_float4_(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.float4_)
}

// optional float float5_ = 49;
inline bool CModifierTableEntry::_internal_has_float5_() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_float5_() const {
  return _internal_has_float5_();
}
inline void CModifierTableEntry::clear_float5_() {
  _impl_.float5__ = 0;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline float CModifierTableEntry::_internal_float5_() const {
  return _impl_.float5__;
}
inline float CModifierTableEntry::float5_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.float5_)
  return _internal_float5_();
}
inline void CModifierTableEntry::_internal_set_float5_(float value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.float5__ = value;
}
inline void CModifierTableEntry::set_float5_(float value) {
  _internal_set_float5_(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.float5_)
}

// optional float float6_ = 50;
inline bool CModifierTableEntry::_internal_has_float6_() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_float6_() const {
  return _internal_has_float6_();
}
inline void CModifierTableEntry::clear_float6_() {
  _impl_.float6__ = 0;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline float CModifierTableEntry::_internal_float6_() const {
  return _impl_.float6__;
}
inline float CModifierTableEntry::float6_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.float6_)
  return _internal_float6_();
}
inline void CModifierTableEntry::_internal_set_float6_(float value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.float6__ = value;
}
inline void CModifierTableEntry::set_float6_(float value) {
  _internal_set_float6_(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.float6_)
}

// optional float float7_ = 51;
inline bool CModifierTableEntry::_internal_has_float7_() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_float7_() const {
  return _internal_has_float7_();
}
inline void CModifierTableEntry::clear_float7_() {
  _impl_.float7__ = 0;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline float CModifierTableEntry::_internal_float7_() const {
  return _impl_.float7__;
}
inline float CModifierTableEntry::float7_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.float7_)
  return _internal_float7_();
}
inline void CModifierTableEntry::_internal_set_float7_(float value) {
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.float7__ = value;
}
inline void CModifierTableEntry::set_float7_(float value) {
  _internal_set_float7_(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.float7_)
}

// optional float float8_ = 52;
inline bool CModifierTableEntry::_internal_has_float8_() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_float8_() const {
  return _internal_has_float8_();
}
inline void CModifierTableEntry::clear_float8_() {
  _impl_.float8__ = 0;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline float CModifierTableEntry::_internal_float8_() const {
  return _impl_.float8__;
}
inline float CModifierTableEntry::float8_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.float8_)
  return _internal_float8_();
}
inline void CModifierTableEntry::_internal_set_float8_(float value) {
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.float8__ = value;
}
inline void CModifierTableEntry::set_float8_(float value) {
  _internal_set_float8_(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.float8_)
}

// optional float float9_ = 53;
inline bool CModifierTableEntry::_internal_has_float9_() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_float9_() const {
  return _internal_has_float9_();
}
inline void CModifierTableEntry::clear_float9_() {
  _impl_.float9__ = 0;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline float CModifierTableEntry::_internal_float9_() const {
  return _impl_.float9__;
}
inline float CModifierTableEntry::float9_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.float9_)
  return _internal_float9_();
}
inline void CModifierTableEntry::_internal_set_float9_(float value) {
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.float9__ = value;
}
inline void CModifierTableEntry::set_float9_(float value) {
  _internal_set_float9_(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.float9_)
}

// optional float float10_ = 54;
inline bool CModifierTableEntry::_internal_has_float10_() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_float10_() const {
  return _internal_has_float10_();
}
inline void CModifierTableEntry::clear_float10_() {
  _impl_.float10__ = 0;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline float CModifierTableEntry::_internal_float10_() const {
  return _impl_.float10__;
}
inline float CModifierTableEntry::float10_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.float10_)
  return _internal_float10_();
}
inline void CModifierTableEntry::_internal_set_float10_(float value) {
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.float10__ = value;
}
inline void CModifierTableEntry::set_float10_(float value) {
  _internal_set_float10_(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.float10_)
}

// optional uint64 uint1_ = 35;
inline bool CModifierTableEntry::_internal_has_uint1_() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_uint1_() const {
  return _internal_has_uint1_();
}
inline void CModifierTableEntry::clear_uint1_() {
  _impl_.uint1__ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline uint64_t CModifierTableEntry::_internal_uint1_() const {
  return _impl_.uint1__;
}
inline uint64_t CModifierTableEntry::uint1_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.uint1_)
  return _internal_uint1_();
}
inline void CModifierTableEntry::_internal_set_uint1_(uint64_t value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.uint1__ = value;
}
inline void CModifierTableEntry::set_uint1_(uint64_t value) {
  _internal_set_uint1_(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.uint1_)
}

// optional uint64 uint2_ = 36;
inline bool CModifierTableEntry::_internal_has_uint2_() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_uint2_() const {
  return _internal_has_uint2_();
}
inline void CModifierTableEntry::clear_uint2_() {
  _impl_.uint2__ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline uint64_t CModifierTableEntry::_internal_uint2_() const {
  return _impl_.uint2__;
}
inline uint64_t CModifierTableEntry::uint2_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.uint2_)
  return _internal_uint2_();
}
inline void CModifierTableEntry::_internal_set_uint2_(uint64_t value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.uint2__ = value;
}
inline void CModifierTableEntry::set_uint2_(uint64_t value) {
  _internal_set_uint2_(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.uint2_)
}

// optional uint64 uint3_ = 37;
inline bool CModifierTableEntry::_internal_has_uint3_() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_uint3_() const {
  return _internal_has_uint3_();
}
inline void CModifierTableEntry::clear_uint3_() {
  _impl_.uint3__ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline uint64_t CModifierTableEntry::_internal_uint3_() const {
  return _impl_.uint3__;
}
inline uint64_t CModifierTableEntry::uint3_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.uint3_)
  return _internal_uint3_();
}
inline void CModifierTableEntry::_internal_set_uint3_(uint64_t value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.uint3__ = value;
}
inline void CModifierTableEntry::set_uint3_(uint64_t value) {
  _internal_set_uint3_(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.uint3_)
}

// optional uint64 uint4_ = 38;
inline bool CModifierTableEntry::_internal_has_uint4_() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_uint4_() const {
  return _internal_has_uint4_();
}
inline void CModifierTableEntry::clear_uint4_() {
  _impl_.uint4__ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline uint64_t CModifierTableEntry::_internal_uint4_() const {
  return _impl_.uint4__;
}
inline uint64_t CModifierTableEntry::uint4_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.uint4_)
  return _internal_uint4_();
}
inline void CModifierTableEntry::_internal_set_uint4_(uint64_t value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.uint4__ = value;
}
inline void CModifierTableEntry::set_uint4_(uint64_t value) {
  _internal_set_uint4_(value);
  // @@protoc_insertion_point(field_set:CModifierTableEntry.uint4_)
}

// optional .CMsgVector vec1_ = 40;
inline bool CModifierTableEntry::_internal_has_vec1_() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vec1__ != nullptr);
  return value;
}
inline bool CModifierTableEntry::has_vec1_() const {
  return _internal_has_vec1_();
}
inline const ::CMsgVector& CModifierTableEntry::_internal_vec1_() const {
  const ::CMsgVector* p = _impl_.vec1__;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVector&>(
      ::_CMsgVector_default_instance_);
}
inline const ::CMsgVector& CModifierTableEntry::vec1_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.vec1_)
  return _internal_vec1_();
}
inline void CModifierTableEntry::unsafe_arena_set_allocated_vec1_(
    ::CMsgVector* vec1_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vec1__);
  }
  _impl_.vec1__ = vec1_;
  if (vec1_) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CModifierTableEntry.vec1_)
}
inline ::CMsgVector* CModifierTableEntry::release_vec1_() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::CMsgVector* temp = _impl_.vec1__;
  _impl_.vec1__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgVector* CModifierTableEntry::unsafe_arena_release_vec1_() {
  // @@protoc_insertion_point(field_release:CModifierTableEntry.vec1_)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::CMsgVector* temp = _impl_.vec1__;
  _impl_.vec1__ = nullptr;
  return temp;
}
inline ::CMsgVector* CModifierTableEntry::_internal_mutable_vec1_() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.vec1__ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVector>(GetArenaForAllocation());
    _impl_.vec1__ = p;
  }
  return _impl_.vec1__;
}
inline ::CMsgVector* CModifierTableEntry::mutable_vec1_() {
  ::CMsgVector* _msg = _internal_mutable_vec1_();
  // @@protoc_insertion_point(field_mutable:CModifierTableEntry.vec1_)
  return _msg;
}
inline void CModifierTableEntry::set_allocated_vec1_(::CMsgVector* vec1_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vec1__);
  }
  if (vec1_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vec1_));
    if (message_arena != submessage_arena) {
      vec1_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vec1_, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.vec1__ = vec1_;
  // @@protoc_insertion_point(field_set_allocated:CModifierTableEntry.vec1_)
}

// optional .CMsgVector vec2_ = 41;
inline bool CModifierTableEntry::_internal_has_vec2_() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vec2__ != nullptr);
  return value;
}
inline bool CModifierTableEntry::has_vec2_() const {
  return _internal_has_vec2_();
}
inline const ::CMsgVector& CModifierTableEntry::_internal_vec2_() const {
  const ::CMsgVector* p = _impl_.vec2__;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVector&>(
      ::_CMsgVector_default_instance_);
}
inline const ::CMsgVector& CModifierTableEntry::vec2_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.vec2_)
  return _internal_vec2_();
}
inline void CModifierTableEntry::unsafe_arena_set_allocated_vec2_(
    ::CMsgVector* vec2_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vec2__);
  }
  _impl_.vec2__ = vec2_;
  if (vec2_) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CModifierTableEntry.vec2_)
}
inline ::CMsgVector* CModifierTableEntry::release_vec2_() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::CMsgVector* temp = _impl_.vec2__;
  _impl_.vec2__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgVector* CModifierTableEntry::unsafe_arena_release_vec2_() {
  // @@protoc_insertion_point(field_release:CModifierTableEntry.vec2_)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::CMsgVector* temp = _impl_.vec2__;
  _impl_.vec2__ = nullptr;
  return temp;
}
inline ::CMsgVector* CModifierTableEntry::_internal_mutable_vec2_() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.vec2__ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVector>(GetArenaForAllocation());
    _impl_.vec2__ = p;
  }
  return _impl_.vec2__;
}
inline ::CMsgVector* CModifierTableEntry::mutable_vec2_() {
  ::CMsgVector* _msg = _internal_mutable_vec2_();
  // @@protoc_insertion_point(field_mutable:CModifierTableEntry.vec2_)
  return _msg;
}
inline void CModifierTableEntry::set_allocated_vec2_(::CMsgVector* vec2_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vec2__);
  }
  if (vec2_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vec2_));
    if (message_arena != submessage_arena) {
      vec2_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vec2_, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.vec2__ = vec2_;
  // @@protoc_insertion_point(field_set_allocated:CModifierTableEntry.vec2_)
}

// optional .CMsgVector vec3_ = 42;
inline bool CModifierTableEntry::_internal_has_vec3_() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vec3__ != nullptr);
  return value;
}
inline bool CModifierTableEntry::has_vec3_() const {
  return _internal_has_vec3_();
}
inline const ::CMsgVector& CModifierTableEntry::_internal_vec3_() const {
  const ::CMsgVector* p = _impl_.vec3__;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVector&>(
      ::_CMsgVector_default_instance_);
}
inline const ::CMsgVector& CModifierTableEntry::vec3_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.vec3_)
  return _internal_vec3_();
}
inline void CModifierTableEntry::unsafe_arena_set_allocated_vec3_(
    ::CMsgVector* vec3_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vec3__);
  }
  _impl_.vec3__ = vec3_;
  if (vec3_) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CModifierTableEntry.vec3_)
}
inline ::CMsgVector* CModifierTableEntry::release_vec3_() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::CMsgVector* temp = _impl_.vec3__;
  _impl_.vec3__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgVector* CModifierTableEntry::unsafe_arena_release_vec3_() {
  // @@protoc_insertion_point(field_release:CModifierTableEntry.vec3_)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::CMsgVector* temp = _impl_.vec3__;
  _impl_.vec3__ = nullptr;
  return temp;
}
inline ::CMsgVector* CModifierTableEntry::_internal_mutable_vec3_() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.vec3__ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVector>(GetArenaForAllocation());
    _impl_.vec3__ = p;
  }
  return _impl_.vec3__;
}
inline ::CMsgVector* CModifierTableEntry::mutable_vec3_() {
  ::CMsgVector* _msg = _internal_mutable_vec3_();
  // @@protoc_insertion_point(field_mutable:CModifierTableEntry.vec3_)
  return _msg;
}
inline void CModifierTableEntry::set_allocated_vec3_(::CMsgVector* vec3_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vec3__);
  }
  if (vec3_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vec3_));
    if (message_arena != submessage_arena) {
      vec3_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vec3_, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.vec3__ = vec3_;
  // @@protoc_insertion_point(field_set_allocated:CModifierTableEntry.vec3_)
}

// optional .CMsgVector vec4_ = 43;
inline bool CModifierTableEntry::_internal_has_vec4_() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vec4__ != nullptr);
  return value;
}
inline bool CModifierTableEntry::has_vec4_() const {
  return _internal_has_vec4_();
}
inline const ::CMsgVector& CModifierTableEntry::_internal_vec4_() const {
  const ::CMsgVector* p = _impl_.vec4__;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVector&>(
      ::_CMsgVector_default_instance_);
}
inline const ::CMsgVector& CModifierTableEntry::vec4_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.vec4_)
  return _internal_vec4_();
}
inline void CModifierTableEntry::unsafe_arena_set_allocated_vec4_(
    ::CMsgVector* vec4_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vec4__);
  }
  _impl_.vec4__ = vec4_;
  if (vec4_) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CModifierTableEntry.vec4_)
}
inline ::CMsgVector* CModifierTableEntry::release_vec4_() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::CMsgVector* temp = _impl_.vec4__;
  _impl_.vec4__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgVector* CModifierTableEntry::unsafe_arena_release_vec4_() {
  // @@protoc_insertion_point(field_release:CModifierTableEntry.vec4_)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::CMsgVector* temp = _impl_.vec4__;
  _impl_.vec4__ = nullptr;
  return temp;
}
inline ::CMsgVector* CModifierTableEntry::_internal_mutable_vec4_() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.vec4__ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVector>(GetArenaForAllocation());
    _impl_.vec4__ = p;
  }
  return _impl_.vec4__;
}
inline ::CMsgVector* CModifierTableEntry::mutable_vec4_() {
  ::CMsgVector* _msg = _internal_mutable_vec4_();
  // @@protoc_insertion_point(field_mutable:CModifierTableEntry.vec4_)
  return _msg;
}
inline void CModifierTableEntry::set_allocated_vec4_(::CMsgVector* vec4_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vec4__);
  }
  if (vec4_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vec4_));
    if (message_arena != submessage_arena) {
      vec4_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vec4_, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.vec4__ = vec4_;
  // @@protoc_insertion_point(field_set_allocated:CModifierTableEntry.vec4_)
}

// optional string string1_ = 45;
inline bool CModifierTableEntry::_internal_has_string1_() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_string1_() const {
  return _internal_has_string1_();
}
inline void CModifierTableEntry::clear_string1_() {
  _impl_.string1__.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CModifierTableEntry::string1_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.string1_)
  return _internal_string1_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CModifierTableEntry::set_string1_(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.string1__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CModifierTableEntry.string1_)
}
inline std::string* CModifierTableEntry::mutable_string1_() {
  std::string* _s = _internal_mutable_string1_();
  // @@protoc_insertion_point(field_mutable:CModifierTableEntry.string1_)
  return _s;
}
inline const std::string& CModifierTableEntry::_internal_string1_() const {
  return _impl_.string1__.Get();
}
inline void CModifierTableEntry::_internal_set_string1_(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.string1__.Set(value, GetArenaForAllocation());
}
inline std::string* CModifierTableEntry::_internal_mutable_string1_() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.string1__.Mutable(GetArenaForAllocation());
}
inline std::string* CModifierTableEntry::release_string1_() {
  // @@protoc_insertion_point(field_release:CModifierTableEntry.string1_)
  if (!_internal_has_string1_()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.string1__.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.string1__.IsDefault()) {
    _impl_.string1__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CModifierTableEntry::set_allocated_string1_(std::string* string1_) {
  if (string1_ != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.string1__.SetAllocated(string1_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.string1__.IsDefault()) {
    _impl_.string1__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CModifierTableEntry.string1_)
}

// optional string string2_ = 46;
inline bool CModifierTableEntry::_internal_has_string2_() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_string2_() const {
  return _internal_has_string2_();
}
inline void CModifierTableEntry::clear_string2_() {
  _impl_.string2__.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CModifierTableEntry::string2_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.string2_)
  return _internal_string2_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CModifierTableEntry::set_string2_(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.string2__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CModifierTableEntry.string2_)
}
inline std::string* CModifierTableEntry::mutable_string2_() {
  std::string* _s = _internal_mutable_string2_();
  // @@protoc_insertion_point(field_mutable:CModifierTableEntry.string2_)
  return _s;
}
inline const std::string& CModifierTableEntry::_internal_string2_() const {
  return _impl_.string2__.Get();
}
inline void CModifierTableEntry::_internal_set_string2_(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.string2__.Set(value, GetArenaForAllocation());
}
inline std::string* CModifierTableEntry::_internal_mutable_string2_() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.string2__.Mutable(GetArenaForAllocation());
}
inline std::string* CModifierTableEntry::release_string2_() {
  // @@protoc_insertion_point(field_release:CModifierTableEntry.string2_)
  if (!_internal_has_string2_()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.string2__.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.string2__.IsDefault()) {
    _impl_.string2__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CModifierTableEntry::set_allocated_string2_(std::string* string2_) {
  if (string2_ != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.string2__.SetAllocated(string2_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.string2__.IsDefault()) {
    _impl_.string2__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CModifierTableEntry.string2_)
}

// optional string string3_ = 47;
inline bool CModifierTableEntry::_internal_has_string3_() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_string3_() const {
  return _internal_has_string3_();
}
inline void CModifierTableEntry::clear_string3_() {
  _impl_.string3__.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CModifierTableEntry::string3_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.string3_)
  return _internal_string3_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CModifierTableEntry::set_string3_(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.string3__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CModifierTableEntry.string3_)
}
inline std::string* CModifierTableEntry::mutable_string3_() {
  std::string* _s = _internal_mutable_string3_();
  // @@protoc_insertion_point(field_mutable:CModifierTableEntry.string3_)
  return _s;
}
inline const std::string& CModifierTableEntry::_internal_string3_() const {
  return _impl_.string3__.Get();
}
inline void CModifierTableEntry::_internal_set_string3_(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.string3__.Set(value, GetArenaForAllocation());
}
inline std::string* CModifierTableEntry::_internal_mutable_string3_() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.string3__.Mutable(GetArenaForAllocation());
}
inline std::string* CModifierTableEntry::release_string3_() {
  // @@protoc_insertion_point(field_release:CModifierTableEntry.string3_)
  if (!_internal_has_string3_()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.string3__.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.string3__.IsDefault()) {
    _impl_.string3__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CModifierTableEntry::set_allocated_string3_(std::string* string3_) {
  if (string3_ != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.string3__.SetAllocated(string3_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.string3__.IsDefault()) {
    _impl_.string3__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CModifierTableEntry.string3_)
}

// optional string string4_ = 48;
inline bool CModifierTableEntry::_internal_has_string4_() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CModifierTableEntry::has_string4_() const {
  return _internal_has_string4_();
}
inline void CModifierTableEntry::clear_string4_() {
  _impl_.string4__.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CModifierTableEntry::string4_() const {
  // @@protoc_insertion_point(field_get:CModifierTableEntry.string4_)
  return _internal_string4_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CModifierTableEntry::set_string4_(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.string4__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CModifierTableEntry.string4_)
}
inline std::string* CModifierTableEntry::mutable_string4_() {
  std::string* _s = _internal_mutable_string4_();
  // @@protoc_insertion_point(field_mutable:CModifierTableEntry.string4_)
  return _s;
}
inline const std::string& CModifierTableEntry::_internal_string4_() const {
  return _impl_.string4__.Get();
}
inline void CModifierTableEntry::_internal_set_string4_(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.string4__.Set(value, GetArenaForAllocation());
}
inline std::string* CModifierTableEntry::_internal_mutable_string4_() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.string4__.Mutable(GetArenaForAllocation());
}
inline std::string* CModifierTableEntry::release_string4_() {
  // @@protoc_insertion_point(field_release:CModifierTableEntry.string4_)
  if (!_internal_has_string4_()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.string4__.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.string4__.IsDefault()) {
    _impl_.string4__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CModifierTableEntry::set_allocated_string4_(std::string* string4_) {
  if (string4_ != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.string4__.SetAllocated(string4_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.string4__.IsDefault()) {
    _impl_.string4__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CModifierTableEntry.string4_)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::MODIFIER_ENTRY_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MODIFIER_ENTRY_TYPE>() {
  return ::MODIFIER_ENTRY_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_base_5fmodifier_2eproto
