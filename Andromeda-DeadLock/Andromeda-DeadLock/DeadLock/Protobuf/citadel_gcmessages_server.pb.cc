// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: citadel_gcmessages_server.proto

#include "citadel_gcmessages_server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgServerCrashSentinelFile_Player::CMsgServerCrashSentinelFile_Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.hero_id_)*/0u} {}
struct CMsgServerCrashSentinelFile_PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerCrashSentinelFile_PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerCrashSentinelFile_PlayerDefaultTypeInternal() {}
  union {
    CMsgServerCrashSentinelFile_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerCrashSentinelFile_PlayerDefaultTypeInternal _CMsgServerCrashSentinelFile_Player_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerCrashSentinelFile_GameInfo::CMsgServerCrashSentinelFile_GameInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}
  , /*decltype(_impl_.server_state_)*/0u
  , /*decltype(_impl_.match_mode_)*/0
  , /*decltype(_impl_.game_mode_)*/0
  , /*decltype(_impl_.was_server_shutdown_)*/false} {}
struct CMsgServerCrashSentinelFile_GameInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerCrashSentinelFile_GameInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerCrashSentinelFile_GameInfoDefaultTypeInternal() {}
  union {
    CMsgServerCrashSentinelFile_GameInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerCrashSentinelFile_GameInfoDefaultTypeInternal _CMsgServerCrashSentinelFile_GameInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerCrashSentinelFile::CMsgServerCrashSentinelFile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.game_info_)*/nullptr
  , /*decltype(_impl_.server_steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.version_)*/0u
  , /*decltype(_impl_.server_public_ip_addr_)*/0u
  , /*decltype(_impl_.server_port_)*/0u
  , /*decltype(_impl_.server_cluster_)*/0u
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.saved_time_)*/0u
  , /*decltype(_impl_.server_version_)*/0u
  , /*decltype(_impl_.server_private_ip_addr_)*/0u
  , /*decltype(_impl_.instance_id_)*/0u} {}
struct CMsgServerCrashSentinelFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerCrashSentinelFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerCrashSentinelFileDefaultTypeInternal() {}
  union {
    CMsgServerCrashSentinelFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerCrashSentinelFileDefaultTypeInternal _CMsgServerCrashSentinelFile_default_instance_;
PROTOBUF_CONSTEXPR CServerLobbyData_PlayerMMR_Player::CServerLobbyData_PlayerMMR_Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.player_mmr_)*/0u
  , /*decltype(_impl_.player_uncertainty_)*/0u
  , /*decltype(_impl_.hero_mmr_)*/0u
  , /*decltype(_impl_.hero_mmr_with_uncertainty_)*/0u} {}
struct CServerLobbyData_PlayerMMR_PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CServerLobbyData_PlayerMMR_PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CServerLobbyData_PlayerMMR_PlayerDefaultTypeInternal() {}
  union {
    CServerLobbyData_PlayerMMR_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CServerLobbyData_PlayerMMR_PlayerDefaultTypeInternal _CServerLobbyData_PlayerMMR_Player_default_instance_;
PROTOBUF_CONSTEXPR CServerLobbyData_PlayerMMR::CServerLobbyData_PlayerMMR(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CServerLobbyData_PlayerMMRDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CServerLobbyData_PlayerMMRDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CServerLobbyData_PlayerMMRDefaultTypeInternal() {}
  union {
    CServerLobbyData_PlayerMMR _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CServerLobbyData_PlayerMMRDefaultTypeInternal _CServerLobbyData_PlayerMMR_default_instance_;
PROTOBUF_CONSTEXPR CServerLobbyData_PlayerInfo::CServerLobbyData_PlayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_stats_)*/{}
  , /*decltype(_impl_.book_info_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.mmr_level_)*/0u} {}
struct CServerLobbyData_PlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CServerLobbyData_PlayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CServerLobbyData_PlayerInfoDefaultTypeInternal() {}
  union {
    CServerLobbyData_PlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CServerLobbyData_PlayerInfoDefaultTypeInternal _CServerLobbyData_PlayerInfo_default_instance_;
PROTOBUF_CONSTEXPR CServerLobbyData_PostMatchSurvey_PlayerSurvey::CServerLobbyData_PostMatchSurvey_PlayerSurvey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.question_id_)*/0u} {}
struct CServerLobbyData_PostMatchSurvey_PlayerSurveyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CServerLobbyData_PostMatchSurvey_PlayerSurveyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CServerLobbyData_PostMatchSurvey_PlayerSurveyDefaultTypeInternal() {}
  union {
    CServerLobbyData_PostMatchSurvey_PlayerSurvey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CServerLobbyData_PostMatchSurvey_PlayerSurveyDefaultTypeInternal _CServerLobbyData_PostMatchSurvey_PlayerSurvey_default_instance_;
PROTOBUF_CONSTEXPR CServerLobbyData_PostMatchSurvey::CServerLobbyData_PostMatchSurvey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.surveys_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CServerLobbyData_PostMatchSurveyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CServerLobbyData_PostMatchSurveyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CServerLobbyData_PostMatchSurveyDefaultTypeInternal() {}
  union {
    CServerLobbyData_PostMatchSurvey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CServerLobbyData_PostMatchSurveyDefaultTypeInternal _CServerLobbyData_PostMatchSurvey_default_instance_;
PROTOBUF_CONSTEXPR CServerLobbyData_AutoTest::CServerLobbyData_AutoTest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.max_duration_s_)*/0u} {}
struct CServerLobbyData_AutoTestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CServerLobbyData_AutoTestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CServerLobbyData_AutoTestDefaultTypeInternal() {}
  union {
    CServerLobbyData_AutoTest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CServerLobbyData_AutoTestDefaultTypeInternal _CServerLobbyData_AutoTest_default_instance_;
PROTOBUF_CONSTEXPR CSOCitadelServerDynamicLobby::CSOCitadelServerDynamicLobby(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.left_account_ids_)*/{}
  , /*decltype(_impl_._left_account_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}
  , /*decltype(_impl_.broadcast_active_)*/false
  , /*decltype(_impl_.spectator_count_)*/0u} {}
struct CSOCitadelServerDynamicLobbyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSOCitadelServerDynamicLobbyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSOCitadelServerDynamicLobbyDefaultTypeInternal() {}
  union {
    CSOCitadelServerDynamicLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSOCitadelServerDynamicLobbyDefaultTypeInternal _CSOCitadelServerDynamicLobby_default_instance_;
PROTOBUF_CONSTEXPR CSOCitadelServerStaticLobby_Member::CSOCitadelServerStaticLobby_Member(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.award_ids_)*/{}
  , /*decltype(_impl_.persona_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gc_account_data_)*/nullptr
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.team_)*/0
  , /*decltype(_impl_.player_slot_)*/0u
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.party_index_)*/0u
  , /*decltype(_impl_.platform_)*/0
  , /*decltype(_impl_.lane_id_)*/0u
  , /*decltype(_impl_.is_comms_restricted_)*/false
  , /*decltype(_impl_.party_desires_laning_together_)*/false
  , /*decltype(_impl_.hide_holiday_models_)*/false} {}
struct CSOCitadelServerStaticLobby_MemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSOCitadelServerStaticLobby_MemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSOCitadelServerStaticLobby_MemberDefaultTypeInternal() {}
  union {
    CSOCitadelServerStaticLobby_Member _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSOCitadelServerStaticLobby_MemberDefaultTypeInternal _CSOCitadelServerStaticLobby_Member_default_instance_;
PROTOBUF_CONSTEXPR CSOCitadelServerStaticLobby_DevSettings::CSOCitadelServerStaticLobby_DevSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.console_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CSOCitadelServerStaticLobby_DevSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSOCitadelServerStaticLobby_DevSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSOCitadelServerStaticLobby_DevSettingsDefaultTypeInternal() {}
  union {
    CSOCitadelServerStaticLobby_DevSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSOCitadelServerStaticLobby_DevSettingsDefaultTypeInternal _CSOCitadelServerStaticLobby_DevSettings_default_instance_;
PROTOBUF_CONSTEXPR CSOCitadelServerStaticLobby::CSOCitadelServerStaticLobby(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.extra_messages_)*/{}
  , /*decltype(_impl_.members_)*/{}
  , /*decltype(_impl_.level_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.broadcast_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dev_settings_)*/nullptr
  , /*decltype(_impl_.server_steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}
  , /*decltype(_impl_.replay_salt_)*/0u
  , /*decltype(_impl_.bot_difficulty_)*/0
  , /*decltype(_impl_.metadata_salt_)*/0u
  , /*decltype(_impl_.match_start_time_)*/0u
  , /*decltype(_impl_.experimental_gameplay_state_)*/0u
  , /*decltype(_impl_.region_mode_)*/0
  , /*decltype(_impl_.gc_provided_heroes_)*/false
  , /*decltype(_impl_.new_player_pool_)*/false
  , /*decltype(_impl_.low_pri_pool_)*/false
  , /*decltype(_impl_.is_restricted_access_)*/false
  , /*decltype(_impl_.cheats_enabled_)*/false
  , /*decltype(_impl_.duplicate_heroes_enabled_)*/false
  , /*decltype(_impl_.is_high_skill_range_parties_)*/false
  , /*decltype(_impl_.experimental_heroes_enabled_)*/false
  , /*decltype(_impl_.average_badge_team_0_)*/0u
  , /*decltype(_impl_.average_badge_team_1_)*/0u} {}
struct CSOCitadelServerStaticLobbyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSOCitadelServerStaticLobbyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSOCitadelServerStaticLobbyDefaultTypeInternal() {}
  union {
    CSOCitadelServerStaticLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSOCitadelServerStaticLobbyDefaultTypeInternal _CSOCitadelServerStaticLobby_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerSignoutData_ServerPerfStats_FrameCounts::CMsgServerSignoutData_ServerPerfStats_FrameCounts(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.num_frames_)*/0u
  , /*decltype(_impl_.longest_run_)*/0u
  , /*decltype(_impl_.num_runs_)*/0u} {}
struct CMsgServerSignoutData_ServerPerfStats_FrameCountsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerSignoutData_ServerPerfStats_FrameCountsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerSignoutData_ServerPerfStats_FrameCountsDefaultTypeInternal() {}
  union {
    CMsgServerSignoutData_ServerPerfStats_FrameCounts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerSignoutData_ServerPerfStats_FrameCountsDefaultTypeInternal _CMsgServerSignoutData_ServerPerfStats_FrameCounts_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerSignoutData_ServerPerfStats_PerfSample::CMsgServerSignoutData_ServerPerfStats_PerfSample(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.performant_frames_)*/nullptr
  , /*decltype(_impl_.long_frames_)*/nullptr
  , /*decltype(_impl_.low_idle_frames_)*/nullptr
  , /*decltype(_impl_.game_time_s_)*/0u
  , /*decltype(_impl_.avg_frame_)*/0
  , /*decltype(_impl_.avg_idle_)*/0
  , /*decltype(_impl_.total_frames_)*/0u
  , /*decltype(_impl_.memory_bytes_)*/uint64_t{0u}
  , /*decltype(_impl_.peak_memory_bytes_)*/uint64_t{0u}} {}
struct CMsgServerSignoutData_ServerPerfStats_PerfSampleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerSignoutData_ServerPerfStats_PerfSampleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerSignoutData_ServerPerfStats_PerfSampleDefaultTypeInternal() {}
  union {
    CMsgServerSignoutData_ServerPerfStats_PerfSample _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerSignoutData_ServerPerfStats_PerfSampleDefaultTypeInternal _CMsgServerSignoutData_ServerPerfStats_PerfSample_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples::CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.samples_)*/{}
  , /*decltype(_impl_.long_frame_threshold_)*/0
  , /*decltype(_impl_.low_idle_threshold_)*/0} {}
struct CMsgServerSignoutData_ServerPerfStats_MatchPerfSamplesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerSignoutData_ServerPerfStats_MatchPerfSamplesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerSignoutData_ServerPerfStats_MatchPerfSamplesDefaultTypeInternal() {}
  union {
    CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerSignoutData_ServerPerfStats_MatchPerfSamplesDefaultTypeInternal _CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerSignoutData_ServerPerfStats::CMsgServerSignoutData_ServerPerfStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.perf_samples_)*/nullptr
  , /*decltype(_impl_.peak_memory_bytes_)*/uint64_t{0u}
  , /*decltype(_impl_.end_memory_bytes_)*/uint64_t{0u}
  , /*decltype(_impl_.frame_time_max_micro_s_)*/0u
  , /*decltype(_impl_.frame_time_95_micro_s_)*/0u
  , /*decltype(_impl_.frame_time_avg_micro_s_)*/0u
  , /*decltype(_impl_.frame_idle_time_95_micro_s_)*/0u
  , /*decltype(_impl_.frame_idle_time_avg_micro_s_)*/0u
  , /*decltype(_impl_.frame_time_80_micro_s_)*/0u
  , /*decltype(_impl_.frame_time_99_micro_s_)*/0u} {}
struct CMsgServerSignoutData_ServerPerfStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerSignoutData_ServerPerfStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerSignoutData_ServerPerfStatsDefaultTypeInternal() {}
  union {
    CMsgServerSignoutData_ServerPerfStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerSignoutData_ServerPerfStatsDefaultTypeInternal _CMsgServerSignoutData_ServerPerfStats_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCUpdateMatchInfo::CMsgServerToGCUpdateMatchInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}
  , /*decltype(_impl_.kills_team_0_)*/0u
  , /*decltype(_impl_.kills_team_1_)*/0u
  , /*decltype(_impl_.net_worth_team_0_)*/0u
  , /*decltype(_impl_.net_worth_team_1_)*/0u
  , /*decltype(_impl_.spectators_)*/0u
  , /*decltype(_impl_.open_spectator_slots_)*/0u
  , /*decltype(_impl_.objectives_mask_team0_)*/uint64_t{0u}
  , /*decltype(_impl_.objectives_mask_team1_)*/uint64_t{0u}} {}
struct CMsgServerToGCUpdateMatchInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCUpdateMatchInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCUpdateMatchInfoDefaultTypeInternal() {}
  union {
    CMsgServerToGCUpdateMatchInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCUpdateMatchInfoDefaultTypeInternal _CMsgServerToGCUpdateMatchInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCMatchSignoutPermission::CMsgServerToGCMatchSignoutPermission(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.signout_start_)*/0u
  , /*decltype(_impl_.permission_request_)*/0u
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.match_mode_)*/0} {}
struct CMsgServerToGCMatchSignoutPermissionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCMatchSignoutPermissionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchSignoutPermissionDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchSignoutPermission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCMatchSignoutPermissionDefaultTypeInternal _CMsgServerToGCMatchSignoutPermission_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCMatchSignoutPermissionResponse::CMsgServerToGCMatchSignoutPermissionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.requested_data_)*/{}
  , /*decltype(_impl_.can_sign_out_)*/false
  , /*decltype(_impl_.retry_time_s_)*/0u} {}
struct CMsgServerToGCMatchSignoutPermissionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCMatchSignoutPermissionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchSignoutPermissionResponseDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchSignoutPermissionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCMatchSignoutPermissionResponseDefaultTypeInternal _CMsgServerToGCMatchSignoutPermissionResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection::CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.disconnect_time_)*/0u
  , /*decltype(_impl_.connection_state_)*/0u
  , /*decltype(_impl_.reason_code_)*/0u
  , /*decltype(_impl_.reconnect_delay_)*/0u
  , /*decltype(_impl_.match_disconnect_time_)*/0u
  , /*decltype(_impl_.match_reconnect_delay_)*/0u} {}
struct CMsgServerSignoutData_Disconnections_CMsgMatchDisconnectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerSignoutData_Disconnections_CMsgMatchDisconnectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerSignoutData_Disconnections_CMsgMatchDisconnectionDefaultTypeInternal() {}
  union {
    CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerSignoutData_Disconnections_CMsgMatchDisconnectionDefaultTypeInternal _CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerSignoutData_Disconnections::CMsgServerSignoutData_Disconnections(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.disconnections_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgServerSignoutData_DisconnectionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerSignoutData_DisconnectionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerSignoutData_DisconnectionsDefaultTypeInternal() {}
  union {
    CMsgServerSignoutData_Disconnections _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerSignoutData_DisconnectionsDefaultTypeInternal _CMsgServerSignoutData_Disconnections_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerSignoutData_DetailedStats_Position::CMsgServerSignoutData_DetailedStats_Position(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0} {}
struct CMsgServerSignoutData_DetailedStats_PositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerSignoutData_DetailedStats_PositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerSignoutData_DetailedStats_PositionDefaultTypeInternal() {}
  union {
    CMsgServerSignoutData_DetailedStats_Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerSignoutData_DetailedStats_PositionDefaultTypeInternal _CMsgServerSignoutData_DetailedStats_Position_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerSignoutData_DetailedStats_TimeSample_Stats::CMsgServerSignoutData_DetailedStats_TimeSample_Stats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.net_worth_)*/0u
  , /*decltype(_impl_.kills_)*/0u
  , /*decltype(_impl_.deaths_)*/0u
  , /*decltype(_impl_.assists_)*/0u
  , /*decltype(_impl_.possible_creeps_)*/0u
  , /*decltype(_impl_.creep_kills_)*/0u
  , /*decltype(_impl_.neutral_kills_)*/0u
  , /*decltype(_impl_.creep_damage_)*/0u
  , /*decltype(_impl_.neutral_damage_)*/0u
  , /*decltype(_impl_.boss_damage_)*/0u
  , /*decltype(_impl_.player_damage_)*/0u
  , /*decltype(_impl_.denies_)*/0u
  , /*decltype(_impl_.player_healing_)*/0u
  , /*decltype(_impl_.ability_points_)*/0u
  , /*decltype(_impl_.self_healing_)*/0u
  , /*decltype(_impl_.player_damage_taken_)*/0u
  , /*decltype(_impl_.max_health_)*/0u
  , /*decltype(_impl_.weapon_power_)*/0u
  , /*decltype(_impl_.tech_power_)*/0u
  , /*decltype(_impl_.shots_hit_)*/0u
  , /*decltype(_impl_.shots_missed_)*/0u
  , /*decltype(_impl_.damage_absorbed_)*/0u
  , /*decltype(_impl_.absorption_provided_)*/0u
  , /*decltype(_impl_.heal_prevented_)*/0u
  , /*decltype(_impl_.heal_lost_)*/0u} {}
struct CMsgServerSignoutData_DetailedStats_TimeSample_StatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerSignoutData_DetailedStats_TimeSample_StatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerSignoutData_DetailedStats_TimeSample_StatsDefaultTypeInternal() {}
  union {
    CMsgServerSignoutData_DetailedStats_TimeSample_Stats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerSignoutData_DetailedStats_TimeSample_StatsDefaultTypeInternal _CMsgServerSignoutData_DetailedStats_TimeSample_Stats_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats::CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_)*/0u
  , /*decltype(_impl_.player_orb_)*/0u
  , /*decltype(_impl_.lane_creep_orb_)*/0u
  , /*decltype(_impl_.neutral_creep_orb_)*/0u
  , /*decltype(_impl_.boss_)*/0u
  , /*decltype(_impl_.boss_orb_)*/0u
  , /*decltype(_impl_.treasure_)*/0u
  , /*decltype(_impl_.denied_)*/0u
  , /*decltype(_impl_.death_loss_)*/0u
  , /*decltype(_impl_.lane_creep_)*/0u
  , /*decltype(_impl_.neutral_creep_)*/0u
  , /*decltype(_impl_.team_bonus_)*/0u} {}
struct CMsgServerSignoutData_DetailedStats_TimeSample_GoldStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerSignoutData_DetailedStats_TimeSample_GoldStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerSignoutData_DetailedStats_TimeSample_GoldStatsDefaultTypeInternal() {}
  union {
    CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerSignoutData_DetailedStats_TimeSample_GoldStatsDefaultTypeInternal _CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerSignoutData_DetailedStats_TimeSample::CMsgServerSignoutData_DetailedStats_TimeSample(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stats_)*/nullptr
  , /*decltype(_impl_.gold_stats_)*/nullptr
  , /*decltype(_impl_.match_time_s_)*/0u} {}
struct CMsgServerSignoutData_DetailedStats_TimeSampleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerSignoutData_DetailedStats_TimeSampleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerSignoutData_DetailedStats_TimeSampleDefaultTypeInternal() {}
  union {
    CMsgServerSignoutData_DetailedStats_TimeSample _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerSignoutData_DetailedStats_TimeSampleDefaultTypeInternal _CMsgServerSignoutData_DetailedStats_TimeSample_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerSignoutData_DetailedStats_Objective::CMsgServerSignoutData_DetailedStats_Objective(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.destroyed_time_s_)*/0u
  , /*decltype(_impl_.creep_damage_)*/0u
  , /*decltype(_impl_.creep_damage_mitigated_)*/0u
  , /*decltype(_impl_.player_damage_)*/0u
  , /*decltype(_impl_.player_damage_mitigated_)*/0u
  , /*decltype(_impl_.first_damage_time_s_)*/0u
  , /*decltype(_impl_.team_objective_id_)*/0
  , /*decltype(_impl_.team_)*/0} {}
struct CMsgServerSignoutData_DetailedStats_ObjectiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerSignoutData_DetailedStats_ObjectiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerSignoutData_DetailedStats_ObjectiveDefaultTypeInternal() {}
  union {
    CMsgServerSignoutData_DetailedStats_Objective _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerSignoutData_DetailedStats_ObjectiveDefaultTypeInternal _CMsgServerSignoutData_DetailedStats_Objective_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerSignoutData_DetailedStats_MidBoss::CMsgServerSignoutData_DetailedStats_MidBoss(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_killed_)*/0
  , /*decltype(_impl_.team_claimed_)*/0
  , /*decltype(_impl_.destroyed_time_s_)*/0u} {}
struct CMsgServerSignoutData_DetailedStats_MidBossDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerSignoutData_DetailedStats_MidBossDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerSignoutData_DetailedStats_MidBossDefaultTypeInternal() {}
  union {
    CMsgServerSignoutData_DetailedStats_MidBoss _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerSignoutData_DetailedStats_MidBossDefaultTypeInternal _CMsgServerSignoutData_DetailedStats_MidBoss_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerSignoutData_DetailedStats_Player::CMsgServerSignoutData_DetailedStats_Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.time_samples_)*/{}
  , /*decltype(_impl_.player_slot_)*/0u} {}
struct CMsgServerSignoutData_DetailedStats_PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerSignoutData_DetailedStats_PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerSignoutData_DetailedStats_PlayerDefaultTypeInternal() {}
  union {
    CMsgServerSignoutData_DetailedStats_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerSignoutData_DetailedStats_PlayerDefaultTypeInternal _CMsgServerSignoutData_DetailedStats_Player_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerSignoutData_DetailedStats::CMsgServerSignoutData_DetailedStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_stats_)*/{}
  , /*decltype(_impl_.objectives_)*/{}
  , /*decltype(_impl_.mid_boss_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgServerSignoutData_DetailedStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerSignoutData_DetailedStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerSignoutData_DetailedStatsDefaultTypeInternal() {}
  union {
    CMsgServerSignoutData_DetailedStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerSignoutData_DetailedStatsDefaultTypeInternal _CMsgServerSignoutData_DetailedStats_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerSignoutData_PerfData::CMsgServerSignoutData_PerfData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.average_frame_time_)*/{}
  , /*decltype(_impl_.max_frame_time_)*/{}
  , /*decltype(_impl_.average_compute_time_)*/{}
  , /*decltype(_impl_.max_compute_time_)*/{}
  , /*decltype(_impl_.average_client_tick_time_)*/{}
  , /*decltype(_impl_.max_client_tick_time_)*/{}
  , /*decltype(_impl_.average_client_simulate_time_)*/{}
  , /*decltype(_impl_.max_client_simulate_time_)*/{}
  , /*decltype(_impl_.average_output_time_)*/{}
  , /*decltype(_impl_.max_output_time_)*/{}
  , /*decltype(_impl_.average_wait_for_rendering_to_complete_time_)*/{}
  , /*decltype(_impl_.max_wait_for_rendering_to_complete_time_)*/{}
  , /*decltype(_impl_.average_swap_time_)*/{}
  , /*decltype(_impl_.max_swap_time_)*/{}
  , /*decltype(_impl_.average_frame_update_time_)*/{}
  , /*decltype(_impl_.max_frame_update_time_)*/{}
  , /*decltype(_impl_.average_idle_time_)*/{}
  , /*decltype(_impl_.max_idle_time_)*/{}
  , /*decltype(_impl_.average_input_processing_time_)*/{}
  , /*decltype(_impl_.max_input_processing_time_)*/{}
  , /*decltype(_impl_.server_average_frame_time_)*/0
  , /*decltype(_impl_.server_max_frame_time_)*/0} {}
struct CMsgServerSignoutData_PerfDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerSignoutData_PerfDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerSignoutData_PerfDataDefaultTypeInternal() {}
  union {
    CMsgServerSignoutData_PerfData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerSignoutData_PerfDataDefaultTypeInternal _CMsgServerSignoutData_PerfData_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerSignoutData_BookRewards_BookReward::CMsgServerSignoutData_BookRewards_BookReward(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.book_id_)*/0u
  , /*decltype(_impl_.xp_reward_)*/0u} {}
struct CMsgServerSignoutData_BookRewards_BookRewardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerSignoutData_BookRewards_BookRewardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerSignoutData_BookRewards_BookRewardDefaultTypeInternal() {}
  union {
    CMsgServerSignoutData_BookRewards_BookReward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerSignoutData_BookRewards_BookRewardDefaultTypeInternal _CMsgServerSignoutData_BookRewards_BookReward_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerSignoutData_BookRewards_AccountRewards::CMsgServerSignoutData_BookRewards_AccountRewards(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.book_reward_)*/nullptr
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CMsgServerSignoutData_BookRewards_AccountRewardsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerSignoutData_BookRewards_AccountRewardsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerSignoutData_BookRewards_AccountRewardsDefaultTypeInternal() {}
  union {
    CMsgServerSignoutData_BookRewards_AccountRewards _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerSignoutData_BookRewards_AccountRewardsDefaultTypeInternal _CMsgServerSignoutData_BookRewards_AccountRewards_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerSignoutData_BookRewards::CMsgServerSignoutData_BookRewards(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_rewards_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgServerSignoutData_BookRewardsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerSignoutData_BookRewardsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerSignoutData_BookRewardsDefaultTypeInternal() {}
  union {
    CMsgServerSignoutData_BookRewards _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerSignoutData_BookRewardsDefaultTypeInternal _CMsgServerSignoutData_BookRewards_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerSignoutData_AccountStatChanges_Stat::CMsgServerSignoutData_AccountStatChanges_Stat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.stat_id_)*/0u
  , /*decltype(_impl_.value_)*/0u
  , /*decltype(_impl_.medal_)*/0} {}
struct CMsgServerSignoutData_AccountStatChanges_StatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerSignoutData_AccountStatChanges_StatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerSignoutData_AccountStatChanges_StatDefaultTypeInternal() {}
  union {
    CMsgServerSignoutData_AccountStatChanges_Stat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerSignoutData_AccountStatChanges_StatDefaultTypeInternal _CMsgServerSignoutData_AccountStatChanges_Stat_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerSignoutData_AccountStatChanges_AccountStats::CMsgServerSignoutData_AccountStatChanges_AccountStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CMsgServerSignoutData_AccountStatChanges_AccountStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerSignoutData_AccountStatChanges_AccountStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerSignoutData_AccountStatChanges_AccountStatsDefaultTypeInternal() {}
  union {
    CMsgServerSignoutData_AccountStatChanges_AccountStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerSignoutData_AccountStatChanges_AccountStatsDefaultTypeInternal _CMsgServerSignoutData_AccountStatChanges_AccountStats_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerSignoutData_AccountStatChanges::CMsgServerSignoutData_AccountStatChanges(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_stats_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgServerSignoutData_AccountStatChangesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerSignoutData_AccountStatChangesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerSignoutData_AccountStatChangesDefaultTypeInternal() {}
  union {
    CMsgServerSignoutData_AccountStatChanges _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerSignoutData_AccountStatChangesDefaultTypeInternal _CMsgServerSignoutData_AccountStatChanges_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerSignoutData_PlayerChat_ChatLine::CMsgServerSignoutData_PlayerChat_ChatLine(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chat_line_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_slot_)*/0u
  , /*decltype(_impl_.game_time_)*/0
  , /*decltype(_impl_.team_only_)*/false} {}
struct CMsgServerSignoutData_PlayerChat_ChatLineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerSignoutData_PlayerChat_ChatLineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerSignoutData_PlayerChat_ChatLineDefaultTypeInternal() {}
  union {
    CMsgServerSignoutData_PlayerChat_ChatLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerSignoutData_PlayerChat_ChatLineDefaultTypeInternal _CMsgServerSignoutData_PlayerChat_ChatLine_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerSignoutData_PlayerChat::CMsgServerSignoutData_PlayerChat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chat_lines_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgServerSignoutData_PlayerChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerSignoutData_PlayerChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerSignoutData_PlayerChatDefaultTypeInternal() {}
  union {
    CMsgServerSignoutData_PlayerChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerSignoutData_PlayerChatDefaultTypeInternal _CMsgServerSignoutData_PlayerChat_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerSignoutData_PenalizedPlayers_Penalty::CMsgServerSignoutData_PenalizedPlayers_Penalty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.reason_)*/0
  , /*decltype(_impl_.match_time_s_)*/0u
  , /*decltype(_impl_.time_stamp_)*/0u} {}
struct CMsgServerSignoutData_PenalizedPlayers_PenaltyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerSignoutData_PenalizedPlayers_PenaltyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerSignoutData_PenalizedPlayers_PenaltyDefaultTypeInternal() {}
  union {
    CMsgServerSignoutData_PenalizedPlayers_Penalty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerSignoutData_PenalizedPlayers_PenaltyDefaultTypeInternal _CMsgServerSignoutData_PenalizedPlayers_Penalty_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerSignoutData_PenalizedPlayers::CMsgServerSignoutData_PenalizedPlayers(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.penalized_players_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgServerSignoutData_PenalizedPlayersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerSignoutData_PenalizedPlayersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerSignoutData_PenalizedPlayersDefaultTypeInternal() {}
  union {
    CMsgServerSignoutData_PenalizedPlayers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerSignoutData_PenalizedPlayersDefaultTypeInternal _CMsgServerSignoutData_PenalizedPlayers_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchData_PlayerItem::CMsgMatchData_PlayerItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_id_)*/0u
  , /*decltype(_impl_.game_time_s_)*/0u
  , /*decltype(_impl_.upgrade_id_)*/0u
  , /*decltype(_impl_.sold_time_s_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_.imbued_ability_id_)*/0u} {}
struct CMsgMatchData_PlayerItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchData_PlayerItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchData_PlayerItemDefaultTypeInternal() {}
  union {
    CMsgMatchData_PlayerItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchData_PlayerItemDefaultTypeInternal _CMsgMatchData_PlayerItem_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchData_PlayerInfo::CMsgMatchData_PlayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.team_)*/0
  , /*decltype(_impl_.player_slot_)*/0u
  , /*decltype(_impl_.hero_mmr_with_uncertainty_)*/0u
  , /*decltype(_impl_.player_mmr_)*/0u
  , /*decltype(_impl_.player_uncertainty_)*/0u
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.kills_)*/0u
  , /*decltype(_impl_.deaths_)*/0u
  , /*decltype(_impl_.net_worth_)*/0u
  , /*decltype(_impl_.assists_)*/0u
  , /*decltype(_impl_.hero_mmr_)*/0u
  , /*decltype(_impl_.gpm_10min_)*/0u
  , /*decltype(_impl_.gpm_15min_)*/0u
  , /*decltype(_impl_.gpm_20min_)*/0u
  , /*decltype(_impl_.gpm_25min_)*/0u
  , /*decltype(_impl_.gpm_30min_)*/0u
  , /*decltype(_impl_.gpm_35min_)*/0u
  , /*decltype(_impl_.gpm_end_)*/0u
  , /*decltype(_impl_.last_hits_)*/0u
  , /*decltype(_impl_.denies_)*/0u
  , /*decltype(_impl_.ability_points_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.assigned_lane_)*/0u
  , /*decltype(_impl_.party_index_)*/0u
  , /*decltype(_impl_.platform_)*/0
  , /*decltype(_impl_.ability_damage_)*/0u
  , /*decltype(_impl_.bullet_damage_)*/0u
  , /*decltype(_impl_.hero_bullets_hit_)*/0u
  , /*decltype(_impl_.hero_bullets_hit_crit_)*/0u
  , /*decltype(_impl_.player_healing_)*/0u
  , /*decltype(_impl_.hero_bullets_fired_)*/0u
  , /*decltype(_impl_.hero_incoming_bullets_fired_)*/0u
  , /*decltype(_impl_.hero_incoming_bullets_hit_)*/0u
  , /*decltype(_impl_.hero_incoming_bullets_crit_)*/0u
  , /*decltype(_impl_.time_dead_s_)*/0u
  , /*decltype(_impl_.player_bullet_damage_)*/0u
  , /*decltype(_impl_.player_ability_damage_)*/0u
  , /*decltype(_impl_.player_melee_damage_)*/0u
  , /*decltype(_impl_.abandon_match_time_s_)*/0u
  , /*decltype(_impl_.abandon_time_stamp_)*/0u
  , /*decltype(_impl_.trooper_kill_excluded_)*/0u
  , /*decltype(_impl_.hero_bullets_lucky_shots_)*/0u
  , /*decltype(_impl_.hero_build_id_)*/0u} {}
struct CMsgMatchData_PlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchData_PlayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchData_PlayerInfoDefaultTypeInternal() {}
  union {
    CMsgMatchData_PlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchData_PlayerInfoDefaultTypeInternal _CMsgMatchData_PlayerInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchData::CMsgMatchData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.match_duration_s_)*/0u
  , /*decltype(_impl_.end_reason_)*/0
  , /*decltype(_impl_.winning_team_)*/0
  , /*decltype(_impl_.objectives_mask_legacy_)*/0u
  , /*decltype(_impl_.server_version_)*/0u
  , /*decltype(_impl_.game_mode_)*/0
  , /*decltype(_impl_.objectives_mask_team0_)*/uint64_t{0u}
  , /*decltype(_impl_.match_mode_)*/0
  , /*decltype(_impl_.match_end_time_)*/0u
  , /*decltype(_impl_.objectives_mask_team1_)*/uint64_t{0u}
  , /*decltype(_impl_.stomp_score_)*/0
  , /*decltype(_impl_.safe_to_abandon_)*/false
  , /*decltype(_impl_.team_abandon_)*/false
  , /*decltype(_impl_.new_player_pool_)*/false
  , /*decltype(_impl_.low_pri_pool_)*/false} {}
struct CMsgMatchDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchDataDefaultTypeInternal() {}
  union {
    CMsgMatchData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchDataDefaultTypeInternal _CMsgMatchData_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCMatchSignout::CMsgServerToGCMatchSignout(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.additional_data_)*/{}
  , /*decltype(_impl_.match_data_)*/nullptr
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.signout_attempt_)*/0u
  , /*decltype(_impl_.cluster_id_)*/0u} {}
struct CMsgServerToGCMatchSignoutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCMatchSignoutDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchSignoutDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchSignout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCMatchSignoutDefaultTypeInternal _CMsgServerToGCMatchSignout_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCMatchSignoutResponse::CMsgServerToGCMatchSignoutResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/1} {}
struct CMsgServerToGCMatchSignoutResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCMatchSignoutResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchSignoutResponseDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchSignoutResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCMatchSignoutResponseDefaultTypeInternal _CMsgServerToGCMatchSignoutResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerWelcomeCitadel::CMsgServerWelcomeCitadel(
    ::_pbi::ConstantInitialized) {}
struct CMsgServerWelcomeCitadelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerWelcomeCitadelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerWelcomeCitadelDefaultTypeInternal() {}
  union {
    CMsgServerWelcomeCitadel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerWelcomeCitadelDefaultTypeInternal _CMsgServerWelcomeCitadel_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCIdlePing::CMsgServerToGCIdlePing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.server_version_)*/0u} {}
struct CMsgServerToGCIdlePingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCIdlePingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCIdlePingDefaultTypeInternal() {}
  union {
    CMsgServerToGCIdlePing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCIdlePingDefaultTypeInternal _CMsgServerToGCIdlePing_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToServerRequestPing::CMsgGCToServerRequestPing(
    ::_pbi::ConstantInitialized) {}
struct CMsgGCToServerRequestPingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToServerRequestPingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToServerRequestPingDefaultTypeInternal() {}
  union {
    CMsgGCToServerRequestPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToServerRequestPingDefaultTypeInternal _CMsgGCToServerRequestPing_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToServerAllocateForMatch::CMsgGCToServerAllocateForMatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}} {}
struct CMsgGCToServerAllocateForMatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToServerAllocateForMatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToServerAllocateForMatchDefaultTypeInternal() {}
  union {
    CMsgGCToServerAllocateForMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToServerAllocateForMatchDefaultTypeInternal _CMsgGCToServerAllocateForMatch_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToServerAllocateForMatchResponse::CMsgGCToServerAllocateForMatchResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.success_)*/false} {}
struct CMsgGCToServerAllocateForMatchResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToServerAllocateForMatchResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToServerAllocateForMatchResponseDefaultTypeInternal() {}
  union {
    CMsgGCToServerAllocateForMatchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToServerAllocateForMatchResponseDefaultTypeInternal _CMsgGCToServerAllocateForMatchResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCEnterMatchmaking::CMsgServerToGCEnterMatchmaking(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.search_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sdr_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_version_)*/0u
  , /*decltype(_impl_.region_id_)*/0u
  , /*decltype(_impl_.cluster_id_)*/0u
  , /*decltype(_impl_.server_public_ip_)*/0u
  , /*decltype(_impl_.server_private_ip_)*/0u
  , /*decltype(_impl_.server_port_)*/0u} {}
struct CMsgServerToGCEnterMatchmakingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCEnterMatchmakingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCEnterMatchmakingDefaultTypeInternal() {}
  union {
    CMsgServerToGCEnterMatchmaking _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCEnterMatchmakingDefaultTypeInternal _CMsgServerToGCEnterMatchmaking_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToServerCancelAllocateForMatch::CMsgGCToServerCancelAllocateForMatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}} {}
struct CMsgGCToServerCancelAllocateForMatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToServerCancelAllocateForMatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToServerCancelAllocateForMatchDefaultTypeInternal() {}
  union {
    CMsgGCToServerCancelAllocateForMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToServerCancelAllocateForMatchDefaultTypeInternal _CMsgGCToServerCancelAllocateForMatch_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCUpdateLobbyServerState::CMsgServerToGCUpdateLobbyServerState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}
  , /*decltype(_impl_.server_state_)*/0
  , /*decltype(_impl_.safe_to_abandon_)*/false} {}
struct CMsgServerToGCUpdateLobbyServerStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCUpdateLobbyServerStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCUpdateLobbyServerStateDefaultTypeInternal() {}
  union {
    CMsgServerToGCUpdateLobbyServerState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCUpdateLobbyServerStateDefaultTypeInternal _CMsgServerToGCUpdateLobbyServerState_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCAbandonMatch_Player::CMsgServerToGCAbandonMatch_Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.additional_data_)*/uint64_t{0u}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.hero_id_)*/0u} {}
struct CMsgServerToGCAbandonMatch_PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCAbandonMatch_PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCAbandonMatch_PlayerDefaultTypeInternal() {}
  union {
    CMsgServerToGCAbandonMatch_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCAbandonMatch_PlayerDefaultTypeInternal _CMsgServerToGCAbandonMatch_Player_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCAbandonMatch::CMsgServerToGCAbandonMatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.server_steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}
  , /*decltype(_impl_.additional_data_)*/uint64_t{0u}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.cluster_id_)*/0u
  , /*decltype(_impl_.public_ip_address_)*/0u
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_.server_version_)*/0u
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.instance_id_)*/0u
  , /*decltype(_impl_.private_ip_address_)*/0u
  , /*decltype(_impl_.match_mode_)*/0
  , /*decltype(_impl_.game_mode_)*/0
  , /*decltype(_impl_.was_server_shutdown_)*/false
  , /*decltype(_impl_.reason_code_)*/1} {}
struct CMsgServerToGCAbandonMatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCAbandonMatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCAbandonMatchDefaultTypeInternal() {}
  union {
    CMsgServerToGCAbandonMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCAbandonMatchDefaultTypeInternal _CMsgServerToGCAbandonMatch_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCAbandonMatchResponse::CMsgServerToGCAbandonMatchResponse(
    ::_pbi::ConstantInitialized) {}
struct CMsgServerToGCAbandonMatchResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCAbandonMatchResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCAbandonMatchResponseDefaultTypeInternal() {}
  union {
    CMsgServerToGCAbandonMatchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCAbandonMatchResponseDefaultTypeInternal _CMsgServerToGCAbandonMatchResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCTestConnection::CMsgServerToGCTestConnection(
    ::_pbi::ConstantInitialized) {}
struct CMsgServerToGCTestConnectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCTestConnectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCTestConnectionDefaultTypeInternal() {}
  union {
    CMsgServerToGCTestConnection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCTestConnectionDefaultTypeInternal _CMsgServerToGCTestConnection_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCTestConnectionResponse::CMsgServerToGCTestConnectionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}
  , /*decltype(_impl_.state_)*/0u} {}
struct CMsgServerToGCTestConnectionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCTestConnectionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCTestConnectionResponseDefaultTypeInternal() {}
  union {
    CMsgServerToGCTestConnectionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCTestConnectionResponseDefaultTypeInternal _CMsgServerToGCTestConnectionResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToServerSetServerConVar::CMsgGCToServerSetServerConVar(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.convar_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.convar_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CMsgGCToServerSetServerConVarDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToServerSetServerConVarDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToServerSetServerConVarDefaultTypeInternal() {}
  union {
    CMsgGCToServerSetServerConVar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToServerSetServerConVarDefaultTypeInternal _CMsgGCToServerSetServerConVar_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToServerSetServerConVarResponse::CMsgGCToServerSetServerConVarResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.success_)*/false} {}
struct CMsgGCToServerSetServerConVarResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToServerSetServerConVarResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToServerSetServerConVarResponseDefaultTypeInternal() {}
  union {
    CMsgGCToServerSetServerConVarResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToServerSetServerConVarResponseDefaultTypeInternal _CMsgGCToServerSetServerConVarResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToServerAddSpectator::CMsgGCToServerAddSpectator(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.account_to_spectate_)*/0u} {}
struct CMsgGCToServerAddSpectatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToServerAddSpectatorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToServerAddSpectatorDefaultTypeInternal() {}
  union {
    CMsgGCToServerAddSpectator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToServerAddSpectatorDefaultTypeInternal _CMsgGCToServerAddSpectator_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToServerAddSpectatorResponse::CMsgGCToServerAddSpectatorResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.requesting_account_id_)*/0u} {}
struct CMsgGCToServerAddSpectatorResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToServerAddSpectatorResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToServerAddSpectatorResponseDefaultTypeInternal() {}
  union {
    CMsgGCToServerAddSpectatorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToServerAddSpectatorResponseDefaultTypeInternal _CMsgGCToServerAddSpectatorResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCReportCheater::CMsgServerToGCReportCheater(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.record_data_only_)*/false
  , /*decltype(_impl_.cheater_score_)*/0} {}
struct CMsgServerToGCReportCheaterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCReportCheaterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCReportCheaterDefaultTypeInternal() {}
  union {
    CMsgServerToGCReportCheater _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCReportCheaterDefaultTypeInternal _CMsgServerToGCReportCheater_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCReportCheaterResponse::CMsgServerToGCReportCheaterResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.success_)*/false} {}
struct CMsgServerToGCReportCheaterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCReportCheaterResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCReportCheaterResponseDefaultTypeInternal() {}
  union {
    CMsgServerToGCReportCheaterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCReportCheaterResponseDefaultTypeInternal _CMsgServerToGCReportCheaterResponse_default_instance_;
static ::_pb::Metadata file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[65];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_citadel_5fgcmessages_5fserver_2eproto[9];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_citadel_5fgcmessages_5fserver_2eproto = nullptr;

const uint32_t TableStruct_citadel_5fgcmessages_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgServerCrashSentinelFile_Player, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerCrashSentinelFile_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerCrashSentinelFile_Player, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerCrashSentinelFile_Player, _impl_.hero_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgServerCrashSentinelFile_GameInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerCrashSentinelFile_GameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerCrashSentinelFile_GameInfo, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerCrashSentinelFile_GameInfo, _impl_.lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerCrashSentinelFile_GameInfo, _impl_.server_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerCrashSentinelFile_GameInfo, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerCrashSentinelFile_GameInfo, _impl_.match_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerCrashSentinelFile_GameInfo, _impl_.game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerCrashSentinelFile_GameInfo, _impl_.was_server_shutdown_),
  0,
  1,
  2,
  ~0u,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgServerCrashSentinelFile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerCrashSentinelFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerCrashSentinelFile, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerCrashSentinelFile, _impl_.server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerCrashSentinelFile, _impl_.server_public_ip_addr_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerCrashSentinelFile, _impl_.server_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerCrashSentinelFile, _impl_.server_cluster_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerCrashSentinelFile, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerCrashSentinelFile, _impl_.saved_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerCrashSentinelFile, _impl_.server_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerCrashSentinelFile, _impl_.game_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerCrashSentinelFile, _impl_.server_private_ip_addr_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerCrashSentinelFile, _impl_.instance_id_),
  2,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::CServerLobbyData_PlayerMMR_Player, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CServerLobbyData_PlayerMMR_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CServerLobbyData_PlayerMMR_Player, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CServerLobbyData_PlayerMMR_Player, _impl_.player_mmr_),
  PROTOBUF_FIELD_OFFSET(::CServerLobbyData_PlayerMMR_Player, _impl_.player_uncertainty_),
  PROTOBUF_FIELD_OFFSET(::CServerLobbyData_PlayerMMR_Player, _impl_.hero_mmr_),
  PROTOBUF_FIELD_OFFSET(::CServerLobbyData_PlayerMMR_Player, _impl_.hero_mmr_with_uncertainty_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CServerLobbyData_PlayerMMR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CServerLobbyData_PlayerMMR, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::CServerLobbyData_PlayerInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CServerLobbyData_PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CServerLobbyData_PlayerInfo, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CServerLobbyData_PlayerInfo, _impl_.account_stats_),
  PROTOBUF_FIELD_OFFSET(::CServerLobbyData_PlayerInfo, _impl_.mmr_level_),
  PROTOBUF_FIELD_OFFSET(::CServerLobbyData_PlayerInfo, _impl_.book_info_),
  0,
  ~0u,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CServerLobbyData_PostMatchSurvey_PlayerSurvey, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CServerLobbyData_PostMatchSurvey_PlayerSurvey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CServerLobbyData_PostMatchSurvey_PlayerSurvey, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CServerLobbyData_PostMatchSurvey_PlayerSurvey, _impl_.question_id_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CServerLobbyData_PostMatchSurvey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CServerLobbyData_PostMatchSurvey, _impl_.surveys_),
  PROTOBUF_FIELD_OFFSET(::CServerLobbyData_AutoTest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CServerLobbyData_AutoTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CServerLobbyData_AutoTest, _impl_.max_duration_s_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerDynamicLobby, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerDynamicLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerDynamicLobby, _impl_.lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerDynamicLobby, _impl_.left_account_ids_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerDynamicLobby, _impl_.broadcast_active_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerDynamicLobby, _impl_.spectator_count_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby_Member, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby_Member, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby_Member, _impl_.persona_name_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby_Member, _impl_.team_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby_Member, _impl_.player_slot_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby_Member, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby_Member, _impl_.party_index_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby_Member, _impl_.platform_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby_Member, _impl_.award_ids_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby_Member, _impl_.is_comms_restricted_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby_Member, _impl_.lane_id_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby_Member, _impl_.gc_account_data_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby_Member, _impl_.party_desires_laning_together_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby_Member, _impl_.hide_holiday_models_),
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  9,
  8,
  1,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby_DevSettings, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby_DevSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby_DevSettings, _impl_.console_string_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby, _impl_.extra_messages_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby, _impl_.server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby, _impl_.lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby, _impl_.replay_salt_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby, _impl_.level_name_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby, _impl_.members_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby, _impl_.dev_settings_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby, _impl_.gc_provided_heroes_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby, _impl_.bot_difficulty_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby, _impl_.metadata_salt_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby, _impl_.match_start_time_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby, _impl_.experimental_gameplay_state_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby, _impl_.region_mode_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby, _impl_.broadcast_url_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby, _impl_.new_player_pool_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby, _impl_.low_pri_pool_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby, _impl_.is_restricted_access_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby, _impl_.cheats_enabled_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby, _impl_.duplicate_heroes_enabled_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby, _impl_.is_high_skill_range_parties_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby, _impl_.experimental_heroes_enabled_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby, _impl_.average_badge_team_0_),
  PROTOBUF_FIELD_OFFSET(::CSOCitadelServerStaticLobby, _impl_.average_badge_team_1_),
  ~0u,
  3,
  4,
  5,
  0,
  ~0u,
  2,
  11,
  6,
  7,
  8,
  9,
  10,
  1,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats_FrameCounts, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats_FrameCounts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats_FrameCounts, _impl_.num_frames_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats_FrameCounts, _impl_.longest_run_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats_FrameCounts, _impl_.num_runs_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats_PerfSample, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats_PerfSample, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats_PerfSample, _impl_.game_time_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats_PerfSample, _impl_.avg_frame_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats_PerfSample, _impl_.avg_idle_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats_PerfSample, _impl_.total_frames_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats_PerfSample, _impl_.performant_frames_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats_PerfSample, _impl_.long_frames_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats_PerfSample, _impl_.low_idle_frames_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats_PerfSample, _impl_.memory_bytes_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats_PerfSample, _impl_.peak_memory_bytes_),
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples, _impl_.long_frame_threshold_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples, _impl_.low_idle_threshold_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples, _impl_.samples_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats, _impl_.peak_memory_bytes_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats, _impl_.end_memory_bytes_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats, _impl_.frame_time_max_micro_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats, _impl_.frame_time_95_micro_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats, _impl_.frame_time_avg_micro_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats, _impl_.frame_idle_time_95_micro_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats, _impl_.frame_idle_time_avg_micro_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats, _impl_.frame_time_80_micro_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats, _impl_.frame_time_99_micro_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_ServerPerfStats, _impl_.perf_samples_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCUpdateMatchInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCUpdateMatchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCUpdateMatchInfo, _impl_.lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCUpdateMatchInfo, _impl_.kills_team_0_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCUpdateMatchInfo, _impl_.kills_team_1_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCUpdateMatchInfo, _impl_.net_worth_team_0_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCUpdateMatchInfo, _impl_.net_worth_team_1_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCUpdateMatchInfo, _impl_.spectators_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCUpdateMatchInfo, _impl_.open_spectator_slots_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCUpdateMatchInfo, _impl_.objectives_mask_team0_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCUpdateMatchInfo, _impl_.objectives_mask_team1_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchSignoutPermission, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchSignoutPermission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchSignoutPermission, _impl_.signout_start_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchSignoutPermission, _impl_.permission_request_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchSignoutPermission, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchSignoutPermission, _impl_.match_mode_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchSignoutPermissionResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchSignoutPermissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchSignoutPermissionResponse, _impl_.can_sign_out_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchSignoutPermissionResponse, _impl_.retry_time_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchSignoutPermissionResponse, _impl_.requested_data_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection, _impl_.disconnect_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection, _impl_.connection_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection, _impl_.reason_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection, _impl_.reconnect_delay_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection, _impl_.match_disconnect_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection, _impl_.match_reconnect_delay_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_Disconnections, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_Disconnections, _impl_.disconnections_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_Position, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_Position, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_Position, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_Position, _impl_.z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_.net_worth_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_.kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_.deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_.assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_.possible_creeps_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_.creep_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_.neutral_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_.creep_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_.neutral_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_.boss_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_.player_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_.denies_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_.player_healing_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_.ability_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_.self_healing_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_.player_damage_taken_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_.max_health_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_.weapon_power_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_.tech_power_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_.shots_hit_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_.shots_missed_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_.damage_absorbed_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_.absorption_provided_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_.heal_prevented_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_.heal_lost_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats, _impl_.player_orb_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats, _impl_.lane_creep_orb_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats, _impl_.neutral_creep_orb_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats, _impl_.boss_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats, _impl_.boss_orb_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats, _impl_.treasure_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats, _impl_.denied_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats, _impl_.death_loss_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats, _impl_.lane_creep_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats, _impl_.neutral_creep_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats, _impl_.team_bonus_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample, _impl_.match_time_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample, _impl_.stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_TimeSample, _impl_.gold_stats_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_Objective, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_Objective, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_Objective, _impl_.destroyed_time_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_Objective, _impl_.creep_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_Objective, _impl_.creep_damage_mitigated_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_Objective, _impl_.player_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_Objective, _impl_.player_damage_mitigated_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_Objective, _impl_.first_damage_time_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_Objective, _impl_.team_objective_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_Objective, _impl_.team_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_MidBoss, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_MidBoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_MidBoss, _impl_.team_killed_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_MidBoss, _impl_.team_claimed_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_MidBoss, _impl_.destroyed_time_s_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_Player, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_Player, _impl_.player_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats_Player, _impl_.time_samples_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats, _impl_.player_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats, _impl_.objectives_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_DetailedStats, _impl_.mid_boss_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PerfData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PerfData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PerfData, _impl_.average_frame_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PerfData, _impl_.max_frame_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PerfData, _impl_.server_average_frame_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PerfData, _impl_.server_max_frame_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PerfData, _impl_.average_compute_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PerfData, _impl_.max_compute_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PerfData, _impl_.average_client_tick_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PerfData, _impl_.max_client_tick_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PerfData, _impl_.average_client_simulate_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PerfData, _impl_.max_client_simulate_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PerfData, _impl_.average_output_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PerfData, _impl_.max_output_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PerfData, _impl_.average_wait_for_rendering_to_complete_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PerfData, _impl_.max_wait_for_rendering_to_complete_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PerfData, _impl_.average_swap_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PerfData, _impl_.max_swap_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PerfData, _impl_.average_frame_update_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PerfData, _impl_.max_frame_update_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PerfData, _impl_.average_idle_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PerfData, _impl_.max_idle_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PerfData, _impl_.average_input_processing_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PerfData, _impl_.max_input_processing_time_),
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_BookRewards_BookReward, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_BookRewards_BookReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_BookRewards_BookReward, _impl_.book_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_BookRewards_BookReward, _impl_.xp_reward_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_BookRewards_AccountRewards, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_BookRewards_AccountRewards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_BookRewards_AccountRewards, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_BookRewards_AccountRewards, _impl_.book_reward_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_BookRewards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_BookRewards, _impl_.account_rewards_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_AccountStatChanges_Stat, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_AccountStatChanges_Stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_AccountStatChanges_Stat, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_AccountStatChanges_Stat, _impl_.stat_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_AccountStatChanges_Stat, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_AccountStatChanges_Stat, _impl_.medal_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_AccountStatChanges_AccountStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_AccountStatChanges_AccountStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_AccountStatChanges_AccountStats, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_AccountStatChanges_AccountStats, _impl_.stats_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_AccountStatChanges, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_AccountStatChanges, _impl_.account_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PlayerChat_ChatLine, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PlayerChat_ChatLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PlayerChat_ChatLine, _impl_.player_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PlayerChat_ChatLine, _impl_.game_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PlayerChat_ChatLine, _impl_.team_only_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PlayerChat_ChatLine, _impl_.chat_line_),
  1,
  2,
  3,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PlayerChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PlayerChat, _impl_.chat_lines_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PenalizedPlayers_Penalty, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PenalizedPlayers_Penalty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PenalizedPlayers_Penalty, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PenalizedPlayers_Penalty, _impl_.reason_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PenalizedPlayers_Penalty, _impl_.match_time_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PenalizedPlayers_Penalty, _impl_.time_stamp_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PenalizedPlayers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerSignoutData_PenalizedPlayers, _impl_.penalized_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerItem, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerItem, _impl_.game_time_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerItem, _impl_.upgrade_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerItem, _impl_.sold_time_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerItem, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerItem, _impl_.imbued_ability_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.team_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.player_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.hero_mmr_with_uncertainty_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.player_mmr_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.player_uncertainty_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.net_worth_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.hero_mmr_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.gpm_10min_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.gpm_15min_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.gpm_20min_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.gpm_25min_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.gpm_30min_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.gpm_35min_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.gpm_end_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.last_hits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.denies_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.ability_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.assigned_lane_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.party_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.platform_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.ability_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.bullet_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.hero_bullets_hit_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.hero_bullets_hit_crit_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.player_healing_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.hero_bullets_fired_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.hero_incoming_bullets_fired_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.hero_incoming_bullets_hit_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.hero_incoming_bullets_crit_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.time_dead_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.player_bullet_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.player_ability_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.player_melee_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.abandon_match_time_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.abandon_time_stamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.trooper_kill_excluded_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.hero_bullets_lucky_shots_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData_PlayerInfo, _impl_.hero_build_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  ~0u,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData, _impl_.match_duration_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData, _impl_.end_reason_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData, _impl_.winning_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData, _impl_.objectives_mask_legacy_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData, _impl_.server_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData, _impl_.game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData, _impl_.match_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData, _impl_.objectives_mask_team0_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData, _impl_.objectives_mask_team1_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData, _impl_.match_end_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData, _impl_.stomp_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData, _impl_.safe_to_abandon_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData, _impl_.team_abandon_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData, _impl_.new_player_pool_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchData, _impl_.low_pri_pool_),
  0,
  1,
  2,
  ~0u,
  3,
  4,
  5,
  7,
  6,
  9,
  8,
  10,
  11,
  12,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchSignout, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchSignout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchSignout, _impl_.additional_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchSignout, _impl_.signout_attempt_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchSignout, _impl_.lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchSignout, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchSignout, _impl_.cluster_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchSignout, _impl_.match_data_),
  ~0u,
  3,
  1,
  2,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchSignoutResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchSignoutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchSignoutResponse, _impl_.result_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgServerWelcomeCitadel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCIdlePing, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCIdlePing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCIdlePing, _impl_.server_version_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerRequestPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerAllocateForMatch, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerAllocateForMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerAllocateForMatch, _impl_.match_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerAllocateForMatchResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerAllocateForMatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerAllocateForMatchResponse, _impl_.success_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCEnterMatchmaking, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCEnterMatchmaking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCEnterMatchmaking, _impl_.server_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCEnterMatchmaking, _impl_.search_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCEnterMatchmaking, _impl_.region_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCEnterMatchmaking, _impl_.cluster_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCEnterMatchmaking, _impl_.server_public_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCEnterMatchmaking, _impl_.server_private_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCEnterMatchmaking, _impl_.server_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCEnterMatchmaking, _impl_.sdr_address_),
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCancelAllocateForMatch, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCancelAllocateForMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCancelAllocateForMatch, _impl_.match_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCUpdateLobbyServerState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCUpdateLobbyServerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCUpdateLobbyServerState, _impl_.lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCUpdateLobbyServerState, _impl_.server_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCUpdateLobbyServerState, _impl_.safe_to_abandon_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCAbandonMatch_Player, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCAbandonMatch_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCAbandonMatch_Player, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCAbandonMatch_Player, _impl_.additional_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCAbandonMatch_Player, _impl_.hero_id_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCAbandonMatch, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCAbandonMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCAbandonMatch, _impl_.server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCAbandonMatch, _impl_.lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCAbandonMatch, _impl_.cluster_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCAbandonMatch, _impl_.reason_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCAbandonMatch, _impl_.additional_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCAbandonMatch, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCAbandonMatch, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCAbandonMatch, _impl_.public_ip_address_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCAbandonMatch, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCAbandonMatch, _impl_.server_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCAbandonMatch, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCAbandonMatch, _impl_.instance_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCAbandonMatch, _impl_.private_ip_address_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCAbandonMatch, _impl_.match_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCAbandonMatch, _impl_.game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCAbandonMatch, _impl_.was_server_shutdown_),
  0,
  1,
  4,
  14,
  2,
  3,
  ~0u,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCAbandonMatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCTestConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCTestConnectionResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCTestConnectionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCTestConnectionResponse, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCTestConnectionResponse, _impl_.lobby_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerSetServerConVar, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerSetServerConVar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerSetServerConVar, _impl_.convar_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerSetServerConVar, _impl_.convar_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerSetServerConVarResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerSetServerConVarResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerSetServerConVarResponse, _impl_.success_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerAddSpectator, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerAddSpectator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerAddSpectator, _impl_.lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerAddSpectator, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerAddSpectator, _impl_.account_to_spectate_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerAddSpectatorResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerAddSpectatorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerAddSpectatorResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerAddSpectatorResponse, _impl_.requesting_account_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCReportCheater, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCReportCheater, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCReportCheater, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCReportCheater, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCReportCheater, _impl_.lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCReportCheater, _impl_.reason_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCReportCheater, _impl_.record_data_only_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCReportCheater, _impl_.cheater_score_),
  3,
  1,
  2,
  0,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCReportCheaterResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCReportCheaterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCReportCheaterResponse, _impl_.success_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::CMsgServerCrashSentinelFile_Player)},
  { 10, 23, -1, sizeof(::CMsgServerCrashSentinelFile_GameInfo)},
  { 30, 47, -1, sizeof(::CMsgServerCrashSentinelFile)},
  { 58, 69, -1, sizeof(::CServerLobbyData_PlayerMMR_Player)},
  { 74, -1, -1, sizeof(::CServerLobbyData_PlayerMMR)},
  { 81, 91, -1, sizeof(::CServerLobbyData_PlayerInfo)},
  { 95, 103, -1, sizeof(::CServerLobbyData_PostMatchSurvey_PlayerSurvey)},
  { 105, -1, -1, sizeof(::CServerLobbyData_PostMatchSurvey)},
  { 112, 119, -1, sizeof(::CServerLobbyData_AutoTest)},
  { 120, 130, -1, sizeof(::CSOCitadelServerDynamicLobby)},
  { 134, 153, -1, sizeof(::CSOCitadelServerStaticLobby_Member)},
  { 166, 173, -1, sizeof(::CSOCitadelServerStaticLobby_DevSettings)},
  { 174, 203, -1, sizeof(::CSOCitadelServerStaticLobby)},
  { 226, 235, -1, sizeof(::CMsgServerSignoutData_ServerPerfStats_FrameCounts)},
  { 238, 253, -1, sizeof(::CMsgServerSignoutData_ServerPerfStats_PerfSample)},
  { 262, 271, -1, sizeof(::CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples)},
  { 274, 290, -1, sizeof(::CMsgServerSignoutData_ServerPerfStats)},
  { 300, 315, -1, sizeof(::CMsgServerToGCUpdateMatchInfo)},
  { 324, 334, -1, sizeof(::CMsgServerToGCMatchSignoutPermission)},
  { 338, 347, -1, sizeof(::CMsgServerToGCMatchSignoutPermissionResponse)},
  { 350, 363, -1, sizeof(::CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection)},
  { 370, -1, -1, sizeof(::CMsgServerSignoutData_Disconnections)},
  { 377, 386, -1, sizeof(::CMsgServerSignoutData_DetailedStats_Position)},
  { 389, 420, -1, sizeof(::CMsgServerSignoutData_DetailedStats_TimeSample_Stats)},
  { 445, 463, -1, sizeof(::CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats)},
  { 475, 484, -1, sizeof(::CMsgServerSignoutData_DetailedStats_TimeSample)},
  { 487, 501, -1, sizeof(::CMsgServerSignoutData_DetailedStats_Objective)},
  { 509, 518, -1, sizeof(::CMsgServerSignoutData_DetailedStats_MidBoss)},
  { 521, 529, -1, sizeof(::CMsgServerSignoutData_DetailedStats_Player)},
  { 531, -1, -1, sizeof(::CMsgServerSignoutData_DetailedStats)},
  { 540, 568, -1, sizeof(::CMsgServerSignoutData_PerfData)},
  { 590, 598, -1, sizeof(::CMsgServerSignoutData_BookRewards_BookReward)},
  { 600, 608, -1, sizeof(::CMsgServerSignoutData_BookRewards_AccountRewards)},
  { 610, -1, -1, sizeof(::CMsgServerSignoutData_BookRewards)},
  { 617, 627, -1, sizeof(::CMsgServerSignoutData_AccountStatChanges_Stat)},
  { 631, 639, -1, sizeof(::CMsgServerSignoutData_AccountStatChanges_AccountStats)},
  { 641, -1, -1, sizeof(::CMsgServerSignoutData_AccountStatChanges)},
  { 648, 658, -1, sizeof(::CMsgServerSignoutData_PlayerChat_ChatLine)},
  { 662, -1, -1, sizeof(::CMsgServerSignoutData_PlayerChat)},
  { 669, 679, -1, sizeof(::CMsgServerSignoutData_PenalizedPlayers_Penalty)},
  { 683, -1, -1, sizeof(::CMsgServerSignoutData_PenalizedPlayers)},
  { 690, 702, -1, sizeof(::CMsgMatchData_PlayerItem)},
  { 708, 759, -1, sizeof(::CMsgMatchData_PlayerInfo)},
  { 804, 826, -1, sizeof(::CMsgMatchData)},
  { 842, 854, -1, sizeof(::CMsgServerToGCMatchSignout)},
  { 860, 867, -1, sizeof(::CMsgServerToGCMatchSignoutResponse)},
  { 868, -1, -1, sizeof(::CMsgServerWelcomeCitadel)},
  { 874, 881, -1, sizeof(::CMsgServerToGCIdlePing)},
  { 882, -1, -1, sizeof(::CMsgGCToServerRequestPing)},
  { 888, 895, -1, sizeof(::CMsgGCToServerAllocateForMatch)},
  { 896, 903, -1, sizeof(::CMsgGCToServerAllocateForMatchResponse)},
  { 904, 918, -1, sizeof(::CMsgServerToGCEnterMatchmaking)},
  { 926, 933, -1, sizeof(::CMsgGCToServerCancelAllocateForMatch)},
  { 934, 943, -1, sizeof(::CMsgServerToGCUpdateLobbyServerState)},
  { 946, 955, -1, sizeof(::CMsgServerToGCAbandonMatch_Player)},
  { 958, 980, -1, sizeof(::CMsgServerToGCAbandonMatch)},
  { 996, -1, -1, sizeof(::CMsgServerToGCAbandonMatchResponse)},
  { 1002, -1, -1, sizeof(::CMsgServerToGCTestConnection)},
  { 1008, 1016, -1, sizeof(::CMsgServerToGCTestConnectionResponse)},
  { 1018, 1026, -1, sizeof(::CMsgGCToServerSetServerConVar)},
  { 1028, 1035, -1, sizeof(::CMsgGCToServerSetServerConVarResponse)},
  { 1036, 1045, -1, sizeof(::CMsgGCToServerAddSpectator)},
  { 1048, 1056, -1, sizeof(::CMsgGCToServerAddSpectatorResponse)},
  { 1058, 1070, -1, sizeof(::CMsgServerToGCReportCheater)},
  { 1076, 1083, -1, sizeof(::CMsgServerToGCReportCheaterResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CMsgServerCrashSentinelFile_Player_default_instance_._instance,
  &::_CMsgServerCrashSentinelFile_GameInfo_default_instance_._instance,
  &::_CMsgServerCrashSentinelFile_default_instance_._instance,
  &::_CServerLobbyData_PlayerMMR_Player_default_instance_._instance,
  &::_CServerLobbyData_PlayerMMR_default_instance_._instance,
  &::_CServerLobbyData_PlayerInfo_default_instance_._instance,
  &::_CServerLobbyData_PostMatchSurvey_PlayerSurvey_default_instance_._instance,
  &::_CServerLobbyData_PostMatchSurvey_default_instance_._instance,
  &::_CServerLobbyData_AutoTest_default_instance_._instance,
  &::_CSOCitadelServerDynamicLobby_default_instance_._instance,
  &::_CSOCitadelServerStaticLobby_Member_default_instance_._instance,
  &::_CSOCitadelServerStaticLobby_DevSettings_default_instance_._instance,
  &::_CSOCitadelServerStaticLobby_default_instance_._instance,
  &::_CMsgServerSignoutData_ServerPerfStats_FrameCounts_default_instance_._instance,
  &::_CMsgServerSignoutData_ServerPerfStats_PerfSample_default_instance_._instance,
  &::_CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples_default_instance_._instance,
  &::_CMsgServerSignoutData_ServerPerfStats_default_instance_._instance,
  &::_CMsgServerToGCUpdateMatchInfo_default_instance_._instance,
  &::_CMsgServerToGCMatchSignoutPermission_default_instance_._instance,
  &::_CMsgServerToGCMatchSignoutPermissionResponse_default_instance_._instance,
  &::_CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection_default_instance_._instance,
  &::_CMsgServerSignoutData_Disconnections_default_instance_._instance,
  &::_CMsgServerSignoutData_DetailedStats_Position_default_instance_._instance,
  &::_CMsgServerSignoutData_DetailedStats_TimeSample_Stats_default_instance_._instance,
  &::_CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats_default_instance_._instance,
  &::_CMsgServerSignoutData_DetailedStats_TimeSample_default_instance_._instance,
  &::_CMsgServerSignoutData_DetailedStats_Objective_default_instance_._instance,
  &::_CMsgServerSignoutData_DetailedStats_MidBoss_default_instance_._instance,
  &::_CMsgServerSignoutData_DetailedStats_Player_default_instance_._instance,
  &::_CMsgServerSignoutData_DetailedStats_default_instance_._instance,
  &::_CMsgServerSignoutData_PerfData_default_instance_._instance,
  &::_CMsgServerSignoutData_BookRewards_BookReward_default_instance_._instance,
  &::_CMsgServerSignoutData_BookRewards_AccountRewards_default_instance_._instance,
  &::_CMsgServerSignoutData_BookRewards_default_instance_._instance,
  &::_CMsgServerSignoutData_AccountStatChanges_Stat_default_instance_._instance,
  &::_CMsgServerSignoutData_AccountStatChanges_AccountStats_default_instance_._instance,
  &::_CMsgServerSignoutData_AccountStatChanges_default_instance_._instance,
  &::_CMsgServerSignoutData_PlayerChat_ChatLine_default_instance_._instance,
  &::_CMsgServerSignoutData_PlayerChat_default_instance_._instance,
  &::_CMsgServerSignoutData_PenalizedPlayers_Penalty_default_instance_._instance,
  &::_CMsgServerSignoutData_PenalizedPlayers_default_instance_._instance,
  &::_CMsgMatchData_PlayerItem_default_instance_._instance,
  &::_CMsgMatchData_PlayerInfo_default_instance_._instance,
  &::_CMsgMatchData_default_instance_._instance,
  &::_CMsgServerToGCMatchSignout_default_instance_._instance,
  &::_CMsgServerToGCMatchSignoutResponse_default_instance_._instance,
  &::_CMsgServerWelcomeCitadel_default_instance_._instance,
  &::_CMsgServerToGCIdlePing_default_instance_._instance,
  &::_CMsgGCToServerRequestPing_default_instance_._instance,
  &::_CMsgGCToServerAllocateForMatch_default_instance_._instance,
  &::_CMsgGCToServerAllocateForMatchResponse_default_instance_._instance,
  &::_CMsgServerToGCEnterMatchmaking_default_instance_._instance,
  &::_CMsgGCToServerCancelAllocateForMatch_default_instance_._instance,
  &::_CMsgServerToGCUpdateLobbyServerState_default_instance_._instance,
  &::_CMsgServerToGCAbandonMatch_Player_default_instance_._instance,
  &::_CMsgServerToGCAbandonMatch_default_instance_._instance,
  &::_CMsgServerToGCAbandonMatchResponse_default_instance_._instance,
  &::_CMsgServerToGCTestConnection_default_instance_._instance,
  &::_CMsgServerToGCTestConnectionResponse_default_instance_._instance,
  &::_CMsgGCToServerSetServerConVar_default_instance_._instance,
  &::_CMsgGCToServerSetServerConVarResponse_default_instance_._instance,
  &::_CMsgGCToServerAddSpectator_default_instance_._instance,
  &::_CMsgGCToServerAddSpectatorResponse_default_instance_._instance,
  &::_CMsgServerToGCReportCheater_default_instance_._instance,
  &::_CMsgServerToGCReportCheaterResponse_default_instance_._instance,
};

const char descriptor_table_protodef_citadel_5fgcmessages_5fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037citadel_gcmessages_server.proto\032\023steam"
  "messages.proto\032\026gcsdk_gcmessages.proto\032\037"
  "citadel_gcmessages_common.proto\"\213\005\n\033CMsg"
  "ServerCrashSentinelFile\022\017\n\007version\030\001 \001(\r"
  "\022\027\n\017server_steam_id\030\002 \001(\006\022\035\n\025server_publ"
  "ic_ip_addr\030\003 \001(\007\022\023\n\013server_port\030\004 \001(\r\022\026\n"
  "\016server_cluster\030\005 \001(\r\022\013\n\003pid\030\006 \001(\r\022\022\n\nsa"
  "ved_time\030\007 \001(\r\022\026\n\016server_version\030\010 \001(\r\0228"
  "\n\tgame_info\030\t \001(\0132%.CMsgServerCrashSenti"
  "nelFile.GameInfo\022\036\n\026server_private_ip_ad"
  "dr\030\n \001(\r\022\023\n\013instance_id\030\013 \001(\r\032-\n\006Player\022"
  "\022\n\naccount_id\030\001 \001(\r\022\017\n\007hero_id\030\002 \001(\r\032\236\002\n"
  "\010GameInfo\022\020\n\010match_id\030\001 \001(\004\022\020\n\010lobby_id\030"
  "\002 \001(\006\022\024\n\014server_state\030\003 \001(\r\0224\n\007players\030\005"
  " \003(\0132#.CMsgServerCrashSentinelFile.Playe"
  "r\022C\n\nmatch_mode\030\006 \001(\0162\022.ECitadelMatchMod"
  "e:\033k_ECitadelMatchMode_Invalid\022@\n\tgame_m"
  "ode\030\007 \001(\0162\021.ECitadelGameMode:\032k_ECitadel"
  "GameMode_Invalid\022\033\n\023was_server_shutdown\030"
  "\010 \001(\010\"\325\001\n\032CServerLobbyData_PlayerMMR\0223\n\007"
  "players\030\001 \003(\0132\".CServerLobbyData_PlayerM"
  "MR.Player\032\201\001\n\006Player\022\022\n\naccount_id\030\001 \001(\r"
  "\022\022\n\nplayer_mmr\030\002 \001(\r\022\032\n\022player_uncertain"
  "ty\030\003 \001(\r\022\020\n\010hero_mmr\030\004 \001(\r\022!\n\031hero_mmr_w"
  "ith_uncertainty\030\005 \001(\r\"\234\001\n\033CServerLobbyDa"
  "ta_PlayerInfo\022\022\n\naccount_id\030\001 \001(\r\022,\n\racc"
  "ount_stats\030\002 \003(\0132\025.CMsgAccountHeroStats\022"
  "\021\n\tmmr_level\030\004 \001(\r\022(\n\tbook_info\030\005 \003(\0132\025."
  "CMsgAccountBookStats\"\234\001\n CServerLobbyDat"
  "a_PostMatchSurvey\022\?\n\007surveys\030\001 \003(\0132..CSe"
  "rverLobbyData_PostMatchSurvey.PlayerSurv"
  "ey\0327\n\014PlayerSurvey\022\022\n\naccount_id\030\001 \001(\r\022\023"
  "\n\013question_id\030\002 \001(\r\"3\n\031CServerLobbyData_"
  "AutoTest\022\026\n\016max_duration_s\030\002 \001(\r\"\201\001\n\034CSO"
  "CitadelServerDynamicLobby\022\020\n\010lobby_id\030\001 "
  "\001(\004\022\034\n\020left_account_ids\030\002 \003(\rB\002\020\001\022\030\n\020bro"
  "adcast_active\030\003 \001(\010\022\027\n\017spectator_count\030\004"
  " \001(\r\"\277\n\n\033CSOCitadelServerStaticLobby\022\'\n\016"
  "extra_messages\030\001 \003(\0132\017.CExtraMsgBlock\022\027\n"
  "\017server_steam_id\030\002 \001(\006\022\020\n\010lobby_id\030\003 \001(\004"
  "\022\023\n\013replay_salt\030\004 \001(\007\022\022\n\nlevel_name\030\005 \001("
  "\t\0224\n\007members\030\006 \003(\0132#.CSOCitadelServerSta"
  "ticLobby.Member\022>\n\014dev_settings\030\007 \001(\0132(."
  "CSOCitadelServerStaticLobby.DevSettings\022"
  "\032\n\022gc_provided_heroes\030\010 \001(\010\022L\n\016bot_diffi"
  "culty\030\t \001(\0162\026.ECitadelBotDifficulty:\034k_E"
  "CitadelBotDifficulty_None\022\025\n\rmetadata_sa"
  "lt\030\n \001(\007\022\030\n\020match_start_time\030\013 \001(\r\022#\n\033ex"
  "perimental_gameplay_state\030\017 \001(\r\022B\n\013regio"
  "n_mode\030\020 \001(\0162\023.ECitadelRegionMode:\030k_ECi"
  "tadelRegionMode_ROW\022\025\n\rbroadcast_url\030\021 \001"
  "(\t\022\027\n\017new_player_pool\030\022 \001(\010\022\024\n\014low_pri_p"
  "ool\030\023 \001(\010\022\034\n\024is_restricted_access\030\024 \001(\010\022"
  "\026\n\016cheats_enabled\030\025 \001(\010\022 \n\030duplicate_her"
  "oes_enabled\030\026 \001(\010\022#\n\033is_high_skill_range"
  "_parties\030\027 \001(\010\022#\n\033experimental_heroes_en"
  "abled\030\030 \001(\010\022\034\n\024average_badge_team_0\030\031 \001("
  "\r\022\034\n\024average_badge_team_1\030\032 \001(\r\032\270\003\n\006Memb"
  "er\022\022\n\naccount_id\030\001 \001(\r\022\024\n\014persona_name\030\002"
  " \001(\t\022;\n\004team\030\003 \001(\0162\022.ECitadelLobbyTeam:\031"
  "k_ECitadelLobbyTeam_Team0\022\023\n\013player_slot"
  "\030\004 \001(\r\022\017\n\007hero_id\030\005 \001(\r\022\023\n\013party_index\030\006"
  " \001(\r\0222\n\010platform\030\007 \001(\0162\014.EGCPlatform:\022k_"
  "eGCPlatform_None\0229\n\taward_ids\030\010 \003(\0162&.CS"
  "OCitadelServerStaticLobby.EAwardIDs\022\033\n\023i"
  "s_comms_restricted\030\t \001(\010\022\017\n\007lane_id\030\n \001("
  "\r\022+\n\017gc_account_data\030\r \001(\0132\022.CMsgGCAccou"
  "ntData\022%\n\035party_desires_laning_together\030"
  "\016 \001(\010\022\033\n\023hide_holiday_models\030\017 \001(\010\032%\n\013De"
  "vSettings\022\026\n\016console_string\030\001 \001(\t\"#\n\tEAw"
  "ardIDs\022\026\n\022k_eAward_KingPanda\020\001\"\343\007\n%CMsgS"
  "erverSignoutData_ServerPerfStats\022\031\n\021peak"
  "_memory_bytes\030\001 \001(\004\022\030\n\020end_memory_bytes\030"
  "\002 \001(\004\022\036\n\026frame_time_max_micro_s\030\003 \001(\r\022\035\n"
  "\025frame_time_95_micro_s\030\004 \001(\r\022\036\n\026frame_ti"
  "me_avg_micro_s\030\005 \001(\r\022\"\n\032frame_idle_time_"
  "95_micro_s\030\006 \001(\r\022#\n\033frame_idle_time_avg_"
  "micro_s\030\007 \001(\r\022\035\n\025frame_time_80_micro_s\030\010"
  " \001(\r\022\035\n\025frame_time_99_micro_s\030\t \001(\r\022M\n\014p"
  "erf_samples\030\n \001(\01327.CMsgServerSignoutDat"
  "a_ServerPerfStats.MatchPerfSamples\032H\n\013Fr"
  "ameCounts\022\022\n\nnum_frames\030\001 \001(\r\022\023\n\013longest"
  "_run\030\002 \001(\r\022\020\n\010num_runs\030\003 \001(\r\032\362\002\n\nPerfSam"
  "ple\022\023\n\013game_time_s\030\001 \001(\r\022\021\n\tavg_frame\030\002 "
  "\001(\002\022\020\n\010avg_idle\030\003 \001(\002\022\024\n\014total_frames\030\004 "
  "\001(\r\022M\n\021performant_frames\030\005 \001(\01322.CMsgSer"
  "verSignoutData_ServerPerfStats.FrameCoun"
  "ts\022G\n\013long_frames\030\006 \001(\01322.CMsgServerSign"
  "outData_ServerPerfStats.FrameCounts\022K\n\017l"
  "ow_idle_frames\030\007 \001(\01322.CMsgServerSignout"
  "Data_ServerPerfStats.FrameCounts\022\024\n\014memo"
  "ry_bytes\030\010 \001(\004\022\031\n\021peak_memory_bytes\030\t \001("
  "\004\032\220\001\n\020MatchPerfSamples\022\034\n\024long_frame_thr"
  "eshold\030\001 \001(\002\022\032\n\022low_idle_threshold\030\002 \001(\002"
  "\022B\n\007samples\030\003 \003(\01321.CMsgServerSignoutDat"
  "a_ServerPerfStats.PerfSample\"\201\002\n\035CMsgSer"
  "verToGCUpdateMatchInfo\022\020\n\010lobby_id\030\001 \001(\004"
  "\022\024\n\014kills_team_0\030\003 \001(\r\022\024\n\014kills_team_1\030\004"
  " \001(\r\022\030\n\020net_worth_team_0\030\005 \001(\r\022\030\n\020net_wo"
  "rth_team_1\030\006 \001(\r\022\022\n\nspectators\030\007 \001(\r\022\034\n\024"
  "open_spectator_slots\030\010 \001(\r\022\035\n\025objectives"
  "_mask_team0\030\t \001(\004\022\035\n\025objectives_mask_tea"
  "m1\030\n \001(\004\"\260\001\n$CMsgServerToGCMatchSignoutP"
  "ermission\022\025\n\rsignout_start\030\001 \001(\r\022\032\n\022perm"
  "ission_request\030\002 \001(\r\022\020\n\010match_id\030\003 \001(\004\022C"
  "\n\nmatch_mode\030\004 \001(\0162\022.ECitadelMatchMode:\033"
  "k_ECitadelMatchMode_Invalid\"\211\001\n,CMsgServ"
  "erToGCMatchSignoutPermissionResponse\022\024\n\014"
  "can_sign_out\030\001 \001(\010\022\024\n\014retry_time_s\030\002 \001(\r"
  "\022-\n\016requested_data\030\003 \003(\0162\025.EGCServerSign"
  "outData\"\312\002\n$CMsgServerSignoutData_Discon"
  "nections\022T\n\016disconnections\030\001 \003(\0132<.CMsgS"
  "erverSignoutData_Disconnections.CMsgMatc"
  "hDisconnection\032\313\001\n\026CMsgMatchDisconnectio"
  "n\022\022\n\naccount_id\030\001 \001(\r\022\027\n\017disconnect_time"
  "\030\002 \001(\r\022\030\n\020connection_state\030\003 \001(\r\022\023\n\013reas"
  "on_code\030\004 \001(\r\022\027\n\017reconnect_delay\030\005 \001(\r\022\035"
  "\n\025match_disconnect_time\030\006 \001(\r\022\035\n\025match_r"
  "econnect_delay\030\007 \001(\r\"\312\016\n#CMsgServerSigno"
  "utData_DetailedStats\022A\n\014player_stats\030\001 \003"
  "(\0132+.CMsgServerSignoutData_DetailedStats"
  ".Player\022B\n\nobjectives\030\002 \003(\0132..CMsgServer"
  "SignoutData_DetailedStats.Objective\022>\n\010m"
  "id_boss\030\003 \003(\0132,.CMsgServerSignoutData_De"
  "tailedStats.MidBoss\032+\n\010Position\022\t\n\001x\030\001 \001"
  "(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\032\330\007\n\nTimeSample\022"
  "\024\n\014match_time_s\030\001 \001(\r\022D\n\005stats\030\002 \001(\01325.C"
  "MsgServerSignoutData_DetailedStats.TimeS"
  "ample.Stats\022M\n\ngold_stats\030\004 \001(\01329.CMsgSe"
  "rverSignoutData_DetailedStats.TimeSample"
  ".GoldStats\032\244\004\n\005Stats\022\021\n\tnet_worth\030\001 \001(\r\022"
  "\r\n\005kills\030\002 \001(\r\022\016\n\006deaths\030\003 \001(\r\022\017\n\007assist"
  "s\030\004 \001(\r\022\027\n\017possible_creeps\030\005 \001(\r\022\023\n\013cree"
  "p_kills\030\006 \001(\r\022\025\n\rneutral_kills\030\007 \001(\r\022\024\n\014"
  "creep_damage\030\010 \001(\r\022\026\n\016neutral_damage\030\t \001"
  "(\r\022\023\n\013boss_damage\030\n \001(\r\022\025\n\rplayer_damage"
  "\030\013 \001(\r\022\016\n\006denies\030\014 \001(\r\022\026\n\016player_healing"
  "\030\r \001(\r\022\026\n\016ability_points\030\016 \001(\r\022\024\n\014self_h"
  "ealing\030\017 \001(\r\022\033\n\023player_damage_taken\030\020 \001("
  "\r\022\022\n\nmax_health\030\021 \001(\r\022\024\n\014weapon_power\030\022 "
  "\001(\r\022\022\n\ntech_power\030\023 \001(\r\022\021\n\tshots_hit\030\024 \001"
  "(\r\022\024\n\014shots_missed\030\025 \001(\r\022\027\n\017damage_absor"
  "bed\030\026 \001(\r\022\033\n\023absorption_provided\030\027 \001(\r\022\026"
  "\n\016heal_prevented\030\032 \001(\r\022\021\n\theal_lost\030\033 \001("
  "\r\032\367\001\n\tGoldStats\022\016\n\006player\030\001 \001(\r\022\022\n\nplaye"
  "r_orb\030\002 \001(\r\022\026\n\016lane_creep_orb\030\003 \001(\r\022\031\n\021n"
  "eutral_creep_orb\030\004 \001(\r\022\014\n\004boss\030\005 \001(\r\022\020\n\010"
  "boss_orb\030\006 \001(\r\022\020\n\010treasure\030\007 \001(\r\022\016\n\006deni"
  "ed\030\010 \001(\r\022\022\n\ndeath_loss\030\t \001(\r\022\022\n\nlane_cre"
  "ep\030\n \001(\r\022\025\n\rneutral_creep\030\013 \001(\r\022\022\n\nteam_"
  "bonus\030\014 \001(\r\032\276\002\n\tObjective\022\030\n\020destroyed_t"
  "ime_s\030\002 \001(\r\022\024\n\014creep_damage\030\004 \001(\r\022\036\n\026cre"
  "ep_damage_mitigated\030\005 \001(\r\022\025\n\rplayer_dama"
  "ge\030\006 \001(\r\022\037\n\027player_damage_mitigated\030\007 \001("
  "\r\022\033\n\023first_damage_time_s\030\010 \001(\r\022O\n\021team_o"
  "bjective_id\030\t \001(\0162\026.ECitadelTeamObjectiv"
  "e:\034k_eCitadelTeamObjective_Core\022;\n\004team\030"
  "\n \001(\0162\022.ECitadelLobbyTeam:\031k_ECitadelLob"
  "byTeam_Team0\032\254\001\n\007MidBoss\022B\n\013team_killed\030"
  "\001 \001(\0162\022.ECitadelLobbyTeam:\031k_ECitadelLob"
  "byTeam_Team0\022C\n\014team_claimed\030\002 \001(\0162\022.ECi"
  "tadelLobbyTeam:\031k_ECitadelLobbyTeam_Team"
  "0\022\030\n\020destroyed_time_s\030\003 \001(\r\032d\n\006Player\022\023\n"
  "\013player_slot\030\001 \001(\r\022E\n\014time_samples\030\003 \003(\013"
  "2/.CMsgServerSignoutData_DetailedStats.T"
  "imeSample\"\342\005\n\036CMsgServerSignoutData_Perf"
  "Data\022\032\n\022average_frame_time\030\001 \003(\002\022\026\n\016max_"
  "frame_time\030\002 \003(\002\022!\n\031server_average_frame"
  "_time\030\003 \001(\002\022\035\n\025server_max_frame_time\030\004 \001"
  "(\002\022\034\n\024average_compute_time\030\005 \003(\002\022\030\n\020max_"
  "compute_time\030\006 \003(\002\022 \n\030average_client_tic"
  "k_time\030\007 \003(\002\022\034\n\024max_client_tick_time\030\010 \003"
  "(\002\022$\n\034average_client_simulate_time\030\t \003(\002"
  "\022 \n\030max_client_simulate_time\030\n \003(\002\022\033\n\023av"
  "erage_output_time\030\013 \003(\002\022\027\n\017max_output_ti"
  "me\030\014 \003(\002\0223\n+average_wait_for_rendering_t"
  "o_complete_time\030\r \003(\002\022/\n\'max_wait_for_re"
  "ndering_to_complete_time\030\016 \003(\002\022\031\n\021averag"
  "e_swap_time\030\017 \003(\002\022\025\n\rmax_swap_time\030\020 \003(\002"
  "\022!\n\031average_frame_update_time\030\021 \003(\002\022\035\n\025m"
  "ax_frame_update_time\030\022 \003(\002\022\031\n\021average_id"
  "le_time\030\023 \003(\002\022\025\n\rmax_idle_time\030\024 \003(\002\022%\n\035"
  "average_input_processing_time\030\025 \003(\002\022!\n\031m"
  "ax_input_processing_time\030\026 \003(\002\"\213\002\n!CMsgS"
  "erverSignoutData_BookRewards\022J\n\017account_"
  "rewards\030\001 \003(\01321.CMsgServerSignoutData_Bo"
  "okRewards.AccountRewards\0320\n\nBookReward\022\017"
  "\n\007book_id\030\001 \001(\r\022\021\n\txp_reward\030\002 \001(\r\032h\n\016Ac"
  "countRewards\022\022\n\naccount_id\030\001 \001(\r\022B\n\013book"
  "_reward\030\002 \001(\0132-.CMsgServerSignoutData_Bo"
  "okRewards.BookReward\"\310\002\n(CMsgServerSigno"
  "utData_AccountStatChanges\022M\n\raccount_sta"
  "ts\030\001 \003(\01326.CMsgServerSignoutData_Account"
  "StatChanges.AccountStats\032j\n\004Stat\022\017\n\007hero"
  "_id\030\001 \001(\r\022\017\n\007stat_id\030\002 \001(\r\022\r\n\005value\030\003 \001("
  "\r\0221\n\005medal\030\004 \001(\0162\031.ECitadelAccountStatMe"
  "dal:\007k_eNone\032a\n\014AccountStats\022\022\n\naccount_"
  "id\030\001 \001(\r\022=\n\005stats\030\002 \003(\0132..CMsgServerSign"
  "outData_AccountStatChanges.Stat\"\274\001\n CMsg"
  "ServerSignoutData_PlayerChat\022>\n\nchat_lin"
  "es\030\001 \003(\0132*.CMsgServerSignoutData_PlayerC"
  "hat.ChatLine\032X\n\010ChatLine\022\023\n\013player_slot\030"
  "\001 \001(\r\022\021\n\tgame_time\030\002 \001(\002\022\021\n\tteam_only\030\003 "
  "\001(\010\022\021\n\tchat_line\030\004 \001(\t\"\224\003\n&CMsgServerSig"
  "noutData_PenalizedPlayers\022J\n\021penalized_p"
  "layers\030\001 \003(\0132/.CMsgServerSignoutData_Pen"
  "alizedPlayers.Penalty\032\251\001\n\007Penalty\022\022\n\nacc"
  "ount_id\030\001 \001(\r\022`\n\006reason\030\002 \001(\01626.CMsgServ"
  "erSignoutData_PenalizedPlayers.EPenaltyR"
  "eason:\030k_EPenaltyReason_Abandon\022\024\n\014match"
  "_time_s\030\003 \001(\r\022\022\n\ntime_stamp\030\004 \001(\r\"r\n\016EPe"
  "naltyReason\022\034\n\030k_EPenaltyReason_Abandon\020"
  "\000\022(\n$k_EPenaltyReason_DisconnectedTooLon"
  "g\020\001\022\030\n\024k_EPenaltyReason_AFK\020\002\"\252\020\n\rCMsgMa"
  "tchData\022\030\n\020match_duration_s\030\001 \001(\r\022C\n\nend"
  "_reason\030\002 \001(\0162\031.CMsgMatchData.EEndReason"
  ":\024k_EEndReason_TeamWin\022C\n\014winning_team\030\003"
  " \001(\0162\022.ECitadelLobbyTeam:\031k_ECitadelLobb"
  "yTeam_Team0\022*\n\007players\030\004 \003(\0132\031.CMsgMatch"
  "Data.PlayerInfo\022\036\n\026objectives_mask_legac"
  "y\030\005 \001(\r\022\026\n\016server_version\030\006 \001(\r\022@\n\tgame_"
  "mode\030\007 \001(\0162\021.ECitadelGameMode:\032k_ECitade"
  "lGameMode_Invalid\022C\n\nmatch_mode\030\010 \001(\0162\022."
  "ECitadelMatchMode:\033k_ECitadelMatchMode_I"
  "nvalid\022\035\n\025objectives_mask_team0\030\t \001(\004\022\035\n"
  "\025objectives_mask_team1\030\n \001(\004\022\026\n\016match_en"
  "d_time\030\013 \001(\r\022\023\n\013stomp_score\030\014 \001(\002\022\027\n\017saf"
  "e_to_abandon\030\r \001(\010\022\024\n\014team_abandon\030\016 \001(\010"
  "\022\027\n\017new_player_pool\030\017 \001(\010\022\024\n\014low_pri_poo"
  "l\030\020 \001(\010\032\205\001\n\nPlayerItem\022\017\n\007item_id\030\001 \001(\r\022"
  "\023\n\013game_time_s\030\002 \001(\r\022\022\n\nupgrade_id\030\003 \001(\r"
  "\022\023\n\013sold_time_s\030\004 \001(\r\022\r\n\005flags\030\005 \001(\r\022\031\n\021"
  "imbued_ability_id\030\006 \001(\r\032\213\t\n\nPlayerInfo\022\022"
  "\n\naccount_id\030\001 \001(\r\022;\n\004team\030\002 \001(\0162\022.ECita"
  "delLobbyTeam:\031k_ECitadelLobbyTeam_Team0\022"
  "\023\n\013player_slot\030\003 \001(\r\022!\n\031hero_mmr_with_un"
  "certainty\030\004 \001(\r\022\022\n\nplayer_mmr\030\005 \001(\r\022\032\n\022p"
  "layer_uncertainty\030\006 \001(\r\022\017\n\007hero_id\030\007 \001(\r"
  "\022\r\n\005kills\030\010 \001(\r\022\016\n\006deaths\030\t \001(\r\022\021\n\tnet_w"
  "orth\030\n \001(\r\022\017\n\007assists\030\013 \001(\r\022\020\n\010hero_mmr\030"
  "\014 \001(\r\022(\n\005items\030\r \003(\0132\031.CMsgMatchData.Pla"
  "yerItem\022\021\n\tgpm_10min\030\016 \001(\r\022\021\n\tgpm_15min\030"
  "\017 \001(\r\022\021\n\tgpm_20min\030\020 \001(\r\022\021\n\tgpm_25min\030\021 "
  "\001(\r\022\021\n\tgpm_30min\030\022 \001(\r\022\021\n\tgpm_35min\030\023 \001("
  "\r\022\017\n\007gpm_end\030\024 \001(\r\022\021\n\tlast_hits\030\025 \001(\r\022\016\n"
  "\006denies\030\026 \001(\r\022\026\n\016ability_points\030\027 \001(\r\022\r\n"
  "\005level\030\030 \001(\r\022\025\n\rassigned_lane\030\031 \001(\r\022\023\n\013p"
  "arty_index\030\032 \001(\r\0222\n\010platform\030\033 \001(\0162\014.EGC"
  "Platform:\022k_eGCPlatform_None\022\026\n\016ability_"
  "damage\030\034 \001(\r\022\025\n\rbullet_damage\030\035 \001(\r\022\030\n\020h"
  "ero_bullets_hit\030\036 \001(\r\022\035\n\025hero_bullets_hi"
  "t_crit\030\037 \001(\r\022\026\n\016player_healing\030  \001(\r\022\032\n\022"
  "hero_bullets_fired\030! \001(\r\022#\n\033hero_incomin"
  "g_bullets_fired\030\" \001(\r\022!\n\031hero_incoming_b"
  "ullets_hit\030# \001(\r\022\"\n\032hero_incoming_bullet"
  "s_crit\030$ \001(\r\022\023\n\013time_dead_s\030% \001(\r\022\034\n\024pla"
  "yer_bullet_damage\030& \001(\r\022\035\n\025player_abilit"
  "y_damage\030\' \001(\r\022\033\n\023player_melee_damage\030( "
  "\001(\r\022\034\n\024abandon_match_time_s\030) \001(\r\022\032\n\022aba"
  "ndon_time_stamp\030* \001(\r\022\035\n\025trooper_kill_ex"
  "cluded\030+ \001(\r\022 \n\030hero_bullets_lucky_shots"
  "\030, \001(\r\022\025\n\rhero_build_id\030- \001(\r\"\252\001\n\nEEndRe"
  "ason\022\030\n\024k_EEndReason_TeamWin\020\000\022\035\n\031k_EEnd"
  "Reason_AllAbandoned\020\002\022\036\n\032k_EEndReason_Ne"
  "tworkIssues\020\003\022\034\n\030k_EEndReason_MatchLengt"
  "h\020\004\022%\n!k_EEndReason_PlayerNeverConnected"
  "\020\005\"\273\001\n\032CMsgServerToGCMatchSignout\022(\n\017add"
  "itional_data\030\001 \003(\0132\017.CExtraMsgBlock\022\027\n\017s"
  "ignout_attempt\030\002 \001(\r\022\020\n\010lobby_id\030\003 \001(\004\022\020"
  "\n\010match_id\030\004 \001(\004\022\022\n\ncluster_id\030\t \001(\r\022\"\n\n"
  "match_data\030\n \001(\0132\016.CMsgMatchData\"\261\002\n\"CMs"
  "gServerToGCMatchSignoutResponse\022[\n\006resul"
  "t\030\001 \001(\01622.CMsgServerToGCMatchSignoutResp"
  "onse.ESignoutResult:\027k_ESignout_Failed_R"
  "etry\"\255\001\n\016ESignoutResult\022\033\n\027k_ESignout_Fa"
  "iled_Retry\020\001\022\035\n\031k_ESignout_Failed_NoRetr"
  "y\020\002\022\036\n\032k_ESignout_Failed_InFlight\020\003\022\026\n\022k"
  "_ESignout_Success\020\004\022\'\n#k_ESignout_Succes"
  "s_AlreadySignedOut\020\005\"\032\n\030CMsgServerWelcom"
  "eCitadel\"0\n\026CMsgServerToGCIdlePing\022\026\n\016se"
  "rver_version\030\001 \001(\r\"\033\n\031CMsgGCToServerRequ"
  "estPing\"2\n\036CMsgGCToServerAllocateForMatc"
  "h\022\020\n\010match_id\030\001 \001(\004\"9\n&CMsgGCToServerAll"
  "ocateForMatchResponse\022\017\n\007success\030\001 \001(\010\"\322"
  "\001\n\036CMsgServerToGCEnterMatchmaking\022\026\n\016ser"
  "ver_version\030\001 \001(\r\022\022\n\nsearch_key\030\002 \001(\t\022\021\n"
  "\tregion_id\030\003 \001(\r\022\022\n\ncluster_id\030\004 \001(\r\022\030\n\020"
  "server_public_ip\030\005 \001(\r\022\031\n\021server_private"
  "_ip\030\006 \001(\r\022\023\n\013server_port\030\007 \001(\r\022\023\n\013sdr_ad"
  "dress\030\t \001(\014\"8\n$CMsgGCToServerCancelAlloc"
  "ateForMatch\022\020\n\010match_id\030\001 \001(\004\"\227\001\n$CMsgSe"
  "rverToGCUpdateLobbyServerState\022\020\n\010lobby_"
  "id\030\001 \001(\004\022D\n\014server_state\030\002 \001(\0162\022.ELobbyS"
  "erverState:\032k_eLobbyServerState_Assign\022\027"
  "\n\017safe_to_abandon\030\003 \001(\010\"\275\005\n\032CMsgServerTo"
  "GCAbandonMatch\022\027\n\017server_steam_id\030\001 \001(\006\022"
  "\020\n\010lobby_id\030\002 \001(\006\022\022\n\ncluster_id\030\003 \001(\r\022M\n"
  "\013reason_code\030\004 \001(\0162#.CMsgServerToGCAband"
  "onMatch.EReason:\023eReason_ServerCrash\022\027\n\017"
  "additional_data\030\005 \001(\004\022\020\n\010match_id\030\006 \001(\004\022"
  "3\n\007players\030\010 \003(\0132\".CMsgServerToGCAbandon"
  "Match.Player\022\031\n\021public_ip_address\030\t \001(\007\022"
  "\014\n\004port\030\n \001(\r\022\026\n\016server_version\030\013 \001(\r\022\013\n"
  "\003pid\030\014 \001(\r\022\023\n\013instance_id\030\r \001(\r\022\032\n\022priva"
  "te_ip_address\030\016 \001(\r\022C\n\nmatch_mode\030\017 \001(\0162"
  "\022.ECitadelMatchMode:\033k_ECitadelMatchMode"
  "_Invalid\022@\n\tgame_mode\030\020 \001(\0162\021.ECitadelGa"
  "meMode:\032k_ECitadelGameMode_Invalid\022\033\n\023wa"
  "s_server_shutdown\030\021 \001(\010\032F\n\006Player\022\022\n\nacc"
  "ount_id\030\001 \001(\r\022\027\n\017additional_data\030\002 \001(\004\022\017"
  "\n\007hero_id\030\003 \001(\r\"F\n\007EReason\022\027\n\023eReason_Se"
  "rverCrash\020\001\022\"\n\036eReason_ClientsFailedToCo"
  "nnect\020\002\"$\n\"CMsgServerToGCAbandonMatchRes"
  "ponse\"\036\n\034CMsgServerToGCTestConnection\"G\n"
  "$CMsgServerToGCTestConnectionResponse\022\r\n"
  "\005state\030\001 \001(\r\022\020\n\010lobby_id\030\002 \001(\004\"J\n\035CMsgGC"
  "ToServerSetServerConVar\022\023\n\013convar_name\030\001"
  " \001(\t\022\024\n\014convar_value\030\002 \001(\t\"8\n%CMsgGCToSe"
  "rverSetServerConVarResponse\022\017\n\007success\030\001"
  " \001(\010\"_\n\032CMsgGCToServerAddSpectator\022\020\n\010lo"
  "bby_id\030\001 \001(\004\022\022\n\naccount_id\030\002 \001(\r\022\033\n\023acco"
  "unt_to_spectate\030\003 \001(\r\"\332\001\n\"CMsgGCToServer"
  "AddSpectatorResponse\022O\n\006result\030\001 \001(\0162-.C"
  "MsgGCToServerAddSpectatorResponse.ERespo"
  "nse:\020k_eInternalError\022\035\n\025requesting_acco"
  "unt_id\030\002 \001(\r\"D\n\tEResponse\022\024\n\020k_eInternal"
  "Error\020\000\022\016\n\nk_eSuccess\020\001\022\021\n\rk_eServerFull"
  "\020\002\"\226\001\n\033CMsgServerToGCReportCheater\022\022\n\nac"
  "count_id\030\001 \001(\r\022\020\n\010match_id\030\002 \001(\004\022\020\n\010lobb"
  "y_id\030\003 \001(\006\022\016\n\006reason\030\004 \001(\t\022\030\n\020record_dat"
  "a_only\030\005 \001(\010\022\025\n\rcheater_score\030\006 \001(\002\"6\n#C"
  "MsgServerToGCReportCheaterResponse\022\017\n\007su"
  "ccess\030\001 \001(\010*\232\007\n\030EGCCitadelServerMessages"
  "\022+\n&k_EMsgServerToGCMatchSignoutPermissi"
  "on\020\234N\0223\n.k_EMsgServerToGCMatchSignoutPer"
  "missionResponse\020\235N\022!\n\034k_EMsgServerToGCMa"
  "tchSignout\020\236N\022)\n$k_EMsgServerToGCMatchSi"
  "gnoutResponse\020\237N\022!\n\034k_EMsgGCToServerAddS"
  "pectator\020\240N\022)\n$k_EMsgGCToServerAddSpecta"
  "torResponse\020\241N\022\035\n\030k_EMsgServerToGCIdlePi"
  "ng\020\242N\022 \n\033k_EMsgGCToServerRequestPing\020\243N\022"
  "%\n k_EMsgGCToServerAllocateForMatch\020\245N\022-"
  "\n(k_EMsgGCToServerAllocateForMatchRespon"
  "se\020\246N\022%\n k_EMsgServerToGCEnterMatchmakin"
  "g\020\247N\022+\n&k_EMsgGCToServerCancelAllocateFo"
  "rMatch\020\250N\022+\n&k_EMsgServerToGCUpdateLobby"
  "ServerState\020\251N\022!\n\034k_EMsgServerToGCAbando"
  "nMatch\020\252N\022)\n$k_EMsgServerToGCAbandonMatc"
  "hResponse\020\253N\022#\n\036k_EMsgServerToGCTestConn"
  "ection\020\254N\022+\n&k_EMsgServerToGCTestConnect"
  "ionResponse\020\255N\022$\n\037k_EMsgGCToServerSetSer"
  "verConVar\020\267N\022,\n\'k_EMsgGCToServerSetServe"
  "rConVarResponse\020\270N\022$\n\037k_EMsgServerToGCUp"
  "dateMatchInfo\020\271N\022\"\n\035k_EMsgServerToGCRepo"
  "rtCheater\020\272N\022*\n%k_EMsgServerToGCReportCh"
  "eaterResponse\020\273N*\242\001\n\022EGCServerLobbyData\022"
  " \n\034k_EServerLobbyData_PlayerMMR\020\001\022!\n\035k_E"
  "ServerLobbyData_PlayerInfo\020\002\022&\n\"k_EServe"
  "rLobbyData_PostMatchSurvey\020\003\022\037\n\033k_EServe"
  "rLobbyData_AutoTest\020\004*\200\003\n\024EGCServerSigno"
  "utData\022\'\n#k_EServerSignoutData_Disconnec"
  "tions\020\002\022+\n\'k_EServerSignoutData_AccountS"
  "tatChanges\020\003\022&\n\"k_EServerSignoutData_Det"
  "ailedStats\020\004\022(\n$k_EServerSignoutData_Ser"
  "verPerfStats\020\005\022!\n\035k_EServerSignoutData_P"
  "erfData\020\006\022#\n\037k_EServerSignoutData_Player"
  "Chat\020\007\022$\n k_EServerSignoutData_BookRewar"
  "ds\020\010\022)\n%k_EServerSignoutData_PenalizedPl"
  "ayers\020\t\022\'\n#k_EServerSignoutData_ReportCh"
  "eaters\020\n"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_citadel_5fgcmessages_5fserver_2eproto_deps[3] = {
  &::descriptor_table_citadel_5fgcmessages_5fcommon_2eproto,
  &::descriptor_table_gcsdk_5fgcmessages_2eproto,
  &::descriptor_table_steammessages_2eproto,
};
static ::_pbi::once_flag descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_citadel_5fgcmessages_5fserver_2eproto = {
    false, false, 14768, descriptor_table_protodef_citadel_5fgcmessages_5fserver_2eproto,
    "citadel_gcmessages_server.proto",
    &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once, descriptor_table_citadel_5fgcmessages_5fserver_2eproto_deps, 3, 65,
    schemas, file_default_instances, TableStruct_citadel_5fgcmessages_5fserver_2eproto::offsets,
    file_level_metadata_citadel_5fgcmessages_5fserver_2eproto, file_level_enum_descriptors_citadel_5fgcmessages_5fserver_2eproto,
    file_level_service_descriptors_citadel_5fgcmessages_5fserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter() {
  return &descriptor_table_citadel_5fgcmessages_5fserver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_citadel_5fgcmessages_5fserver_2eproto(&descriptor_table_citadel_5fgcmessages_5fserver_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSOCitadelServerStaticLobby_EAwardIDs_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_citadel_5fgcmessages_5fserver_2eproto[0];
}
bool CSOCitadelServerStaticLobby_EAwardIDs_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CSOCitadelServerStaticLobby_EAwardIDs CSOCitadelServerStaticLobby::k_eAward_KingPanda;
constexpr CSOCitadelServerStaticLobby_EAwardIDs CSOCitadelServerStaticLobby::EAwardIDs_MIN;
constexpr CSOCitadelServerStaticLobby_EAwardIDs CSOCitadelServerStaticLobby::EAwardIDs_MAX;
constexpr int CSOCitadelServerStaticLobby::EAwardIDs_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_citadel_5fgcmessages_5fserver_2eproto[1];
}
bool CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason CMsgServerSignoutData_PenalizedPlayers::k_EPenaltyReason_Abandon;
constexpr CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason CMsgServerSignoutData_PenalizedPlayers::k_EPenaltyReason_DisconnectedTooLong;
constexpr CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason CMsgServerSignoutData_PenalizedPlayers::k_EPenaltyReason_AFK;
constexpr CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason CMsgServerSignoutData_PenalizedPlayers::EPenaltyReason_MIN;
constexpr CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason CMsgServerSignoutData_PenalizedPlayers::EPenaltyReason_MAX;
constexpr int CMsgServerSignoutData_PenalizedPlayers::EPenaltyReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgMatchData_EEndReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_citadel_5fgcmessages_5fserver_2eproto[2];
}
bool CMsgMatchData_EEndReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgMatchData_EEndReason CMsgMatchData::k_EEndReason_TeamWin;
constexpr CMsgMatchData_EEndReason CMsgMatchData::k_EEndReason_AllAbandoned;
constexpr CMsgMatchData_EEndReason CMsgMatchData::k_EEndReason_NetworkIssues;
constexpr CMsgMatchData_EEndReason CMsgMatchData::k_EEndReason_MatchLength;
constexpr CMsgMatchData_EEndReason CMsgMatchData::k_EEndReason_PlayerNeverConnected;
constexpr CMsgMatchData_EEndReason CMsgMatchData::EEndReason_MIN;
constexpr CMsgMatchData_EEndReason CMsgMatchData::EEndReason_MAX;
constexpr int CMsgMatchData::EEndReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgServerToGCMatchSignoutResponse_ESignoutResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_citadel_5fgcmessages_5fserver_2eproto[3];
}
bool CMsgServerToGCMatchSignoutResponse_ESignoutResult_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgServerToGCMatchSignoutResponse_ESignoutResult CMsgServerToGCMatchSignoutResponse::k_ESignout_Failed_Retry;
constexpr CMsgServerToGCMatchSignoutResponse_ESignoutResult CMsgServerToGCMatchSignoutResponse::k_ESignout_Failed_NoRetry;
constexpr CMsgServerToGCMatchSignoutResponse_ESignoutResult CMsgServerToGCMatchSignoutResponse::k_ESignout_Failed_InFlight;
constexpr CMsgServerToGCMatchSignoutResponse_ESignoutResult CMsgServerToGCMatchSignoutResponse::k_ESignout_Success;
constexpr CMsgServerToGCMatchSignoutResponse_ESignoutResult CMsgServerToGCMatchSignoutResponse::k_ESignout_Success_AlreadySignedOut;
constexpr CMsgServerToGCMatchSignoutResponse_ESignoutResult CMsgServerToGCMatchSignoutResponse::ESignoutResult_MIN;
constexpr CMsgServerToGCMatchSignoutResponse_ESignoutResult CMsgServerToGCMatchSignoutResponse::ESignoutResult_MAX;
constexpr int CMsgServerToGCMatchSignoutResponse::ESignoutResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgServerToGCAbandonMatch_EReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_citadel_5fgcmessages_5fserver_2eproto[4];
}
bool CMsgServerToGCAbandonMatch_EReason_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgServerToGCAbandonMatch_EReason CMsgServerToGCAbandonMatch::eReason_ServerCrash;
constexpr CMsgServerToGCAbandonMatch_EReason CMsgServerToGCAbandonMatch::eReason_ClientsFailedToConnect;
constexpr CMsgServerToGCAbandonMatch_EReason CMsgServerToGCAbandonMatch::EReason_MIN;
constexpr CMsgServerToGCAbandonMatch_EReason CMsgServerToGCAbandonMatch::EReason_MAX;
constexpr int CMsgServerToGCAbandonMatch::EReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGCToServerAddSpectatorResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_citadel_5fgcmessages_5fserver_2eproto[5];
}
bool CMsgGCToServerAddSpectatorResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgGCToServerAddSpectatorResponse_EResponse CMsgGCToServerAddSpectatorResponse::k_eInternalError;
constexpr CMsgGCToServerAddSpectatorResponse_EResponse CMsgGCToServerAddSpectatorResponse::k_eSuccess;
constexpr CMsgGCToServerAddSpectatorResponse_EResponse CMsgGCToServerAddSpectatorResponse::k_eServerFull;
constexpr CMsgGCToServerAddSpectatorResponse_EResponse CMsgGCToServerAddSpectatorResponse::EResponse_MIN;
constexpr CMsgGCToServerAddSpectatorResponse_EResponse CMsgGCToServerAddSpectatorResponse::EResponse_MAX;
constexpr int CMsgGCToServerAddSpectatorResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCCitadelServerMessages_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_citadel_5fgcmessages_5fserver_2eproto[6];
}
bool EGCCitadelServerMessages_IsValid(int value) {
  switch (value) {
    case 10012:
    case 10013:
    case 10014:
    case 10015:
    case 10016:
    case 10017:
    case 10018:
    case 10019:
    case 10021:
    case 10022:
    case 10023:
    case 10024:
    case 10025:
    case 10026:
    case 10027:
    case 10028:
    case 10029:
    case 10039:
    case 10040:
    case 10041:
    case 10042:
    case 10043:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCServerLobbyData_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_citadel_5fgcmessages_5fserver_2eproto[7];
}
bool EGCServerLobbyData_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCServerSignoutData_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_citadel_5fgcmessages_5fserver_2eproto[8];
}
bool EGCServerSignoutData_IsValid(int value) {
  switch (value) {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgServerCrashSentinelFile_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerCrashSentinelFile_Player>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgServerCrashSentinelFile_Player::CMsgServerCrashSentinelFile_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerCrashSentinelFile.Player)
}
CMsgServerCrashSentinelFile_Player::CMsgServerCrashSentinelFile_Player(const CMsgServerCrashSentinelFile_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerCrashSentinelFile_Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.hero_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hero_id_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.hero_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerCrashSentinelFile.Player)
}

inline void CMsgServerCrashSentinelFile_Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.hero_id_){0u}
  };
}

CMsgServerCrashSentinelFile_Player::~CMsgServerCrashSentinelFile_Player() {
  // @@protoc_insertion_point(destructor:CMsgServerCrashSentinelFile.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerCrashSentinelFile_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerCrashSentinelFile_Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerCrashSentinelFile_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerCrashSentinelFile.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.hero_id_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.hero_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerCrashSentinelFile_Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerCrashSentinelFile_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerCrashSentinelFile.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerCrashSentinelFile.Player)
  return target;
}

size_t CMsgServerCrashSentinelFile_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerCrashSentinelFile.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerCrashSentinelFile_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerCrashSentinelFile_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerCrashSentinelFile_Player::GetClassData() const { return &_class_data_; }


void CMsgServerCrashSentinelFile_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerCrashSentinelFile_Player*>(&to_msg);
  auto& from = static_cast<const CMsgServerCrashSentinelFile_Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerCrashSentinelFile.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerCrashSentinelFile_Player::CopyFrom(const CMsgServerCrashSentinelFile_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerCrashSentinelFile.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerCrashSentinelFile_Player::IsInitialized() const {
  return true;
}

void CMsgServerCrashSentinelFile_Player::InternalSwap(CMsgServerCrashSentinelFile_Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerCrashSentinelFile_Player, _impl_.hero_id_)
      + sizeof(CMsgServerCrashSentinelFile_Player::_impl_.hero_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerCrashSentinelFile_Player, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerCrashSentinelFile_Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[0]);
}

// ===================================================================

class CMsgServerCrashSentinelFile_GameInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerCrashSentinelFile_GameInfo>()._impl_._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_server_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_match_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_was_server_shutdown(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgServerCrashSentinelFile_GameInfo::CMsgServerCrashSentinelFile_GameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerCrashSentinelFile.GameInfo)
}
CMsgServerCrashSentinelFile_GameInfo::CMsgServerCrashSentinelFile_GameInfo(const CMsgServerCrashSentinelFile_GameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerCrashSentinelFile_GameInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.lobby_id_){}
    , decltype(_impl_.server_state_){}
    , decltype(_impl_.match_mode_){}
    , decltype(_impl_.game_mode_){}
    , decltype(_impl_.was_server_shutdown_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.was_server_shutdown_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.was_server_shutdown_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerCrashSentinelFile.GameInfo)
}

inline void CMsgServerCrashSentinelFile_GameInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){arena}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
    , decltype(_impl_.server_state_){0u}
    , decltype(_impl_.match_mode_){0}
    , decltype(_impl_.game_mode_){0}
    , decltype(_impl_.was_server_shutdown_){false}
  };
}

CMsgServerCrashSentinelFile_GameInfo::~CMsgServerCrashSentinelFile_GameInfo() {
  // @@protoc_insertion_point(destructor:CMsgServerCrashSentinelFile.GameInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerCrashSentinelFile_GameInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void CMsgServerCrashSentinelFile_GameInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerCrashSentinelFile_GameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerCrashSentinelFile.GameInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.was_server_shutdown_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.was_server_shutdown_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerCrashSentinelFile_GameInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 lobby_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_lobby_id(&has_bits);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_server_state(&has_bits);
          _impl_.server_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgServerCrashSentinelFile.Player players = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelMatchMode match_mode = 6 [default = k_ECitadelMatchMode_Invalid];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelMatchMode_IsValid(val))) {
            _internal_set_match_mode(static_cast<::ECitadelMatchMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelGameMode game_mode = 7 [default = k_ECitadelGameMode_Invalid];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelGameMode_IsValid(val))) {
            _internal_set_game_mode(static_cast<::ECitadelGameMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool was_server_shutdown = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_was_server_shutdown(&has_bits);
          _impl_.was_server_shutdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerCrashSentinelFile_GameInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerCrashSentinelFile.GameInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional fixed64 lobby_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_lobby_id(), target);
  }

  // optional uint32 server_state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_server_state(), target);
  }

  // repeated .CMsgServerCrashSentinelFile.Player players = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .ECitadelMatchMode match_mode = 6 [default = k_ECitadelMatchMode_Invalid];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_match_mode(), target);
  }

  // optional .ECitadelGameMode game_mode = 7 [default = k_ECitadelGameMode_Invalid];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_game_mode(), target);
  }

  // optional bool was_server_shutdown = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_was_server_shutdown(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerCrashSentinelFile.GameInfo)
  return target;
}

size_t CMsgServerCrashSentinelFile_GameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerCrashSentinelFile.GameInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerCrashSentinelFile.Player players = 5;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional fixed64 lobby_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 server_state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_state());
    }

    // optional .ECitadelMatchMode match_mode = 6 [default = k_ECitadelMatchMode_Invalid];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_match_mode());
    }

    // optional .ECitadelGameMode game_mode = 7 [default = k_ECitadelGameMode_Invalid];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_game_mode());
    }

    // optional bool was_server_shutdown = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerCrashSentinelFile_GameInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerCrashSentinelFile_GameInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerCrashSentinelFile_GameInfo::GetClassData() const { return &_class_data_; }


void CMsgServerCrashSentinelFile_GameInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerCrashSentinelFile_GameInfo*>(&to_msg);
  auto& from = static_cast<const CMsgServerCrashSentinelFile_GameInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerCrashSentinelFile.GameInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.server_state_ = from._impl_.server_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.match_mode_ = from._impl_.match_mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.game_mode_ = from._impl_.game_mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.was_server_shutdown_ = from._impl_.was_server_shutdown_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerCrashSentinelFile_GameInfo::CopyFrom(const CMsgServerCrashSentinelFile_GameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerCrashSentinelFile.GameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerCrashSentinelFile_GameInfo::IsInitialized() const {
  return true;
}

void CMsgServerCrashSentinelFile_GameInfo::InternalSwap(CMsgServerCrashSentinelFile_GameInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerCrashSentinelFile_GameInfo, _impl_.was_server_shutdown_)
      + sizeof(CMsgServerCrashSentinelFile_GameInfo::_impl_.was_server_shutdown_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerCrashSentinelFile_GameInfo, _impl_.match_id_)>(
          reinterpret_cast<char*>(&_impl_.match_id_),
          reinterpret_cast<char*>(&other->_impl_.match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerCrashSentinelFile_GameInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[1]);
}

// ===================================================================

class CMsgServerCrashSentinelFile::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerCrashSentinelFile>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_server_public_ip_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_server_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_server_cluster(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_saved_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_server_version(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::CMsgServerCrashSentinelFile_GameInfo& game_info(const CMsgServerCrashSentinelFile* msg);
  static void set_has_game_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_private_ip_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::CMsgServerCrashSentinelFile_GameInfo&
CMsgServerCrashSentinelFile::_Internal::game_info(const CMsgServerCrashSentinelFile* msg) {
  return *msg->_impl_.game_info_;
}
CMsgServerCrashSentinelFile::CMsgServerCrashSentinelFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerCrashSentinelFile)
}
CMsgServerCrashSentinelFile::CMsgServerCrashSentinelFile(const CMsgServerCrashSentinelFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerCrashSentinelFile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_info_){nullptr}
    , decltype(_impl_.server_steam_id_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.server_public_ip_addr_){}
    , decltype(_impl_.server_port_){}
    , decltype(_impl_.server_cluster_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.saved_time_){}
    , decltype(_impl_.server_version_){}
    , decltype(_impl_.server_private_ip_addr_){}
    , decltype(_impl_.instance_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game_info()) {
    _this->_impl_.game_info_ = new ::CMsgServerCrashSentinelFile_GameInfo(*from._impl_.game_info_);
  }
  ::memcpy(&_impl_.server_steam_id_, &from._impl_.server_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.instance_id_) -
    reinterpret_cast<char*>(&_impl_.server_steam_id_)) + sizeof(_impl_.instance_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerCrashSentinelFile)
}

inline void CMsgServerCrashSentinelFile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_info_){nullptr}
    , decltype(_impl_.server_steam_id_){uint64_t{0u}}
    , decltype(_impl_.version_){0u}
    , decltype(_impl_.server_public_ip_addr_){0u}
    , decltype(_impl_.server_port_){0u}
    , decltype(_impl_.server_cluster_){0u}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.saved_time_){0u}
    , decltype(_impl_.server_version_){0u}
    , decltype(_impl_.server_private_ip_addr_){0u}
    , decltype(_impl_.instance_id_){0u}
  };
}

CMsgServerCrashSentinelFile::~CMsgServerCrashSentinelFile() {
  // @@protoc_insertion_point(destructor:CMsgServerCrashSentinelFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerCrashSentinelFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.game_info_;
}

void CMsgServerCrashSentinelFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerCrashSentinelFile::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerCrashSentinelFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.game_info_ != nullptr);
    _impl_.game_info_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.server_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.saved_time_) -
        reinterpret_cast<char*>(&_impl_.server_steam_id_)) + sizeof(_impl_.saved_time_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.server_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.instance_id_) -
        reinterpret_cast<char*>(&_impl_.server_version_)) + sizeof(_impl_.instance_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerCrashSentinelFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 server_steam_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_server_steam_id(&has_bits);
          _impl_.server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 server_public_ip_addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_server_public_ip_addr(&has_bits);
          _impl_.server_public_ip_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_server_port(&has_bits);
          _impl_.server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_cluster = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_server_cluster(&has_bits);
          _impl_.server_cluster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 saved_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_saved_time(&has_bits);
          _impl_.saved_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_version = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_server_version(&has_bits);
          _impl_.server_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgServerCrashSentinelFile.GameInfo game_info = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_private_ip_addr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_server_private_ip_addr(&has_bits);
          _impl_.server_private_ip_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 instance_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_instance_id(&has_bits);
          _impl_.instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerCrashSentinelFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerCrashSentinelFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // optional fixed64 server_steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_server_steam_id(), target);
  }

  // optional fixed32 server_public_ip_addr = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(3, this->_internal_server_public_ip_addr(), target);
  }

  // optional uint32 server_port = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_server_port(), target);
  }

  // optional uint32 server_cluster = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_server_cluster(), target);
  }

  // optional uint32 pid = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_pid(), target);
  }

  // optional uint32 saved_time = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_saved_time(), target);
  }

  // optional uint32 server_version = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_server_version(), target);
  }

  // optional .CMsgServerCrashSentinelFile.GameInfo game_info = 9;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::game_info(this),
        _Internal::game_info(this).GetCachedSize(), target, stream);
  }

  // optional uint32 server_private_ip_addr = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_server_private_ip_addr(), target);
  }

  // optional uint32 instance_id = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_instance_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerCrashSentinelFile)
  return target;
}

size_t CMsgServerCrashSentinelFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerCrashSentinelFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgServerCrashSentinelFile.GameInfo game_info = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.game_info_);
    }

    // optional fixed64 server_steam_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 version = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
    }

    // optional fixed32 server_public_ip_addr = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 server_port = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_port());
    }

    // optional uint32 server_cluster = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_cluster());
    }

    // optional uint32 pid = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
    }

    // optional uint32 saved_time = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_saved_time());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 server_version = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_version());
    }

    // optional uint32 server_private_ip_addr = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_private_ip_addr());
    }

    // optional uint32 instance_id = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_instance_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerCrashSentinelFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerCrashSentinelFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerCrashSentinelFile::GetClassData() const { return &_class_data_; }


void CMsgServerCrashSentinelFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerCrashSentinelFile*>(&to_msg);
  auto& from = static_cast<const CMsgServerCrashSentinelFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerCrashSentinelFile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_game_info()->::CMsgServerCrashSentinelFile_GameInfo::MergeFrom(
          from._internal_game_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.server_steam_id_ = from._impl_.server_steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.server_public_ip_addr_ = from._impl_.server_public_ip_addr_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.server_port_ = from._impl_.server_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.server_cluster_ = from._impl_.server_cluster_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.saved_time_ = from._impl_.saved_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.server_version_ = from._impl_.server_version_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.server_private_ip_addr_ = from._impl_.server_private_ip_addr_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.instance_id_ = from._impl_.instance_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerCrashSentinelFile::CopyFrom(const CMsgServerCrashSentinelFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerCrashSentinelFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerCrashSentinelFile::IsInitialized() const {
  return true;
}

void CMsgServerCrashSentinelFile::InternalSwap(CMsgServerCrashSentinelFile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerCrashSentinelFile, _impl_.instance_id_)
      + sizeof(CMsgServerCrashSentinelFile::_impl_.instance_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerCrashSentinelFile, _impl_.game_info_)>(
          reinterpret_cast<char*>(&_impl_.game_info_),
          reinterpret_cast<char*>(&other->_impl_.game_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerCrashSentinelFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[2]);
}

// ===================================================================

class CServerLobbyData_PlayerMMR_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CServerLobbyData_PlayerMMR_Player>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_mmr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_uncertainty(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hero_mmr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hero_mmr_with_uncertainty(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CServerLobbyData_PlayerMMR_Player::CServerLobbyData_PlayerMMR_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CServerLobbyData_PlayerMMR.Player)
}
CServerLobbyData_PlayerMMR_Player::CServerLobbyData_PlayerMMR_Player(const CServerLobbyData_PlayerMMR_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CServerLobbyData_PlayerMMR_Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.player_mmr_){}
    , decltype(_impl_.player_uncertainty_){}
    , decltype(_impl_.hero_mmr_){}
    , decltype(_impl_.hero_mmr_with_uncertainty_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hero_mmr_with_uncertainty_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.hero_mmr_with_uncertainty_));
  // @@protoc_insertion_point(copy_constructor:CServerLobbyData_PlayerMMR.Player)
}

inline void CServerLobbyData_PlayerMMR_Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.player_mmr_){0u}
    , decltype(_impl_.player_uncertainty_){0u}
    , decltype(_impl_.hero_mmr_){0u}
    , decltype(_impl_.hero_mmr_with_uncertainty_){0u}
  };
}

CServerLobbyData_PlayerMMR_Player::~CServerLobbyData_PlayerMMR_Player() {
  // @@protoc_insertion_point(destructor:CServerLobbyData_PlayerMMR.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CServerLobbyData_PlayerMMR_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CServerLobbyData_PlayerMMR_Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CServerLobbyData_PlayerMMR_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CServerLobbyData_PlayerMMR.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.hero_mmr_with_uncertainty_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.hero_mmr_with_uncertainty_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CServerLobbyData_PlayerMMR_Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_mmr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_player_mmr(&has_bits);
          _impl_.player_mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_uncertainty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_player_uncertainty(&has_bits);
          _impl_.player_uncertainty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_mmr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_hero_mmr(&has_bits);
          _impl_.hero_mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_mmr_with_uncertainty = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_hero_mmr_with_uncertainty(&has_bits);
          _impl_.hero_mmr_with_uncertainty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CServerLobbyData_PlayerMMR_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CServerLobbyData_PlayerMMR.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 player_mmr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_mmr(), target);
  }

  // optional uint32 player_uncertainty = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_player_uncertainty(), target);
  }

  // optional uint32 hero_mmr = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hero_mmr(), target);
  }

  // optional uint32 hero_mmr_with_uncertainty = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hero_mmr_with_uncertainty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CServerLobbyData_PlayerMMR.Player)
  return target;
}

size_t CServerLobbyData_PlayerMMR_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CServerLobbyData_PlayerMMR.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 player_mmr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_mmr());
    }

    // optional uint32 player_uncertainty = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_uncertainty());
    }

    // optional uint32 hero_mmr = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_mmr());
    }

    // optional uint32 hero_mmr_with_uncertainty = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_mmr_with_uncertainty());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CServerLobbyData_PlayerMMR_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CServerLobbyData_PlayerMMR_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CServerLobbyData_PlayerMMR_Player::GetClassData() const { return &_class_data_; }


void CServerLobbyData_PlayerMMR_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CServerLobbyData_PlayerMMR_Player*>(&to_msg);
  auto& from = static_cast<const CServerLobbyData_PlayerMMR_Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CServerLobbyData_PlayerMMR.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_mmr_ = from._impl_.player_mmr_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_uncertainty_ = from._impl_.player_uncertainty_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.hero_mmr_ = from._impl_.hero_mmr_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.hero_mmr_with_uncertainty_ = from._impl_.hero_mmr_with_uncertainty_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CServerLobbyData_PlayerMMR_Player::CopyFrom(const CServerLobbyData_PlayerMMR_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CServerLobbyData_PlayerMMR.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CServerLobbyData_PlayerMMR_Player::IsInitialized() const {
  return true;
}

void CServerLobbyData_PlayerMMR_Player::InternalSwap(CServerLobbyData_PlayerMMR_Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CServerLobbyData_PlayerMMR_Player, _impl_.hero_mmr_with_uncertainty_)
      + sizeof(CServerLobbyData_PlayerMMR_Player::_impl_.hero_mmr_with_uncertainty_)
      - PROTOBUF_FIELD_OFFSET(CServerLobbyData_PlayerMMR_Player, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CServerLobbyData_PlayerMMR_Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[3]);
}

// ===================================================================

class CServerLobbyData_PlayerMMR::_Internal {
 public:
};

CServerLobbyData_PlayerMMR::CServerLobbyData_PlayerMMR(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CServerLobbyData_PlayerMMR)
}
CServerLobbyData_PlayerMMR::CServerLobbyData_PlayerMMR(const CServerLobbyData_PlayerMMR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CServerLobbyData_PlayerMMR* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CServerLobbyData_PlayerMMR)
}

inline void CServerLobbyData_PlayerMMR::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CServerLobbyData_PlayerMMR::~CServerLobbyData_PlayerMMR() {
  // @@protoc_insertion_point(destructor:CServerLobbyData_PlayerMMR)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CServerLobbyData_PlayerMMR::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void CServerLobbyData_PlayerMMR::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CServerLobbyData_PlayerMMR::Clear() {
// @@protoc_insertion_point(message_clear_start:CServerLobbyData_PlayerMMR)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CServerLobbyData_PlayerMMR::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CServerLobbyData_PlayerMMR.Player players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CServerLobbyData_PlayerMMR::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CServerLobbyData_PlayerMMR)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CServerLobbyData_PlayerMMR.Player players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CServerLobbyData_PlayerMMR)
  return target;
}

size_t CServerLobbyData_PlayerMMR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CServerLobbyData_PlayerMMR)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CServerLobbyData_PlayerMMR.Player players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CServerLobbyData_PlayerMMR::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CServerLobbyData_PlayerMMR::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CServerLobbyData_PlayerMMR::GetClassData() const { return &_class_data_; }


void CServerLobbyData_PlayerMMR::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CServerLobbyData_PlayerMMR*>(&to_msg);
  auto& from = static_cast<const CServerLobbyData_PlayerMMR&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CServerLobbyData_PlayerMMR)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CServerLobbyData_PlayerMMR::CopyFrom(const CServerLobbyData_PlayerMMR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CServerLobbyData_PlayerMMR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CServerLobbyData_PlayerMMR::IsInitialized() const {
  return true;
}

void CServerLobbyData_PlayerMMR::InternalSwap(CServerLobbyData_PlayerMMR* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CServerLobbyData_PlayerMMR::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[4]);
}

// ===================================================================

class CServerLobbyData_PlayerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CServerLobbyData_PlayerInfo>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mmr_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void CServerLobbyData_PlayerInfo::clear_account_stats() {
  _impl_.account_stats_.Clear();
}
void CServerLobbyData_PlayerInfo::clear_book_info() {
  _impl_.book_info_.Clear();
}
CServerLobbyData_PlayerInfo::CServerLobbyData_PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CServerLobbyData_PlayerInfo)
}
CServerLobbyData_PlayerInfo::CServerLobbyData_PlayerInfo(const CServerLobbyData_PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CServerLobbyData_PlayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_stats_){from._impl_.account_stats_}
    , decltype(_impl_.book_info_){from._impl_.book_info_}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.mmr_level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mmr_level_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.mmr_level_));
  // @@protoc_insertion_point(copy_constructor:CServerLobbyData_PlayerInfo)
}

inline void CServerLobbyData_PlayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_stats_){arena}
    , decltype(_impl_.book_info_){arena}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.mmr_level_){0u}
  };
}

CServerLobbyData_PlayerInfo::~CServerLobbyData_PlayerInfo() {
  // @@protoc_insertion_point(destructor:CServerLobbyData_PlayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CServerLobbyData_PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_stats_.~RepeatedPtrField();
  _impl_.book_info_.~RepeatedPtrField();
}

void CServerLobbyData_PlayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CServerLobbyData_PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CServerLobbyData_PlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_stats_.Clear();
  _impl_.book_info_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mmr_level_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.mmr_level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CServerLobbyData_PlayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgAccountHeroStats account_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_account_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 mmr_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_mmr_level(&has_bits);
          _impl_.mmr_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgAccountBookStats book_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_book_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CServerLobbyData_PlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CServerLobbyData_PlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated .CMsgAccountHeroStats account_stats = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_account_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_account_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 mmr_level = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_mmr_level(), target);
  }

  // repeated .CMsgAccountBookStats book_info = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_book_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_book_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CServerLobbyData_PlayerInfo)
  return target;
}

size_t CServerLobbyData_PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CServerLobbyData_PlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgAccountHeroStats account_stats = 2;
  total_size += 1UL * this->_internal_account_stats_size();
  for (const auto& msg : this->_impl_.account_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgAccountBookStats book_info = 5;
  total_size += 1UL * this->_internal_book_info_size();
  for (const auto& msg : this->_impl_.book_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 mmr_level = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mmr_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CServerLobbyData_PlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CServerLobbyData_PlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CServerLobbyData_PlayerInfo::GetClassData() const { return &_class_data_; }


void CServerLobbyData_PlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CServerLobbyData_PlayerInfo*>(&to_msg);
  auto& from = static_cast<const CServerLobbyData_PlayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CServerLobbyData_PlayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.account_stats_.MergeFrom(from._impl_.account_stats_);
  _this->_impl_.book_info_.MergeFrom(from._impl_.book_info_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mmr_level_ = from._impl_.mmr_level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CServerLobbyData_PlayerInfo::CopyFrom(const CServerLobbyData_PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CServerLobbyData_PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CServerLobbyData_PlayerInfo::IsInitialized() const {
  return true;
}

void CServerLobbyData_PlayerInfo::InternalSwap(CServerLobbyData_PlayerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.account_stats_.InternalSwap(&other->_impl_.account_stats_);
  _impl_.book_info_.InternalSwap(&other->_impl_.book_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CServerLobbyData_PlayerInfo, _impl_.mmr_level_)
      + sizeof(CServerLobbyData_PlayerInfo::_impl_.mmr_level_)
      - PROTOBUF_FIELD_OFFSET(CServerLobbyData_PlayerInfo, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CServerLobbyData_PlayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[5]);
}

// ===================================================================

class CServerLobbyData_PostMatchSurvey_PlayerSurvey::_Internal {
 public:
  using HasBits = decltype(std::declval<CServerLobbyData_PostMatchSurvey_PlayerSurvey>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_question_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CServerLobbyData_PostMatchSurvey_PlayerSurvey::CServerLobbyData_PostMatchSurvey_PlayerSurvey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CServerLobbyData_PostMatchSurvey.PlayerSurvey)
}
CServerLobbyData_PostMatchSurvey_PlayerSurvey::CServerLobbyData_PostMatchSurvey_PlayerSurvey(const CServerLobbyData_PostMatchSurvey_PlayerSurvey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CServerLobbyData_PostMatchSurvey_PlayerSurvey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.question_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.question_id_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.question_id_));
  // @@protoc_insertion_point(copy_constructor:CServerLobbyData_PostMatchSurvey.PlayerSurvey)
}

inline void CServerLobbyData_PostMatchSurvey_PlayerSurvey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.question_id_){0u}
  };
}

CServerLobbyData_PostMatchSurvey_PlayerSurvey::~CServerLobbyData_PostMatchSurvey_PlayerSurvey() {
  // @@protoc_insertion_point(destructor:CServerLobbyData_PostMatchSurvey.PlayerSurvey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CServerLobbyData_PostMatchSurvey_PlayerSurvey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CServerLobbyData_PostMatchSurvey_PlayerSurvey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CServerLobbyData_PostMatchSurvey_PlayerSurvey::Clear() {
// @@protoc_insertion_point(message_clear_start:CServerLobbyData_PostMatchSurvey.PlayerSurvey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.question_id_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.question_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CServerLobbyData_PostMatchSurvey_PlayerSurvey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 question_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_question_id(&has_bits);
          _impl_.question_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CServerLobbyData_PostMatchSurvey_PlayerSurvey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CServerLobbyData_PostMatchSurvey.PlayerSurvey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 question_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_question_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CServerLobbyData_PostMatchSurvey.PlayerSurvey)
  return target;
}

size_t CServerLobbyData_PostMatchSurvey_PlayerSurvey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CServerLobbyData_PostMatchSurvey.PlayerSurvey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 question_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_question_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CServerLobbyData_PostMatchSurvey_PlayerSurvey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CServerLobbyData_PostMatchSurvey_PlayerSurvey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CServerLobbyData_PostMatchSurvey_PlayerSurvey::GetClassData() const { return &_class_data_; }


void CServerLobbyData_PostMatchSurvey_PlayerSurvey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CServerLobbyData_PostMatchSurvey_PlayerSurvey*>(&to_msg);
  auto& from = static_cast<const CServerLobbyData_PostMatchSurvey_PlayerSurvey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CServerLobbyData_PostMatchSurvey.PlayerSurvey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.question_id_ = from._impl_.question_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CServerLobbyData_PostMatchSurvey_PlayerSurvey::CopyFrom(const CServerLobbyData_PostMatchSurvey_PlayerSurvey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CServerLobbyData_PostMatchSurvey.PlayerSurvey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CServerLobbyData_PostMatchSurvey_PlayerSurvey::IsInitialized() const {
  return true;
}

void CServerLobbyData_PostMatchSurvey_PlayerSurvey::InternalSwap(CServerLobbyData_PostMatchSurvey_PlayerSurvey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CServerLobbyData_PostMatchSurvey_PlayerSurvey, _impl_.question_id_)
      + sizeof(CServerLobbyData_PostMatchSurvey_PlayerSurvey::_impl_.question_id_)
      - PROTOBUF_FIELD_OFFSET(CServerLobbyData_PostMatchSurvey_PlayerSurvey, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CServerLobbyData_PostMatchSurvey_PlayerSurvey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[6]);
}

// ===================================================================

class CServerLobbyData_PostMatchSurvey::_Internal {
 public:
};

CServerLobbyData_PostMatchSurvey::CServerLobbyData_PostMatchSurvey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CServerLobbyData_PostMatchSurvey)
}
CServerLobbyData_PostMatchSurvey::CServerLobbyData_PostMatchSurvey(const CServerLobbyData_PostMatchSurvey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CServerLobbyData_PostMatchSurvey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.surveys_){from._impl_.surveys_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CServerLobbyData_PostMatchSurvey)
}

inline void CServerLobbyData_PostMatchSurvey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.surveys_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CServerLobbyData_PostMatchSurvey::~CServerLobbyData_PostMatchSurvey() {
  // @@protoc_insertion_point(destructor:CServerLobbyData_PostMatchSurvey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CServerLobbyData_PostMatchSurvey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.surveys_.~RepeatedPtrField();
}

void CServerLobbyData_PostMatchSurvey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CServerLobbyData_PostMatchSurvey::Clear() {
// @@protoc_insertion_point(message_clear_start:CServerLobbyData_PostMatchSurvey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.surveys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CServerLobbyData_PostMatchSurvey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CServerLobbyData_PostMatchSurvey.PlayerSurvey surveys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_surveys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CServerLobbyData_PostMatchSurvey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CServerLobbyData_PostMatchSurvey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CServerLobbyData_PostMatchSurvey.PlayerSurvey surveys = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_surveys_size()); i < n; i++) {
    const auto& repfield = this->_internal_surveys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CServerLobbyData_PostMatchSurvey)
  return target;
}

size_t CServerLobbyData_PostMatchSurvey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CServerLobbyData_PostMatchSurvey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CServerLobbyData_PostMatchSurvey.PlayerSurvey surveys = 1;
  total_size += 1UL * this->_internal_surveys_size();
  for (const auto& msg : this->_impl_.surveys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CServerLobbyData_PostMatchSurvey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CServerLobbyData_PostMatchSurvey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CServerLobbyData_PostMatchSurvey::GetClassData() const { return &_class_data_; }


void CServerLobbyData_PostMatchSurvey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CServerLobbyData_PostMatchSurvey*>(&to_msg);
  auto& from = static_cast<const CServerLobbyData_PostMatchSurvey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CServerLobbyData_PostMatchSurvey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.surveys_.MergeFrom(from._impl_.surveys_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CServerLobbyData_PostMatchSurvey::CopyFrom(const CServerLobbyData_PostMatchSurvey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CServerLobbyData_PostMatchSurvey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CServerLobbyData_PostMatchSurvey::IsInitialized() const {
  return true;
}

void CServerLobbyData_PostMatchSurvey::InternalSwap(CServerLobbyData_PostMatchSurvey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.surveys_.InternalSwap(&other->_impl_.surveys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CServerLobbyData_PostMatchSurvey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[7]);
}

// ===================================================================

class CServerLobbyData_AutoTest::_Internal {
 public:
  using HasBits = decltype(std::declval<CServerLobbyData_AutoTest>()._impl_._has_bits_);
  static void set_has_max_duration_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CServerLobbyData_AutoTest::CServerLobbyData_AutoTest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CServerLobbyData_AutoTest)
}
CServerLobbyData_AutoTest::CServerLobbyData_AutoTest(const CServerLobbyData_AutoTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CServerLobbyData_AutoTest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_duration_s_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.max_duration_s_ = from._impl_.max_duration_s_;
  // @@protoc_insertion_point(copy_constructor:CServerLobbyData_AutoTest)
}

inline void CServerLobbyData_AutoTest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_duration_s_){0u}
  };
}

CServerLobbyData_AutoTest::~CServerLobbyData_AutoTest() {
  // @@protoc_insertion_point(destructor:CServerLobbyData_AutoTest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CServerLobbyData_AutoTest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CServerLobbyData_AutoTest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CServerLobbyData_AutoTest::Clear() {
// @@protoc_insertion_point(message_clear_start:CServerLobbyData_AutoTest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.max_duration_s_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CServerLobbyData_AutoTest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 max_duration_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_max_duration_s(&has_bits);
          _impl_.max_duration_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CServerLobbyData_AutoTest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CServerLobbyData_AutoTest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 max_duration_s = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_duration_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CServerLobbyData_AutoTest)
  return target;
}

size_t CServerLobbyData_AutoTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CServerLobbyData_AutoTest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 max_duration_s = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_duration_s());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CServerLobbyData_AutoTest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CServerLobbyData_AutoTest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CServerLobbyData_AutoTest::GetClassData() const { return &_class_data_; }


void CServerLobbyData_AutoTest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CServerLobbyData_AutoTest*>(&to_msg);
  auto& from = static_cast<const CServerLobbyData_AutoTest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CServerLobbyData_AutoTest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_max_duration_s()) {
    _this->_internal_set_max_duration_s(from._internal_max_duration_s());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CServerLobbyData_AutoTest::CopyFrom(const CServerLobbyData_AutoTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CServerLobbyData_AutoTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CServerLobbyData_AutoTest::IsInitialized() const {
  return true;
}

void CServerLobbyData_AutoTest::InternalSwap(CServerLobbyData_AutoTest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.max_duration_s_, other->_impl_.max_duration_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CServerLobbyData_AutoTest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[8]);
}

// ===================================================================

class CSOCitadelServerDynamicLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOCitadelServerDynamicLobby>()._impl_._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_broadcast_active(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_spectator_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CSOCitadelServerDynamicLobby::CSOCitadelServerDynamicLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSOCitadelServerDynamicLobby)
}
CSOCitadelServerDynamicLobby::CSOCitadelServerDynamicLobby(const CSOCitadelServerDynamicLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSOCitadelServerDynamicLobby* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.left_account_ids_){from._impl_.left_account_ids_}
    , /*decltype(_impl_._left_account_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.lobby_id_){}
    , decltype(_impl_.broadcast_active_){}
    , decltype(_impl_.spectator_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.lobby_id_, &from._impl_.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.spectator_count_) -
    reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.spectator_count_));
  // @@protoc_insertion_point(copy_constructor:CSOCitadelServerDynamicLobby)
}

inline void CSOCitadelServerDynamicLobby::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.left_account_ids_){arena}
    , /*decltype(_impl_._left_account_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
    , decltype(_impl_.broadcast_active_){false}
    , decltype(_impl_.spectator_count_){0u}
  };
}

CSOCitadelServerDynamicLobby::~CSOCitadelServerDynamicLobby() {
  // @@protoc_insertion_point(destructor:CSOCitadelServerDynamicLobby)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSOCitadelServerDynamicLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.left_account_ids_.~RepeatedField();
}

void CSOCitadelServerDynamicLobby::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSOCitadelServerDynamicLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOCitadelServerDynamicLobby)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.left_account_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.spectator_count_) -
        reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.spectator_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOCitadelServerDynamicLobby::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_lobby_id(&has_bits);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 left_account_ids = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_left_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_left_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool broadcast_active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_broadcast_active(&has_bits);
          _impl_.broadcast_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 spectator_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_spectator_count(&has_bits);
          _impl_.spectator_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSOCitadelServerDynamicLobby::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOCitadelServerDynamicLobby)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_lobby_id(), target);
  }

  // repeated uint32 left_account_ids = 2 [packed = true];
  {
    int byte_size = _impl_._left_account_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_left_account_ids(), byte_size, target);
    }
  }

  // optional bool broadcast_active = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_broadcast_active(), target);
  }

  // optional uint32 spectator_count = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_spectator_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOCitadelServerDynamicLobby)
  return target;
}

size_t CSOCitadelServerDynamicLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOCitadelServerDynamicLobby)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 left_account_ids = 2 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.left_account_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._left_account_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 lobby_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lobby_id());
    }

    // optional bool broadcast_active = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 spectator_count = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_spectator_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOCitadelServerDynamicLobby::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSOCitadelServerDynamicLobby::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOCitadelServerDynamicLobby::GetClassData() const { return &_class_data_; }


void CSOCitadelServerDynamicLobby::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSOCitadelServerDynamicLobby*>(&to_msg);
  auto& from = static_cast<const CSOCitadelServerDynamicLobby&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSOCitadelServerDynamicLobby)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.left_account_ids_.MergeFrom(from._impl_.left_account_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.broadcast_active_ = from._impl_.broadcast_active_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.spectator_count_ = from._impl_.spectator_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOCitadelServerDynamicLobby::CopyFrom(const CSOCitadelServerDynamicLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOCitadelServerDynamicLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOCitadelServerDynamicLobby::IsInitialized() const {
  return true;
}

void CSOCitadelServerDynamicLobby::InternalSwap(CSOCitadelServerDynamicLobby* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.left_account_ids_.InternalSwap(&other->_impl_.left_account_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOCitadelServerDynamicLobby, _impl_.spectator_count_)
      + sizeof(CSOCitadelServerDynamicLobby::_impl_.spectator_count_)
      - PROTOBUF_FIELD_OFFSET(CSOCitadelServerDynamicLobby, _impl_.lobby_id_)>(
          reinterpret_cast<char*>(&_impl_.lobby_id_),
          reinterpret_cast<char*>(&other->_impl_.lobby_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOCitadelServerDynamicLobby::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[9]);
}

// ===================================================================

class CSOCitadelServerStaticLobby_Member::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOCitadelServerStaticLobby_Member>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_persona_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_party_index(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_comms_restricted(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_lane_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::CMsgGCAccountData& gc_account_data(const CSOCitadelServerStaticLobby_Member* msg);
  static void set_has_gc_account_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_party_desires_laning_together(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_hide_holiday_models(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::CMsgGCAccountData&
CSOCitadelServerStaticLobby_Member::_Internal::gc_account_data(const CSOCitadelServerStaticLobby_Member* msg) {
  return *msg->_impl_.gc_account_data_;
}
void CSOCitadelServerStaticLobby_Member::clear_gc_account_data() {
  if (_impl_.gc_account_data_ != nullptr) _impl_.gc_account_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CSOCitadelServerStaticLobby_Member::CSOCitadelServerStaticLobby_Member(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSOCitadelServerStaticLobby.Member)
}
CSOCitadelServerStaticLobby_Member::CSOCitadelServerStaticLobby_Member(const CSOCitadelServerStaticLobby_Member& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSOCitadelServerStaticLobby_Member* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.award_ids_){from._impl_.award_ids_}
    , decltype(_impl_.persona_name_){}
    , decltype(_impl_.gc_account_data_){nullptr}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.team_){}
    , decltype(_impl_.player_slot_){}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.party_index_){}
    , decltype(_impl_.platform_){}
    , decltype(_impl_.lane_id_){}
    , decltype(_impl_.is_comms_restricted_){}
    , decltype(_impl_.party_desires_laning_together_){}
    , decltype(_impl_.hide_holiday_models_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.persona_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_persona_name()) {
    _this->_impl_.persona_name_.Set(from._internal_persona_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_gc_account_data()) {
    _this->_impl_.gc_account_data_ = new ::CMsgGCAccountData(*from._impl_.gc_account_data_);
  }
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hide_holiday_models_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.hide_holiday_models_));
  // @@protoc_insertion_point(copy_constructor:CSOCitadelServerStaticLobby.Member)
}

inline void CSOCitadelServerStaticLobby_Member::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.award_ids_){arena}
    , decltype(_impl_.persona_name_){}
    , decltype(_impl_.gc_account_data_){nullptr}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.team_){0}
    , decltype(_impl_.player_slot_){0u}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.party_index_){0u}
    , decltype(_impl_.platform_){0}
    , decltype(_impl_.lane_id_){0u}
    , decltype(_impl_.is_comms_restricted_){false}
    , decltype(_impl_.party_desires_laning_together_){false}
    , decltype(_impl_.hide_holiday_models_){false}
  };
  _impl_.persona_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSOCitadelServerStaticLobby_Member::~CSOCitadelServerStaticLobby_Member() {
  // @@protoc_insertion_point(destructor:CSOCitadelServerStaticLobby.Member)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSOCitadelServerStaticLobby_Member::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.award_ids_.~RepeatedField();
  _impl_.persona_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.gc_account_data_;
}

void CSOCitadelServerStaticLobby_Member::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSOCitadelServerStaticLobby_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOCitadelServerStaticLobby.Member)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.award_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.persona_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.gc_account_data_ != nullptr);
      _impl_.gc_account_data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.platform_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.platform_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.lane_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.hide_holiday_models_) -
        reinterpret_cast<char*>(&_impl_.lane_id_)) + sizeof(_impl_.hide_holiday_models_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOCitadelServerStaticLobby_Member::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string persona_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_persona_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSOCitadelServerStaticLobby.Member.persona_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelLobbyTeam team = 3 [default = k_ECitadelLobbyTeam_Team0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelLobbyTeam_IsValid(val))) {
            _internal_set_team(static_cast<::ECitadelLobbyTeam>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_slot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_player_slot(&has_bits);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 party_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_party_index(&has_bits);
          _impl_.party_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EGCPlatform platform = 7 [default = k_eGCPlatform_None];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGCPlatform_IsValid(val))) {
            _internal_set_platform(static_cast<::EGCPlatform>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .CSOCitadelServerStaticLobby.EAwardIDs award_ids = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::CSOCitadelServerStaticLobby_EAwardIDs_IsValid(val))) {
              _internal_add_award_ids(static_cast<::CSOCitadelServerStaticLobby_EAwardIDs>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_award_ids(), ptr, ctx, ::CSOCitadelServerStaticLobby_EAwardIDs_IsValid, &_internal_metadata_, 8);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_comms_restricted = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_is_comms_restricted(&has_bits);
          _impl_.is_comms_restricted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lane_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_lane_id(&has_bits);
          _impl_.lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGCAccountData gc_account_data = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_gc_account_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool party_desires_laning_together = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_party_desires_laning_together(&has_bits);
          _impl_.party_desires_laning_together_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hide_holiday_models = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_hide_holiday_models(&has_bits);
          _impl_.hide_holiday_models_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSOCitadelServerStaticLobby_Member::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOCitadelServerStaticLobby.Member)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name().data(), static_cast<int>(this->_internal_persona_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOCitadelServerStaticLobby.Member.persona_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_persona_name(), target);
  }

  // optional .ECitadelLobbyTeam team = 3 [default = k_ECitadelLobbyTeam_Team0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_team(), target);
  }

  // optional uint32 player_slot = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_player_slot(), target);
  }

  // optional uint32 hero_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hero_id(), target);
  }

  // optional uint32 party_index = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_party_index(), target);
  }

  // optional .EGCPlatform platform = 7 [default = k_eGCPlatform_None];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_platform(), target);
  }

  // repeated .CSOCitadelServerStaticLobby.EAwardIDs award_ids = 8;
  for (int i = 0, n = this->_internal_award_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        8, this->_internal_award_ids(i), target);
  }

  // optional bool is_comms_restricted = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_is_comms_restricted(), target);
  }

  // optional uint32 lane_id = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_lane_id(), target);
  }

  // optional .CMsgGCAccountData gc_account_data = 13;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::gc_account_data(this),
        _Internal::gc_account_data(this).GetCachedSize(), target, stream);
  }

  // optional bool party_desires_laning_together = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_party_desires_laning_together(), target);
  }

  // optional bool hide_holiday_models = 15;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_hide_holiday_models(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOCitadelServerStaticLobby.Member)
  return target;
}

size_t CSOCitadelServerStaticLobby_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOCitadelServerStaticLobby.Member)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSOCitadelServerStaticLobby.EAwardIDs award_ids = 8;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_award_ids_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_award_ids(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string persona_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name());
    }

    // optional .CMsgGCAccountData gc_account_data = 13;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gc_account_data_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional .ECitadelLobbyTeam team = 3 [default = k_ECitadelLobbyTeam_Team0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_team());
    }

    // optional uint32 player_slot = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_slot());
    }

    // optional uint32 hero_id = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 party_index = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_party_index());
    }

    // optional .EGCPlatform platform = 7 [default = k_eGCPlatform_None];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_platform());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 lane_id = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lane_id());
    }

    // optional bool is_comms_restricted = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool party_desires_laning_together = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool hide_holiday_models = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOCitadelServerStaticLobby_Member::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSOCitadelServerStaticLobby_Member::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOCitadelServerStaticLobby_Member::GetClassData() const { return &_class_data_; }


void CSOCitadelServerStaticLobby_Member::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSOCitadelServerStaticLobby_Member*>(&to_msg);
  auto& from = static_cast<const CSOCitadelServerStaticLobby_Member&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSOCitadelServerStaticLobby.Member)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.award_ids_.MergeFrom(from._impl_.award_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_persona_name(from._internal_persona_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_gc_account_data()->::CMsgGCAccountData::MergeFrom(
          from._internal_gc_account_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.team_ = from._impl_.team_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.party_index_ = from._impl_.party_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.platform_ = from._impl_.platform_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.lane_id_ = from._impl_.lane_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.is_comms_restricted_ = from._impl_.is_comms_restricted_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.party_desires_laning_together_ = from._impl_.party_desires_laning_together_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.hide_holiday_models_ = from._impl_.hide_holiday_models_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOCitadelServerStaticLobby_Member::CopyFrom(const CSOCitadelServerStaticLobby_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOCitadelServerStaticLobby.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOCitadelServerStaticLobby_Member::IsInitialized() const {
  return true;
}

void CSOCitadelServerStaticLobby_Member::InternalSwap(CSOCitadelServerStaticLobby_Member* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.award_ids_.InternalSwap(&other->_impl_.award_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.persona_name_, lhs_arena,
      &other->_impl_.persona_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOCitadelServerStaticLobby_Member, _impl_.hide_holiday_models_)
      + sizeof(CSOCitadelServerStaticLobby_Member::_impl_.hide_holiday_models_)
      - PROTOBUF_FIELD_OFFSET(CSOCitadelServerStaticLobby_Member, _impl_.gc_account_data_)>(
          reinterpret_cast<char*>(&_impl_.gc_account_data_),
          reinterpret_cast<char*>(&other->_impl_.gc_account_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOCitadelServerStaticLobby_Member::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[10]);
}

// ===================================================================

class CSOCitadelServerStaticLobby_DevSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOCitadelServerStaticLobby_DevSettings>()._impl_._has_bits_);
  static void set_has_console_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSOCitadelServerStaticLobby_DevSettings::CSOCitadelServerStaticLobby_DevSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSOCitadelServerStaticLobby.DevSettings)
}
CSOCitadelServerStaticLobby_DevSettings::CSOCitadelServerStaticLobby_DevSettings(const CSOCitadelServerStaticLobby_DevSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSOCitadelServerStaticLobby_DevSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.console_string_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.console_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.console_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_console_string()) {
    _this->_impl_.console_string_.Set(from._internal_console_string(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CSOCitadelServerStaticLobby.DevSettings)
}

inline void CSOCitadelServerStaticLobby_DevSettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.console_string_){}
  };
  _impl_.console_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.console_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSOCitadelServerStaticLobby_DevSettings::~CSOCitadelServerStaticLobby_DevSettings() {
  // @@protoc_insertion_point(destructor:CSOCitadelServerStaticLobby.DevSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSOCitadelServerStaticLobby_DevSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.console_string_.Destroy();
}

void CSOCitadelServerStaticLobby_DevSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSOCitadelServerStaticLobby_DevSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOCitadelServerStaticLobby.DevSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.console_string_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOCitadelServerStaticLobby_DevSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string console_string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_console_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSOCitadelServerStaticLobby.DevSettings.console_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSOCitadelServerStaticLobby_DevSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOCitadelServerStaticLobby.DevSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string console_string = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_console_string().data(), static_cast<int>(this->_internal_console_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOCitadelServerStaticLobby.DevSettings.console_string");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_console_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOCitadelServerStaticLobby.DevSettings)
  return target;
}

size_t CSOCitadelServerStaticLobby_DevSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOCitadelServerStaticLobby.DevSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string console_string = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_console_string());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOCitadelServerStaticLobby_DevSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSOCitadelServerStaticLobby_DevSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOCitadelServerStaticLobby_DevSettings::GetClassData() const { return &_class_data_; }


void CSOCitadelServerStaticLobby_DevSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSOCitadelServerStaticLobby_DevSettings*>(&to_msg);
  auto& from = static_cast<const CSOCitadelServerStaticLobby_DevSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSOCitadelServerStaticLobby.DevSettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_console_string()) {
    _this->_internal_set_console_string(from._internal_console_string());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOCitadelServerStaticLobby_DevSettings::CopyFrom(const CSOCitadelServerStaticLobby_DevSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOCitadelServerStaticLobby.DevSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOCitadelServerStaticLobby_DevSettings::IsInitialized() const {
  return true;
}

void CSOCitadelServerStaticLobby_DevSettings::InternalSwap(CSOCitadelServerStaticLobby_DevSettings* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.console_string_, lhs_arena,
      &other->_impl_.console_string_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOCitadelServerStaticLobby_DevSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[11]);
}

// ===================================================================

class CSOCitadelServerStaticLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOCitadelServerStaticLobby>()._impl_._has_bits_);
  static void set_has_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_replay_salt(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_level_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CSOCitadelServerStaticLobby_DevSettings& dev_settings(const CSOCitadelServerStaticLobby* msg);
  static void set_has_dev_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gc_provided_heroes(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_bot_difficulty(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_metadata_salt(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_match_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_experimental_gameplay_state(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_region_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_broadcast_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_new_player_pool(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_low_pri_pool(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_is_restricted_access(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_cheats_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_duplicate_heroes_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_is_high_skill_range_parties(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_experimental_heroes_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_average_badge_team_0(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_average_badge_team_1(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

const ::CSOCitadelServerStaticLobby_DevSettings&
CSOCitadelServerStaticLobby::_Internal::dev_settings(const CSOCitadelServerStaticLobby* msg) {
  return *msg->_impl_.dev_settings_;
}
void CSOCitadelServerStaticLobby::clear_extra_messages() {
  _impl_.extra_messages_.Clear();
}
CSOCitadelServerStaticLobby::CSOCitadelServerStaticLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSOCitadelServerStaticLobby)
}
CSOCitadelServerStaticLobby::CSOCitadelServerStaticLobby(const CSOCitadelServerStaticLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSOCitadelServerStaticLobby* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.extra_messages_){from._impl_.extra_messages_}
    , decltype(_impl_.members_){from._impl_.members_}
    , decltype(_impl_.level_name_){}
    , decltype(_impl_.broadcast_url_){}
    , decltype(_impl_.dev_settings_){nullptr}
    , decltype(_impl_.server_steam_id_){}
    , decltype(_impl_.lobby_id_){}
    , decltype(_impl_.replay_salt_){}
    , decltype(_impl_.bot_difficulty_){}
    , decltype(_impl_.metadata_salt_){}
    , decltype(_impl_.match_start_time_){}
    , decltype(_impl_.experimental_gameplay_state_){}
    , decltype(_impl_.region_mode_){}
    , decltype(_impl_.gc_provided_heroes_){}
    , decltype(_impl_.new_player_pool_){}
    , decltype(_impl_.low_pri_pool_){}
    , decltype(_impl_.is_restricted_access_){}
    , decltype(_impl_.cheats_enabled_){}
    , decltype(_impl_.duplicate_heroes_enabled_){}
    , decltype(_impl_.is_high_skill_range_parties_){}
    , decltype(_impl_.experimental_heroes_enabled_){}
    , decltype(_impl_.average_badge_team_0_){}
    , decltype(_impl_.average_badge_team_1_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.level_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.level_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_level_name()) {
    _this->_impl_.level_name_.Set(from._internal_level_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.broadcast_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.broadcast_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_broadcast_url()) {
    _this->_impl_.broadcast_url_.Set(from._internal_broadcast_url(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_dev_settings()) {
    _this->_impl_.dev_settings_ = new ::CSOCitadelServerStaticLobby_DevSettings(*from._impl_.dev_settings_);
  }
  ::memcpy(&_impl_.server_steam_id_, &from._impl_.server_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.average_badge_team_1_) -
    reinterpret_cast<char*>(&_impl_.server_steam_id_)) + sizeof(_impl_.average_badge_team_1_));
  // @@protoc_insertion_point(copy_constructor:CSOCitadelServerStaticLobby)
}

inline void CSOCitadelServerStaticLobby::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.extra_messages_){arena}
    , decltype(_impl_.members_){arena}
    , decltype(_impl_.level_name_){}
    , decltype(_impl_.broadcast_url_){}
    , decltype(_impl_.dev_settings_){nullptr}
    , decltype(_impl_.server_steam_id_){uint64_t{0u}}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
    , decltype(_impl_.replay_salt_){0u}
    , decltype(_impl_.bot_difficulty_){0}
    , decltype(_impl_.metadata_salt_){0u}
    , decltype(_impl_.match_start_time_){0u}
    , decltype(_impl_.experimental_gameplay_state_){0u}
    , decltype(_impl_.region_mode_){0}
    , decltype(_impl_.gc_provided_heroes_){false}
    , decltype(_impl_.new_player_pool_){false}
    , decltype(_impl_.low_pri_pool_){false}
    , decltype(_impl_.is_restricted_access_){false}
    , decltype(_impl_.cheats_enabled_){false}
    , decltype(_impl_.duplicate_heroes_enabled_){false}
    , decltype(_impl_.is_high_skill_range_parties_){false}
    , decltype(_impl_.experimental_heroes_enabled_){false}
    , decltype(_impl_.average_badge_team_0_){0u}
    , decltype(_impl_.average_badge_team_1_){0u}
  };
  _impl_.level_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.level_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.broadcast_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.broadcast_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSOCitadelServerStaticLobby::~CSOCitadelServerStaticLobby() {
  // @@protoc_insertion_point(destructor:CSOCitadelServerStaticLobby)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSOCitadelServerStaticLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.extra_messages_.~RepeatedPtrField();
  _impl_.members_.~RepeatedPtrField();
  _impl_.level_name_.Destroy();
  _impl_.broadcast_url_.Destroy();
  if (this != internal_default_instance()) delete _impl_.dev_settings_;
}

void CSOCitadelServerStaticLobby::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSOCitadelServerStaticLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOCitadelServerStaticLobby)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extra_messages_.Clear();
  _impl_.members_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.level_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.broadcast_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.dev_settings_ != nullptr);
      _impl_.dev_settings_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.server_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.metadata_salt_) -
        reinterpret_cast<char*>(&_impl_.server_steam_id_)) + sizeof(_impl_.metadata_salt_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.match_start_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cheats_enabled_) -
        reinterpret_cast<char*>(&_impl_.match_start_time_)) + sizeof(_impl_.cheats_enabled_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&_impl_.duplicate_heroes_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.average_badge_team_1_) -
        reinterpret_cast<char*>(&_impl_.duplicate_heroes_enabled_)) + sizeof(_impl_.average_badge_team_1_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOCitadelServerStaticLobby::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CExtraMsgBlock extra_messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extra_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 server_steam_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_server_steam_id(&has_bits);
          _impl_.server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 lobby_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_lobby_id(&has_bits);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 replay_salt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_replay_salt(&has_bits);
          _impl_.replay_salt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional string level_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_level_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSOCitadelServerStaticLobby.level_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .CSOCitadelServerStaticLobby.Member members = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .CSOCitadelServerStaticLobby.DevSettings dev_settings = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_dev_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool gc_provided_heroes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_gc_provided_heroes(&has_bits);
          _impl_.gc_provided_heroes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelBotDifficulty bot_difficulty = 9 [default = k_ECitadelBotDifficulty_None];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelBotDifficulty_IsValid(val))) {
            _internal_set_bot_difficulty(static_cast<::ECitadelBotDifficulty>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 metadata_salt = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_metadata_salt(&has_bits);
          _impl_.metadata_salt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 match_start_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_match_start_time(&has_bits);
          _impl_.match_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 experimental_gameplay_state = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_experimental_gameplay_state(&has_bits);
          _impl_.experimental_gameplay_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelRegionMode region_mode = 16 [default = k_ECitadelRegionMode_ROW];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelRegionMode_IsValid(val))) {
            _internal_set_region_mode(static_cast<::ECitadelRegionMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string broadcast_url = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_broadcast_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSOCitadelServerStaticLobby.broadcast_url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool new_player_pool = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_new_player_pool(&has_bits);
          _impl_.new_player_pool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool low_pri_pool = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_low_pri_pool(&has_bits);
          _impl_.low_pri_pool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_restricted_access = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_is_restricted_access(&has_bits);
          _impl_.is_restricted_access_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cheats_enabled = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_cheats_enabled(&has_bits);
          _impl_.cheats_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool duplicate_heroes_enabled = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_duplicate_heroes_enabled(&has_bits);
          _impl_.duplicate_heroes_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_high_skill_range_parties = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_is_high_skill_range_parties(&has_bits);
          _impl_.is_high_skill_range_parties_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool experimental_heroes_enabled = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_experimental_heroes_enabled(&has_bits);
          _impl_.experimental_heroes_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 average_badge_team_0 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_average_badge_team_0(&has_bits);
          _impl_.average_badge_team_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 average_badge_team_1 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_average_badge_team_1(&has_bits);
          _impl_.average_badge_team_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSOCitadelServerStaticLobby::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOCitadelServerStaticLobby)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CExtraMsgBlock extra_messages = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extra_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_extra_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 server_steam_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_server_steam_id(), target);
  }

  // optional uint64 lobby_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_lobby_id(), target);
  }

  // optional fixed32 replay_salt = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(4, this->_internal_replay_salt(), target);
  }

  // optional string level_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_level_name().data(), static_cast<int>(this->_internal_level_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOCitadelServerStaticLobby.level_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_level_name(), target);
  }

  // repeated .CSOCitadelServerStaticLobby.Member members = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .CSOCitadelServerStaticLobby.DevSettings dev_settings = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::dev_settings(this),
        _Internal::dev_settings(this).GetCachedSize(), target, stream);
  }

  // optional bool gc_provided_heroes = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_gc_provided_heroes(), target);
  }

  // optional .ECitadelBotDifficulty bot_difficulty = 9 [default = k_ECitadelBotDifficulty_None];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_bot_difficulty(), target);
  }

  // optional fixed32 metadata_salt = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(10, this->_internal_metadata_salt(), target);
  }

  // optional uint32 match_start_time = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_match_start_time(), target);
  }

  // optional uint32 experimental_gameplay_state = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_experimental_gameplay_state(), target);
  }

  // optional .ECitadelRegionMode region_mode = 16 [default = k_ECitadelRegionMode_ROW];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      16, this->_internal_region_mode(), target);
  }

  // optional string broadcast_url = 17;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_broadcast_url().data(), static_cast<int>(this->_internal_broadcast_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOCitadelServerStaticLobby.broadcast_url");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_broadcast_url(), target);
  }

  // optional bool new_player_pool = 18;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_new_player_pool(), target);
  }

  // optional bool low_pri_pool = 19;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_low_pri_pool(), target);
  }

  // optional bool is_restricted_access = 20;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_is_restricted_access(), target);
  }

  // optional bool cheats_enabled = 21;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_cheats_enabled(), target);
  }

  // optional bool duplicate_heroes_enabled = 22;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_duplicate_heroes_enabled(), target);
  }

  // optional bool is_high_skill_range_parties = 23;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_is_high_skill_range_parties(), target);
  }

  // optional bool experimental_heroes_enabled = 24;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_experimental_heroes_enabled(), target);
  }

  // optional uint32 average_badge_team_0 = 25;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_average_badge_team_0(), target);
  }

  // optional uint32 average_badge_team_1 = 26;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_average_badge_team_1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOCitadelServerStaticLobby)
  return target;
}

size_t CSOCitadelServerStaticLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOCitadelServerStaticLobby)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CExtraMsgBlock extra_messages = 1;
  total_size += 1UL * this->_internal_extra_messages_size();
  for (const auto& msg : this->_impl_.extra_messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CSOCitadelServerStaticLobby.Member members = 6;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->_impl_.members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string level_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_level_name());
    }

    // optional string broadcast_url = 17;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_broadcast_url());
    }

    // optional .CSOCitadelServerStaticLobby.DevSettings dev_settings = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dev_settings_);
    }

    // optional fixed64 server_steam_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint64 lobby_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lobby_id());
    }

    // optional fixed32 replay_salt = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional .ECitadelBotDifficulty bot_difficulty = 9 [default = k_ECitadelBotDifficulty_None];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_bot_difficulty());
    }

    // optional fixed32 metadata_salt = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 match_start_time = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_match_start_time());
    }

    // optional uint32 experimental_gameplay_state = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_experimental_gameplay_state());
    }

    // optional .ECitadelRegionMode region_mode = 16 [default = k_ECitadelRegionMode_ROW];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_region_mode());
    }

    // optional bool gc_provided_heroes = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool new_player_pool = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool low_pri_pool = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool is_restricted_access = 20;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool cheats_enabled = 21;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional bool duplicate_heroes_enabled = 22;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool is_high_skill_range_parties = 23;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool experimental_heroes_enabled = 24;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional uint32 average_badge_team_0 = 25;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_average_badge_team_0());
    }

    // optional uint32 average_badge_team_1 = 26;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_average_badge_team_1());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOCitadelServerStaticLobby::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSOCitadelServerStaticLobby::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOCitadelServerStaticLobby::GetClassData() const { return &_class_data_; }


void CSOCitadelServerStaticLobby::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSOCitadelServerStaticLobby*>(&to_msg);
  auto& from = static_cast<const CSOCitadelServerStaticLobby&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSOCitadelServerStaticLobby)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.extra_messages_.MergeFrom(from._impl_.extra_messages_);
  _this->_impl_.members_.MergeFrom(from._impl_.members_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_level_name(from._internal_level_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_broadcast_url(from._internal_broadcast_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_dev_settings()->::CSOCitadelServerStaticLobby_DevSettings::MergeFrom(
          from._internal_dev_settings());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.server_steam_id_ = from._impl_.server_steam_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.replay_salt_ = from._impl_.replay_salt_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.bot_difficulty_ = from._impl_.bot_difficulty_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.metadata_salt_ = from._impl_.metadata_salt_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.match_start_time_ = from._impl_.match_start_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.experimental_gameplay_state_ = from._impl_.experimental_gameplay_state_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.region_mode_ = from._impl_.region_mode_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.gc_provided_heroes_ = from._impl_.gc_provided_heroes_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.new_player_pool_ = from._impl_.new_player_pool_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.low_pri_pool_ = from._impl_.low_pri_pool_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.is_restricted_access_ = from._impl_.is_restricted_access_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.cheats_enabled_ = from._impl_.cheats_enabled_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.duplicate_heroes_enabled_ = from._impl_.duplicate_heroes_enabled_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.is_high_skill_range_parties_ = from._impl_.is_high_skill_range_parties_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.experimental_heroes_enabled_ = from._impl_.experimental_heroes_enabled_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.average_badge_team_0_ = from._impl_.average_badge_team_0_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.average_badge_team_1_ = from._impl_.average_badge_team_1_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOCitadelServerStaticLobby::CopyFrom(const CSOCitadelServerStaticLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOCitadelServerStaticLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOCitadelServerStaticLobby::IsInitialized() const {
  return true;
}

void CSOCitadelServerStaticLobby::InternalSwap(CSOCitadelServerStaticLobby* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.extra_messages_.InternalSwap(&other->_impl_.extra_messages_);
  _impl_.members_.InternalSwap(&other->_impl_.members_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.level_name_, lhs_arena,
      &other->_impl_.level_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.broadcast_url_, lhs_arena,
      &other->_impl_.broadcast_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOCitadelServerStaticLobby, _impl_.average_badge_team_1_)
      + sizeof(CSOCitadelServerStaticLobby::_impl_.average_badge_team_1_)
      - PROTOBUF_FIELD_OFFSET(CSOCitadelServerStaticLobby, _impl_.dev_settings_)>(
          reinterpret_cast<char*>(&_impl_.dev_settings_),
          reinterpret_cast<char*>(&other->_impl_.dev_settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOCitadelServerStaticLobby::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[12]);
}

// ===================================================================

class CMsgServerSignoutData_ServerPerfStats_FrameCounts::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerSignoutData_ServerPerfStats_FrameCounts>()._impl_._has_bits_);
  static void set_has_num_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_longest_run(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_runs(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgServerSignoutData_ServerPerfStats_FrameCounts::CMsgServerSignoutData_ServerPerfStats_FrameCounts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerSignoutData_ServerPerfStats.FrameCounts)
}
CMsgServerSignoutData_ServerPerfStats_FrameCounts::CMsgServerSignoutData_ServerPerfStats_FrameCounts(const CMsgServerSignoutData_ServerPerfStats_FrameCounts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerSignoutData_ServerPerfStats_FrameCounts* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.num_frames_){}
    , decltype(_impl_.longest_run_){}
    , decltype(_impl_.num_runs_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.num_frames_, &from._impl_.num_frames_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_runs_) -
    reinterpret_cast<char*>(&_impl_.num_frames_)) + sizeof(_impl_.num_runs_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerSignoutData_ServerPerfStats.FrameCounts)
}

inline void CMsgServerSignoutData_ServerPerfStats_FrameCounts::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.num_frames_){0u}
    , decltype(_impl_.longest_run_){0u}
    , decltype(_impl_.num_runs_){0u}
  };
}

CMsgServerSignoutData_ServerPerfStats_FrameCounts::~CMsgServerSignoutData_ServerPerfStats_FrameCounts() {
  // @@protoc_insertion_point(destructor:CMsgServerSignoutData_ServerPerfStats.FrameCounts)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerSignoutData_ServerPerfStats_FrameCounts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerSignoutData_ServerPerfStats_FrameCounts::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerSignoutData_ServerPerfStats_FrameCounts::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerSignoutData_ServerPerfStats.FrameCounts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.num_frames_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.num_runs_) -
        reinterpret_cast<char*>(&_impl_.num_frames_)) + sizeof(_impl_.num_runs_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerSignoutData_ServerPerfStats_FrameCounts::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 num_frames = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num_frames(&has_bits);
          _impl_.num_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 longest_run = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_longest_run(&has_bits);
          _impl_.longest_run_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_runs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_num_runs(&has_bits);
          _impl_.num_runs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerSignoutData_ServerPerfStats_FrameCounts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerSignoutData_ServerPerfStats.FrameCounts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 num_frames = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_frames(), target);
  }

  // optional uint32 longest_run = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_longest_run(), target);
  }

  // optional uint32 num_runs = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_runs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerSignoutData_ServerPerfStats.FrameCounts)
  return target;
}

size_t CMsgServerSignoutData_ServerPerfStats_FrameCounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerSignoutData_ServerPerfStats.FrameCounts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 num_frames = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_frames());
    }

    // optional uint32 longest_run = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_longest_run());
    }

    // optional uint32 num_runs = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_runs());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerSignoutData_ServerPerfStats_FrameCounts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerSignoutData_ServerPerfStats_FrameCounts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerSignoutData_ServerPerfStats_FrameCounts::GetClassData() const { return &_class_data_; }


void CMsgServerSignoutData_ServerPerfStats_FrameCounts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerSignoutData_ServerPerfStats_FrameCounts*>(&to_msg);
  auto& from = static_cast<const CMsgServerSignoutData_ServerPerfStats_FrameCounts&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerSignoutData_ServerPerfStats.FrameCounts)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.num_frames_ = from._impl_.num_frames_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.longest_run_ = from._impl_.longest_run_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.num_runs_ = from._impl_.num_runs_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerSignoutData_ServerPerfStats_FrameCounts::CopyFrom(const CMsgServerSignoutData_ServerPerfStats_FrameCounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerSignoutData_ServerPerfStats.FrameCounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerSignoutData_ServerPerfStats_FrameCounts::IsInitialized() const {
  return true;
}

void CMsgServerSignoutData_ServerPerfStats_FrameCounts::InternalSwap(CMsgServerSignoutData_ServerPerfStats_FrameCounts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_ServerPerfStats_FrameCounts, _impl_.num_runs_)
      + sizeof(CMsgServerSignoutData_ServerPerfStats_FrameCounts::_impl_.num_runs_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_ServerPerfStats_FrameCounts, _impl_.num_frames_)>(
          reinterpret_cast<char*>(&_impl_.num_frames_),
          reinterpret_cast<char*>(&other->_impl_.num_frames_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerSignoutData_ServerPerfStats_FrameCounts::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[13]);
}

// ===================================================================

class CMsgServerSignoutData_ServerPerfStats_PerfSample::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerSignoutData_ServerPerfStats_PerfSample>()._impl_._has_bits_);
  static void set_has_game_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_avg_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_avg_idle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_total_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CMsgServerSignoutData_ServerPerfStats_FrameCounts& performant_frames(const CMsgServerSignoutData_ServerPerfStats_PerfSample* msg);
  static void set_has_performant_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgServerSignoutData_ServerPerfStats_FrameCounts& long_frames(const CMsgServerSignoutData_ServerPerfStats_PerfSample* msg);
  static void set_has_long_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgServerSignoutData_ServerPerfStats_FrameCounts& low_idle_frames(const CMsgServerSignoutData_ServerPerfStats_PerfSample* msg);
  static void set_has_low_idle_frames(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_memory_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_peak_memory_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::CMsgServerSignoutData_ServerPerfStats_FrameCounts&
CMsgServerSignoutData_ServerPerfStats_PerfSample::_Internal::performant_frames(const CMsgServerSignoutData_ServerPerfStats_PerfSample* msg) {
  return *msg->_impl_.performant_frames_;
}
const ::CMsgServerSignoutData_ServerPerfStats_FrameCounts&
CMsgServerSignoutData_ServerPerfStats_PerfSample::_Internal::long_frames(const CMsgServerSignoutData_ServerPerfStats_PerfSample* msg) {
  return *msg->_impl_.long_frames_;
}
const ::CMsgServerSignoutData_ServerPerfStats_FrameCounts&
CMsgServerSignoutData_ServerPerfStats_PerfSample::_Internal::low_idle_frames(const CMsgServerSignoutData_ServerPerfStats_PerfSample* msg) {
  return *msg->_impl_.low_idle_frames_;
}
CMsgServerSignoutData_ServerPerfStats_PerfSample::CMsgServerSignoutData_ServerPerfStats_PerfSample(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerSignoutData_ServerPerfStats.PerfSample)
}
CMsgServerSignoutData_ServerPerfStats_PerfSample::CMsgServerSignoutData_ServerPerfStats_PerfSample(const CMsgServerSignoutData_ServerPerfStats_PerfSample& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerSignoutData_ServerPerfStats_PerfSample* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.performant_frames_){nullptr}
    , decltype(_impl_.long_frames_){nullptr}
    , decltype(_impl_.low_idle_frames_){nullptr}
    , decltype(_impl_.game_time_s_){}
    , decltype(_impl_.avg_frame_){}
    , decltype(_impl_.avg_idle_){}
    , decltype(_impl_.total_frames_){}
    , decltype(_impl_.memory_bytes_){}
    , decltype(_impl_.peak_memory_bytes_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_performant_frames()) {
    _this->_impl_.performant_frames_ = new ::CMsgServerSignoutData_ServerPerfStats_FrameCounts(*from._impl_.performant_frames_);
  }
  if (from._internal_has_long_frames()) {
    _this->_impl_.long_frames_ = new ::CMsgServerSignoutData_ServerPerfStats_FrameCounts(*from._impl_.long_frames_);
  }
  if (from._internal_has_low_idle_frames()) {
    _this->_impl_.low_idle_frames_ = new ::CMsgServerSignoutData_ServerPerfStats_FrameCounts(*from._impl_.low_idle_frames_);
  }
  ::memcpy(&_impl_.game_time_s_, &from._impl_.game_time_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.peak_memory_bytes_) -
    reinterpret_cast<char*>(&_impl_.game_time_s_)) + sizeof(_impl_.peak_memory_bytes_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerSignoutData_ServerPerfStats.PerfSample)
}

inline void CMsgServerSignoutData_ServerPerfStats_PerfSample::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.performant_frames_){nullptr}
    , decltype(_impl_.long_frames_){nullptr}
    , decltype(_impl_.low_idle_frames_){nullptr}
    , decltype(_impl_.game_time_s_){0u}
    , decltype(_impl_.avg_frame_){0}
    , decltype(_impl_.avg_idle_){0}
    , decltype(_impl_.total_frames_){0u}
    , decltype(_impl_.memory_bytes_){uint64_t{0u}}
    , decltype(_impl_.peak_memory_bytes_){uint64_t{0u}}
  };
}

CMsgServerSignoutData_ServerPerfStats_PerfSample::~CMsgServerSignoutData_ServerPerfStats_PerfSample() {
  // @@protoc_insertion_point(destructor:CMsgServerSignoutData_ServerPerfStats.PerfSample)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerSignoutData_ServerPerfStats_PerfSample::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.performant_frames_;
  if (this != internal_default_instance()) delete _impl_.long_frames_;
  if (this != internal_default_instance()) delete _impl_.low_idle_frames_;
}

void CMsgServerSignoutData_ServerPerfStats_PerfSample::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerSignoutData_ServerPerfStats_PerfSample::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerSignoutData_ServerPerfStats.PerfSample)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.performant_frames_ != nullptr);
      _impl_.performant_frames_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.long_frames_ != nullptr);
      _impl_.long_frames_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.low_idle_frames_ != nullptr);
      _impl_.low_idle_frames_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.game_time_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.memory_bytes_) -
        reinterpret_cast<char*>(&_impl_.game_time_s_)) + sizeof(_impl_.memory_bytes_));
  }
  _impl_.peak_memory_bytes_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerSignoutData_ServerPerfStats_PerfSample::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 game_time_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_game_time_s(&has_bits);
          _impl_.game_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float avg_frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_avg_frame(&has_bits);
          _impl_.avg_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float avg_idle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_avg_idle(&has_bits);
          _impl_.avg_idle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 total_frames = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_total_frames(&has_bits);
          _impl_.total_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgServerSignoutData_ServerPerfStats.FrameCounts performant_frames = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_performant_frames(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgServerSignoutData_ServerPerfStats.FrameCounts long_frames = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_long_frames(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgServerSignoutData_ServerPerfStats.FrameCounts low_idle_frames = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_low_idle_frames(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 memory_bytes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_memory_bytes(&has_bits);
          _impl_.memory_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 peak_memory_bytes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_peak_memory_bytes(&has_bits);
          _impl_.peak_memory_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerSignoutData_ServerPerfStats_PerfSample::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerSignoutData_ServerPerfStats.PerfSample)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 game_time_s = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_game_time_s(), target);
  }

  // optional float avg_frame = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_avg_frame(), target);
  }

  // optional float avg_idle = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_avg_idle(), target);
  }

  // optional uint32 total_frames = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_total_frames(), target);
  }

  // optional .CMsgServerSignoutData_ServerPerfStats.FrameCounts performant_frames = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::performant_frames(this),
        _Internal::performant_frames(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgServerSignoutData_ServerPerfStats.FrameCounts long_frames = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::long_frames(this),
        _Internal::long_frames(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgServerSignoutData_ServerPerfStats.FrameCounts low_idle_frames = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::low_idle_frames(this),
        _Internal::low_idle_frames(this).GetCachedSize(), target, stream);
  }

  // optional uint64 memory_bytes = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_memory_bytes(), target);
  }

  // optional uint64 peak_memory_bytes = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_peak_memory_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerSignoutData_ServerPerfStats.PerfSample)
  return target;
}

size_t CMsgServerSignoutData_ServerPerfStats_PerfSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerSignoutData_ServerPerfStats.PerfSample)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgServerSignoutData_ServerPerfStats.FrameCounts performant_frames = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.performant_frames_);
    }

    // optional .CMsgServerSignoutData_ServerPerfStats.FrameCounts long_frames = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.long_frames_);
    }

    // optional .CMsgServerSignoutData_ServerPerfStats.FrameCounts low_idle_frames = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.low_idle_frames_);
    }

    // optional uint32 game_time_s = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_time_s());
    }

    // optional float avg_frame = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float avg_idle = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 total_frames = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_frames());
    }

    // optional uint64 memory_bytes = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_memory_bytes());
    }

  }
  // optional uint64 peak_memory_bytes = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_peak_memory_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerSignoutData_ServerPerfStats_PerfSample::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerSignoutData_ServerPerfStats_PerfSample::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerSignoutData_ServerPerfStats_PerfSample::GetClassData() const { return &_class_data_; }


void CMsgServerSignoutData_ServerPerfStats_PerfSample::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerSignoutData_ServerPerfStats_PerfSample*>(&to_msg);
  auto& from = static_cast<const CMsgServerSignoutData_ServerPerfStats_PerfSample&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerSignoutData_ServerPerfStats.PerfSample)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_performant_frames()->::CMsgServerSignoutData_ServerPerfStats_FrameCounts::MergeFrom(
          from._internal_performant_frames());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_long_frames()->::CMsgServerSignoutData_ServerPerfStats_FrameCounts::MergeFrom(
          from._internal_long_frames());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_low_idle_frames()->::CMsgServerSignoutData_ServerPerfStats_FrameCounts::MergeFrom(
          from._internal_low_idle_frames());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.game_time_s_ = from._impl_.game_time_s_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.avg_frame_ = from._impl_.avg_frame_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.avg_idle_ = from._impl_.avg_idle_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.total_frames_ = from._impl_.total_frames_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.memory_bytes_ = from._impl_.memory_bytes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_peak_memory_bytes(from._internal_peak_memory_bytes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerSignoutData_ServerPerfStats_PerfSample::CopyFrom(const CMsgServerSignoutData_ServerPerfStats_PerfSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerSignoutData_ServerPerfStats.PerfSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerSignoutData_ServerPerfStats_PerfSample::IsInitialized() const {
  return true;
}

void CMsgServerSignoutData_ServerPerfStats_PerfSample::InternalSwap(CMsgServerSignoutData_ServerPerfStats_PerfSample* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_ServerPerfStats_PerfSample, _impl_.peak_memory_bytes_)
      + sizeof(CMsgServerSignoutData_ServerPerfStats_PerfSample::_impl_.peak_memory_bytes_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_ServerPerfStats_PerfSample, _impl_.performant_frames_)>(
          reinterpret_cast<char*>(&_impl_.performant_frames_),
          reinterpret_cast<char*>(&other->_impl_.performant_frames_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerSignoutData_ServerPerfStats_PerfSample::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[14]);
}

// ===================================================================

class CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples>()._impl_._has_bits_);
  static void set_has_long_frame_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_low_idle_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples::CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerSignoutData_ServerPerfStats.MatchPerfSamples)
}
CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples::CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples(const CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.samples_){from._impl_.samples_}
    , decltype(_impl_.long_frame_threshold_){}
    , decltype(_impl_.low_idle_threshold_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.long_frame_threshold_, &from._impl_.long_frame_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.low_idle_threshold_) -
    reinterpret_cast<char*>(&_impl_.long_frame_threshold_)) + sizeof(_impl_.low_idle_threshold_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerSignoutData_ServerPerfStats.MatchPerfSamples)
}

inline void CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.samples_){arena}
    , decltype(_impl_.long_frame_threshold_){0}
    , decltype(_impl_.low_idle_threshold_){0}
  };
}

CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples::~CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples() {
  // @@protoc_insertion_point(destructor:CMsgServerSignoutData_ServerPerfStats.MatchPerfSamples)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.samples_.~RepeatedPtrField();
}

void CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerSignoutData_ServerPerfStats.MatchPerfSamples)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.samples_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.long_frame_threshold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.low_idle_threshold_) -
        reinterpret_cast<char*>(&_impl_.long_frame_threshold_)) + sizeof(_impl_.low_idle_threshold_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float long_frame_threshold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_long_frame_threshold(&has_bits);
          _impl_.long_frame_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float low_idle_threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_low_idle_threshold(&has_bits);
          _impl_.low_idle_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgServerSignoutData_ServerPerfStats.PerfSample samples = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_samples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerSignoutData_ServerPerfStats.MatchPerfSamples)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float long_frame_threshold = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_long_frame_threshold(), target);
  }

  // optional float low_idle_threshold = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_low_idle_threshold(), target);
  }

  // repeated .CMsgServerSignoutData_ServerPerfStats.PerfSample samples = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_samples_size()); i < n; i++) {
    const auto& repfield = this->_internal_samples(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerSignoutData_ServerPerfStats.MatchPerfSamples)
  return target;
}

size_t CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerSignoutData_ServerPerfStats.MatchPerfSamples)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerSignoutData_ServerPerfStats.PerfSample samples = 3;
  total_size += 1UL * this->_internal_samples_size();
  for (const auto& msg : this->_impl_.samples_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float long_frame_threshold = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float low_idle_threshold = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples::GetClassData() const { return &_class_data_; }


void CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples*>(&to_msg);
  auto& from = static_cast<const CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerSignoutData_ServerPerfStats.MatchPerfSamples)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.samples_.MergeFrom(from._impl_.samples_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.long_frame_threshold_ = from._impl_.long_frame_threshold_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.low_idle_threshold_ = from._impl_.low_idle_threshold_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples::CopyFrom(const CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerSignoutData_ServerPerfStats.MatchPerfSamples)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples::IsInitialized() const {
  return true;
}

void CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples::InternalSwap(CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.samples_.InternalSwap(&other->_impl_.samples_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples, _impl_.low_idle_threshold_)
      + sizeof(CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples::_impl_.low_idle_threshold_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples, _impl_.long_frame_threshold_)>(
          reinterpret_cast<char*>(&_impl_.long_frame_threshold_),
          reinterpret_cast<char*>(&other->_impl_.long_frame_threshold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[15]);
}

// ===================================================================

class CMsgServerSignoutData_ServerPerfStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerSignoutData_ServerPerfStats>()._impl_._has_bits_);
  static void set_has_peak_memory_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_memory_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_frame_time_max_micro_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_frame_time_95_micro_s(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_frame_time_avg_micro_s(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_frame_idle_time_95_micro_s(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_frame_idle_time_avg_micro_s(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_frame_time_80_micro_s(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_frame_time_99_micro_s(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples& perf_samples(const CMsgServerSignoutData_ServerPerfStats* msg);
  static void set_has_perf_samples(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples&
CMsgServerSignoutData_ServerPerfStats::_Internal::perf_samples(const CMsgServerSignoutData_ServerPerfStats* msg) {
  return *msg->_impl_.perf_samples_;
}
CMsgServerSignoutData_ServerPerfStats::CMsgServerSignoutData_ServerPerfStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerSignoutData_ServerPerfStats)
}
CMsgServerSignoutData_ServerPerfStats::CMsgServerSignoutData_ServerPerfStats(const CMsgServerSignoutData_ServerPerfStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerSignoutData_ServerPerfStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.perf_samples_){nullptr}
    , decltype(_impl_.peak_memory_bytes_){}
    , decltype(_impl_.end_memory_bytes_){}
    , decltype(_impl_.frame_time_max_micro_s_){}
    , decltype(_impl_.frame_time_95_micro_s_){}
    , decltype(_impl_.frame_time_avg_micro_s_){}
    , decltype(_impl_.frame_idle_time_95_micro_s_){}
    , decltype(_impl_.frame_idle_time_avg_micro_s_){}
    , decltype(_impl_.frame_time_80_micro_s_){}
    , decltype(_impl_.frame_time_99_micro_s_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_perf_samples()) {
    _this->_impl_.perf_samples_ = new ::CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples(*from._impl_.perf_samples_);
  }
  ::memcpy(&_impl_.peak_memory_bytes_, &from._impl_.peak_memory_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.frame_time_99_micro_s_) -
    reinterpret_cast<char*>(&_impl_.peak_memory_bytes_)) + sizeof(_impl_.frame_time_99_micro_s_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerSignoutData_ServerPerfStats)
}

inline void CMsgServerSignoutData_ServerPerfStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.perf_samples_){nullptr}
    , decltype(_impl_.peak_memory_bytes_){uint64_t{0u}}
    , decltype(_impl_.end_memory_bytes_){uint64_t{0u}}
    , decltype(_impl_.frame_time_max_micro_s_){0u}
    , decltype(_impl_.frame_time_95_micro_s_){0u}
    , decltype(_impl_.frame_time_avg_micro_s_){0u}
    , decltype(_impl_.frame_idle_time_95_micro_s_){0u}
    , decltype(_impl_.frame_idle_time_avg_micro_s_){0u}
    , decltype(_impl_.frame_time_80_micro_s_){0u}
    , decltype(_impl_.frame_time_99_micro_s_){0u}
  };
}

CMsgServerSignoutData_ServerPerfStats::~CMsgServerSignoutData_ServerPerfStats() {
  // @@protoc_insertion_point(destructor:CMsgServerSignoutData_ServerPerfStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerSignoutData_ServerPerfStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.perf_samples_;
}

void CMsgServerSignoutData_ServerPerfStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerSignoutData_ServerPerfStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerSignoutData_ServerPerfStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.perf_samples_ != nullptr);
    _impl_.perf_samples_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.peak_memory_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.frame_idle_time_avg_micro_s_) -
        reinterpret_cast<char*>(&_impl_.peak_memory_bytes_)) + sizeof(_impl_.frame_idle_time_avg_micro_s_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.frame_time_80_micro_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.frame_time_99_micro_s_) -
        reinterpret_cast<char*>(&_impl_.frame_time_80_micro_s_)) + sizeof(_impl_.frame_time_99_micro_s_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerSignoutData_ServerPerfStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 peak_memory_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_peak_memory_bytes(&has_bits);
          _impl_.peak_memory_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 end_memory_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_end_memory_bytes(&has_bits);
          _impl_.end_memory_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 frame_time_max_micro_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_frame_time_max_micro_s(&has_bits);
          _impl_.frame_time_max_micro_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 frame_time_95_micro_s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_frame_time_95_micro_s(&has_bits);
          _impl_.frame_time_95_micro_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 frame_time_avg_micro_s = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_frame_time_avg_micro_s(&has_bits);
          _impl_.frame_time_avg_micro_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 frame_idle_time_95_micro_s = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_frame_idle_time_95_micro_s(&has_bits);
          _impl_.frame_idle_time_95_micro_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 frame_idle_time_avg_micro_s = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_frame_idle_time_avg_micro_s(&has_bits);
          _impl_.frame_idle_time_avg_micro_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 frame_time_80_micro_s = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_frame_time_80_micro_s(&has_bits);
          _impl_.frame_time_80_micro_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 frame_time_99_micro_s = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_frame_time_99_micro_s(&has_bits);
          _impl_.frame_time_99_micro_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgServerSignoutData_ServerPerfStats.MatchPerfSamples perf_samples = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_perf_samples(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerSignoutData_ServerPerfStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerSignoutData_ServerPerfStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 peak_memory_bytes = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_peak_memory_bytes(), target);
  }

  // optional uint64 end_memory_bytes = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_end_memory_bytes(), target);
  }

  // optional uint32 frame_time_max_micro_s = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_frame_time_max_micro_s(), target);
  }

  // optional uint32 frame_time_95_micro_s = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_frame_time_95_micro_s(), target);
  }

  // optional uint32 frame_time_avg_micro_s = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_frame_time_avg_micro_s(), target);
  }

  // optional uint32 frame_idle_time_95_micro_s = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_frame_idle_time_95_micro_s(), target);
  }

  // optional uint32 frame_idle_time_avg_micro_s = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_frame_idle_time_avg_micro_s(), target);
  }

  // optional uint32 frame_time_80_micro_s = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_frame_time_80_micro_s(), target);
  }

  // optional uint32 frame_time_99_micro_s = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_frame_time_99_micro_s(), target);
  }

  // optional .CMsgServerSignoutData_ServerPerfStats.MatchPerfSamples perf_samples = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::perf_samples(this),
        _Internal::perf_samples(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerSignoutData_ServerPerfStats)
  return target;
}

size_t CMsgServerSignoutData_ServerPerfStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerSignoutData_ServerPerfStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgServerSignoutData_ServerPerfStats.MatchPerfSamples perf_samples = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.perf_samples_);
    }

    // optional uint64 peak_memory_bytes = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_peak_memory_bytes());
    }

    // optional uint64 end_memory_bytes = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_end_memory_bytes());
    }

    // optional uint32 frame_time_max_micro_s = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_time_max_micro_s());
    }

    // optional uint32 frame_time_95_micro_s = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_time_95_micro_s());
    }

    // optional uint32 frame_time_avg_micro_s = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_time_avg_micro_s());
    }

    // optional uint32 frame_idle_time_95_micro_s = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_idle_time_95_micro_s());
    }

    // optional uint32 frame_idle_time_avg_micro_s = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_idle_time_avg_micro_s());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 frame_time_80_micro_s = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_time_80_micro_s());
    }

    // optional uint32 frame_time_99_micro_s = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_time_99_micro_s());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerSignoutData_ServerPerfStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerSignoutData_ServerPerfStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerSignoutData_ServerPerfStats::GetClassData() const { return &_class_data_; }


void CMsgServerSignoutData_ServerPerfStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerSignoutData_ServerPerfStats*>(&to_msg);
  auto& from = static_cast<const CMsgServerSignoutData_ServerPerfStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerSignoutData_ServerPerfStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_perf_samples()->::CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples::MergeFrom(
          from._internal_perf_samples());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.peak_memory_bytes_ = from._impl_.peak_memory_bytes_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.end_memory_bytes_ = from._impl_.end_memory_bytes_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.frame_time_max_micro_s_ = from._impl_.frame_time_max_micro_s_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.frame_time_95_micro_s_ = from._impl_.frame_time_95_micro_s_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.frame_time_avg_micro_s_ = from._impl_.frame_time_avg_micro_s_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.frame_idle_time_95_micro_s_ = from._impl_.frame_idle_time_95_micro_s_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.frame_idle_time_avg_micro_s_ = from._impl_.frame_idle_time_avg_micro_s_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.frame_time_80_micro_s_ = from._impl_.frame_time_80_micro_s_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.frame_time_99_micro_s_ = from._impl_.frame_time_99_micro_s_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerSignoutData_ServerPerfStats::CopyFrom(const CMsgServerSignoutData_ServerPerfStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerSignoutData_ServerPerfStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerSignoutData_ServerPerfStats::IsInitialized() const {
  return true;
}

void CMsgServerSignoutData_ServerPerfStats::InternalSwap(CMsgServerSignoutData_ServerPerfStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_ServerPerfStats, _impl_.frame_time_99_micro_s_)
      + sizeof(CMsgServerSignoutData_ServerPerfStats::_impl_.frame_time_99_micro_s_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_ServerPerfStats, _impl_.perf_samples_)>(
          reinterpret_cast<char*>(&_impl_.perf_samples_),
          reinterpret_cast<char*>(&other->_impl_.perf_samples_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerSignoutData_ServerPerfStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[16]);
}

// ===================================================================

class CMsgServerToGCUpdateMatchInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCUpdateMatchInfo>()._impl_._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kills_team_0(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kills_team_1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_net_worth_team_0(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_net_worth_team_1(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_spectators(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_open_spectator_slots(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_objectives_mask_team0(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_objectives_mask_team1(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgServerToGCUpdateMatchInfo::CMsgServerToGCUpdateMatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCUpdateMatchInfo)
}
CMsgServerToGCUpdateMatchInfo::CMsgServerToGCUpdateMatchInfo(const CMsgServerToGCUpdateMatchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCUpdateMatchInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lobby_id_){}
    , decltype(_impl_.kills_team_0_){}
    , decltype(_impl_.kills_team_1_){}
    , decltype(_impl_.net_worth_team_0_){}
    , decltype(_impl_.net_worth_team_1_){}
    , decltype(_impl_.spectators_){}
    , decltype(_impl_.open_spectator_slots_){}
    , decltype(_impl_.objectives_mask_team0_){}
    , decltype(_impl_.objectives_mask_team1_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.lobby_id_, &from._impl_.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.objectives_mask_team1_) -
    reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.objectives_mask_team1_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCUpdateMatchInfo)
}

inline void CMsgServerToGCUpdateMatchInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
    , decltype(_impl_.kills_team_0_){0u}
    , decltype(_impl_.kills_team_1_){0u}
    , decltype(_impl_.net_worth_team_0_){0u}
    , decltype(_impl_.net_worth_team_1_){0u}
    , decltype(_impl_.spectators_){0u}
    , decltype(_impl_.open_spectator_slots_){0u}
    , decltype(_impl_.objectives_mask_team0_){uint64_t{0u}}
    , decltype(_impl_.objectives_mask_team1_){uint64_t{0u}}
  };
}

CMsgServerToGCUpdateMatchInfo::~CMsgServerToGCUpdateMatchInfo() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCUpdateMatchInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCUpdateMatchInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerToGCUpdateMatchInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCUpdateMatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCUpdateMatchInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.objectives_mask_team0_) -
        reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.objectives_mask_team0_));
  }
  _impl_.objectives_mask_team1_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCUpdateMatchInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_lobby_id(&has_bits);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kills_team_0 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_kills_team_0(&has_bits);
          _impl_.kills_team_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kills_team_1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_kills_team_1(&has_bits);
          _impl_.kills_team_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 net_worth_team_0 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_net_worth_team_0(&has_bits);
          _impl_.net_worth_team_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 net_worth_team_1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_net_worth_team_1(&has_bits);
          _impl_.net_worth_team_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 spectators = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_spectators(&has_bits);
          _impl_.spectators_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 open_spectator_slots = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_open_spectator_slots(&has_bits);
          _impl_.open_spectator_slots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 objectives_mask_team0 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_objectives_mask_team0(&has_bits);
          _impl_.objectives_mask_team0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 objectives_mask_team1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_objectives_mask_team1(&has_bits);
          _impl_.objectives_mask_team1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCUpdateMatchInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCUpdateMatchInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_lobby_id(), target);
  }

  // optional uint32 kills_team_0 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_kills_team_0(), target);
  }

  // optional uint32 kills_team_1 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_kills_team_1(), target);
  }

  // optional uint32 net_worth_team_0 = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_net_worth_team_0(), target);
  }

  // optional uint32 net_worth_team_1 = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_net_worth_team_1(), target);
  }

  // optional uint32 spectators = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_spectators(), target);
  }

  // optional uint32 open_spectator_slots = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_open_spectator_slots(), target);
  }

  // optional uint64 objectives_mask_team0 = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_objectives_mask_team0(), target);
  }

  // optional uint64 objectives_mask_team1 = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_objectives_mask_team1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCUpdateMatchInfo)
  return target;
}

size_t CMsgServerToGCUpdateMatchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCUpdateMatchInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 lobby_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lobby_id());
    }

    // optional uint32 kills_team_0 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kills_team_0());
    }

    // optional uint32 kills_team_1 = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kills_team_1());
    }

    // optional uint32 net_worth_team_0 = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_net_worth_team_0());
    }

    // optional uint32 net_worth_team_1 = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_net_worth_team_1());
    }

    // optional uint32 spectators = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_spectators());
    }

    // optional uint32 open_spectator_slots = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_open_spectator_slots());
    }

    // optional uint64 objectives_mask_team0 = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_objectives_mask_team0());
    }

  }
  // optional uint64 objectives_mask_team1 = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_objectives_mask_team1());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCUpdateMatchInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCUpdateMatchInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCUpdateMatchInfo::GetClassData() const { return &_class_data_; }


void CMsgServerToGCUpdateMatchInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCUpdateMatchInfo*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCUpdateMatchInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCUpdateMatchInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kills_team_0_ = from._impl_.kills_team_0_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.kills_team_1_ = from._impl_.kills_team_1_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.net_worth_team_0_ = from._impl_.net_worth_team_0_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.net_worth_team_1_ = from._impl_.net_worth_team_1_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.spectators_ = from._impl_.spectators_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.open_spectator_slots_ = from._impl_.open_spectator_slots_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.objectives_mask_team0_ = from._impl_.objectives_mask_team0_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_objectives_mask_team1(from._internal_objectives_mask_team1());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCUpdateMatchInfo::CopyFrom(const CMsgServerToGCUpdateMatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCUpdateMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCUpdateMatchInfo::IsInitialized() const {
  return true;
}

void CMsgServerToGCUpdateMatchInfo::InternalSwap(CMsgServerToGCUpdateMatchInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCUpdateMatchInfo, _impl_.objectives_mask_team1_)
      + sizeof(CMsgServerToGCUpdateMatchInfo::_impl_.objectives_mask_team1_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCUpdateMatchInfo, _impl_.lobby_id_)>(
          reinterpret_cast<char*>(&_impl_.lobby_id_),
          reinterpret_cast<char*>(&other->_impl_.lobby_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCUpdateMatchInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[17]);
}

// ===================================================================

class CMsgServerToGCMatchSignoutPermission::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchSignoutPermission>()._impl_._has_bits_);
  static void set_has_signout_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_permission_request(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_match_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgServerToGCMatchSignoutPermission::CMsgServerToGCMatchSignoutPermission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchSignoutPermission)
}
CMsgServerToGCMatchSignoutPermission::CMsgServerToGCMatchSignoutPermission(const CMsgServerToGCMatchSignoutPermission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCMatchSignoutPermission* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signout_start_){}
    , decltype(_impl_.permission_request_){}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.match_mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.signout_start_, &from._impl_.signout_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.match_mode_) -
    reinterpret_cast<char*>(&_impl_.signout_start_)) + sizeof(_impl_.match_mode_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchSignoutPermission)
}

inline void CMsgServerToGCMatchSignoutPermission::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signout_start_){0u}
    , decltype(_impl_.permission_request_){0u}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.match_mode_){0}
  };
}

CMsgServerToGCMatchSignoutPermission::~CMsgServerToGCMatchSignoutPermission() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchSignoutPermission)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCMatchSignoutPermission::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerToGCMatchSignoutPermission::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCMatchSignoutPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchSignoutPermission)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.signout_start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.match_mode_) -
        reinterpret_cast<char*>(&_impl_.signout_start_)) + sizeof(_impl_.match_mode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchSignoutPermission::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 signout_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_signout_start(&has_bits);
          _impl_.signout_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 permission_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_permission_request(&has_bits);
          _impl_.permission_request_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelMatchMode match_mode = 4 [default = k_ECitadelMatchMode_Invalid];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelMatchMode_IsValid(val))) {
            _internal_set_match_mode(static_cast<::ECitadelMatchMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCMatchSignoutPermission::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchSignoutPermission)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 signout_start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_signout_start(), target);
  }

  // optional uint32 permission_request = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_permission_request(), target);
  }

  // optional uint64 match_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_match_id(), target);
  }

  // optional .ECitadelMatchMode match_mode = 4 [default = k_ECitadelMatchMode_Invalid];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_match_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchSignoutPermission)
  return target;
}

size_t CMsgServerToGCMatchSignoutPermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchSignoutPermission)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 signout_start = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_signout_start());
    }

    // optional uint32 permission_request = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_permission_request());
    }

    // optional uint64 match_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional .ECitadelMatchMode match_mode = 4 [default = k_ECitadelMatchMode_Invalid];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_match_mode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCMatchSignoutPermission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCMatchSignoutPermission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCMatchSignoutPermission::GetClassData() const { return &_class_data_; }


void CMsgServerToGCMatchSignoutPermission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCMatchSignoutPermission*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCMatchSignoutPermission&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchSignoutPermission)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.signout_start_ = from._impl_.signout_start_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.permission_request_ = from._impl_.permission_request_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.match_mode_ = from._impl_.match_mode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCMatchSignoutPermission::CopyFrom(const CMsgServerToGCMatchSignoutPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchSignoutPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchSignoutPermission::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchSignoutPermission::InternalSwap(CMsgServerToGCMatchSignoutPermission* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchSignoutPermission, _impl_.match_mode_)
      + sizeof(CMsgServerToGCMatchSignoutPermission::_impl_.match_mode_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchSignoutPermission, _impl_.signout_start_)>(
          reinterpret_cast<char*>(&_impl_.signout_start_),
          reinterpret_cast<char*>(&other->_impl_.signout_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchSignoutPermission::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[18]);
}

// ===================================================================

class CMsgServerToGCMatchSignoutPermissionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchSignoutPermissionResponse>()._impl_._has_bits_);
  static void set_has_can_sign_out(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_retry_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgServerToGCMatchSignoutPermissionResponse::CMsgServerToGCMatchSignoutPermissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchSignoutPermissionResponse)
}
CMsgServerToGCMatchSignoutPermissionResponse::CMsgServerToGCMatchSignoutPermissionResponse(const CMsgServerToGCMatchSignoutPermissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCMatchSignoutPermissionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.requested_data_){from._impl_.requested_data_}
    , decltype(_impl_.can_sign_out_){}
    , decltype(_impl_.retry_time_s_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.can_sign_out_, &from._impl_.can_sign_out_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.retry_time_s_) -
    reinterpret_cast<char*>(&_impl_.can_sign_out_)) + sizeof(_impl_.retry_time_s_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchSignoutPermissionResponse)
}

inline void CMsgServerToGCMatchSignoutPermissionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.requested_data_){arena}
    , decltype(_impl_.can_sign_out_){false}
    , decltype(_impl_.retry_time_s_){0u}
  };
}

CMsgServerToGCMatchSignoutPermissionResponse::~CMsgServerToGCMatchSignoutPermissionResponse() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchSignoutPermissionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCMatchSignoutPermissionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.requested_data_.~RepeatedField();
}

void CMsgServerToGCMatchSignoutPermissionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCMatchSignoutPermissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchSignoutPermissionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.requested_data_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.can_sign_out_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.retry_time_s_) -
        reinterpret_cast<char*>(&_impl_.can_sign_out_)) + sizeof(_impl_.retry_time_s_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchSignoutPermissionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool can_sign_out = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_can_sign_out(&has_bits);
          _impl_.can_sign_out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 retry_time_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_retry_time_s(&has_bits);
          _impl_.retry_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .EGCServerSignoutData requested_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::EGCServerSignoutData_IsValid(val))) {
              _internal_add_requested_data(static_cast<::EGCServerSignoutData>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_requested_data(), ptr, ctx, ::EGCServerSignoutData_IsValid, &_internal_metadata_, 3);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCMatchSignoutPermissionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchSignoutPermissionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool can_sign_out = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_can_sign_out(), target);
  }

  // optional uint32 retry_time_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_retry_time_s(), target);
  }

  // repeated .EGCServerSignoutData requested_data = 3;
  for (int i = 0, n = this->_internal_requested_data_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_requested_data(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchSignoutPermissionResponse)
  return target;
}

size_t CMsgServerToGCMatchSignoutPermissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchSignoutPermissionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EGCServerSignoutData requested_data = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_requested_data_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_requested_data(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool can_sign_out = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 retry_time_s = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retry_time_s());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCMatchSignoutPermissionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCMatchSignoutPermissionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCMatchSignoutPermissionResponse::GetClassData() const { return &_class_data_; }


void CMsgServerToGCMatchSignoutPermissionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCMatchSignoutPermissionResponse*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCMatchSignoutPermissionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchSignoutPermissionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.requested_data_.MergeFrom(from._impl_.requested_data_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.can_sign_out_ = from._impl_.can_sign_out_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.retry_time_s_ = from._impl_.retry_time_s_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCMatchSignoutPermissionResponse::CopyFrom(const CMsgServerToGCMatchSignoutPermissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchSignoutPermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchSignoutPermissionResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchSignoutPermissionResponse::InternalSwap(CMsgServerToGCMatchSignoutPermissionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.requested_data_.InternalSwap(&other->_impl_.requested_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchSignoutPermissionResponse, _impl_.retry_time_s_)
      + sizeof(CMsgServerToGCMatchSignoutPermissionResponse::_impl_.retry_time_s_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchSignoutPermissionResponse, _impl_.can_sign_out_)>(
          reinterpret_cast<char*>(&_impl_.can_sign_out_),
          reinterpret_cast<char*>(&other->_impl_.can_sign_out_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchSignoutPermissionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[19]);
}

// ===================================================================

class CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_disconnect_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_connection_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reason_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reconnect_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_match_disconnect_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_match_reconnect_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection::CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerSignoutData_Disconnections.CMsgMatchDisconnection)
}
CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection::CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection(const CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.disconnect_time_){}
    , decltype(_impl_.connection_state_){}
    , decltype(_impl_.reason_code_){}
    , decltype(_impl_.reconnect_delay_){}
    , decltype(_impl_.match_disconnect_time_){}
    , decltype(_impl_.match_reconnect_delay_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.match_reconnect_delay_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.match_reconnect_delay_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerSignoutData_Disconnections.CMsgMatchDisconnection)
}

inline void CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.disconnect_time_){0u}
    , decltype(_impl_.connection_state_){0u}
    , decltype(_impl_.reason_code_){0u}
    , decltype(_impl_.reconnect_delay_){0u}
    , decltype(_impl_.match_disconnect_time_){0u}
    , decltype(_impl_.match_reconnect_delay_){0u}
  };
}

CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection::~CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection() {
  // @@protoc_insertion_point(destructor:CMsgServerSignoutData_Disconnections.CMsgMatchDisconnection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerSignoutData_Disconnections.CMsgMatchDisconnection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.match_reconnect_delay_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.match_reconnect_delay_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 disconnect_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_disconnect_time(&has_bits);
          _impl_.disconnect_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 connection_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_connection_state(&has_bits);
          _impl_.connection_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 reason_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_reason_code(&has_bits);
          _impl_.reason_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 reconnect_delay = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_reconnect_delay(&has_bits);
          _impl_.reconnect_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 match_disconnect_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_match_disconnect_time(&has_bits);
          _impl_.match_disconnect_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 match_reconnect_delay = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_match_reconnect_delay(&has_bits);
          _impl_.match_reconnect_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerSignoutData_Disconnections.CMsgMatchDisconnection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 disconnect_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_disconnect_time(), target);
  }

  // optional uint32 connection_state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_connection_state(), target);
  }

  // optional uint32 reason_code = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_reason_code(), target);
  }

  // optional uint32 reconnect_delay = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_reconnect_delay(), target);
  }

  // optional uint32 match_disconnect_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_match_disconnect_time(), target);
  }

  // optional uint32 match_reconnect_delay = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_match_reconnect_delay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerSignoutData_Disconnections.CMsgMatchDisconnection)
  return target;
}

size_t CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerSignoutData_Disconnections.CMsgMatchDisconnection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 disconnect_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_disconnect_time());
    }

    // optional uint32 connection_state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_connection_state());
    }

    // optional uint32 reason_code = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reason_code());
    }

    // optional uint32 reconnect_delay = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reconnect_delay());
    }

    // optional uint32 match_disconnect_time = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_match_disconnect_time());
    }

    // optional uint32 match_reconnect_delay = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_match_reconnect_delay());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection::GetClassData() const { return &_class_data_; }


void CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection*>(&to_msg);
  auto& from = static_cast<const CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerSignoutData_Disconnections.CMsgMatchDisconnection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.disconnect_time_ = from._impl_.disconnect_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.connection_state_ = from._impl_.connection_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.reason_code_ = from._impl_.reason_code_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.reconnect_delay_ = from._impl_.reconnect_delay_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.match_disconnect_time_ = from._impl_.match_disconnect_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.match_reconnect_delay_ = from._impl_.match_reconnect_delay_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection::CopyFrom(const CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerSignoutData_Disconnections.CMsgMatchDisconnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection::IsInitialized() const {
  return true;
}

void CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection::InternalSwap(CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection, _impl_.match_reconnect_delay_)
      + sizeof(CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection::_impl_.match_reconnect_delay_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[20]);
}

// ===================================================================

class CMsgServerSignoutData_Disconnections::_Internal {
 public:
};

CMsgServerSignoutData_Disconnections::CMsgServerSignoutData_Disconnections(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerSignoutData_Disconnections)
}
CMsgServerSignoutData_Disconnections::CMsgServerSignoutData_Disconnections(const CMsgServerSignoutData_Disconnections& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerSignoutData_Disconnections* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.disconnections_){from._impl_.disconnections_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgServerSignoutData_Disconnections)
}

inline void CMsgServerSignoutData_Disconnections::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.disconnections_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgServerSignoutData_Disconnections::~CMsgServerSignoutData_Disconnections() {
  // @@protoc_insertion_point(destructor:CMsgServerSignoutData_Disconnections)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerSignoutData_Disconnections::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.disconnections_.~RepeatedPtrField();
}

void CMsgServerSignoutData_Disconnections::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerSignoutData_Disconnections::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerSignoutData_Disconnections)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.disconnections_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerSignoutData_Disconnections::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgServerSignoutData_Disconnections.CMsgMatchDisconnection disconnections = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_disconnections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerSignoutData_Disconnections::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerSignoutData_Disconnections)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgServerSignoutData_Disconnections.CMsgMatchDisconnection disconnections = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_disconnections_size()); i < n; i++) {
    const auto& repfield = this->_internal_disconnections(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerSignoutData_Disconnections)
  return target;
}

size_t CMsgServerSignoutData_Disconnections::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerSignoutData_Disconnections)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerSignoutData_Disconnections.CMsgMatchDisconnection disconnections = 1;
  total_size += 1UL * this->_internal_disconnections_size();
  for (const auto& msg : this->_impl_.disconnections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerSignoutData_Disconnections::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerSignoutData_Disconnections::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerSignoutData_Disconnections::GetClassData() const { return &_class_data_; }


void CMsgServerSignoutData_Disconnections::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerSignoutData_Disconnections*>(&to_msg);
  auto& from = static_cast<const CMsgServerSignoutData_Disconnections&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerSignoutData_Disconnections)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.disconnections_.MergeFrom(from._impl_.disconnections_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerSignoutData_Disconnections::CopyFrom(const CMsgServerSignoutData_Disconnections& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerSignoutData_Disconnections)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerSignoutData_Disconnections::IsInitialized() const {
  return true;
}

void CMsgServerSignoutData_Disconnections::InternalSwap(CMsgServerSignoutData_Disconnections* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.disconnections_.InternalSwap(&other->_impl_.disconnections_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerSignoutData_Disconnections::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[21]);
}

// ===================================================================

class CMsgServerSignoutData_DetailedStats_Position::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerSignoutData_DetailedStats_Position>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgServerSignoutData_DetailedStats_Position::CMsgServerSignoutData_DetailedStats_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerSignoutData_DetailedStats.Position)
}
CMsgServerSignoutData_DetailedStats_Position::CMsgServerSignoutData_DetailedStats_Position(const CMsgServerSignoutData_DetailedStats_Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerSignoutData_DetailedStats_Position* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerSignoutData_DetailedStats.Position)
}

inline void CMsgServerSignoutData_DetailedStats_Position::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
  };
}

CMsgServerSignoutData_DetailedStats_Position::~CMsgServerSignoutData_DetailedStats_Position() {
  // @@protoc_insertion_point(destructor:CMsgServerSignoutData_DetailedStats.Position)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerSignoutData_DetailedStats_Position::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerSignoutData_DetailedStats_Position::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerSignoutData_DetailedStats_Position::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerSignoutData_DetailedStats.Position)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.z_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerSignoutData_DetailedStats_Position::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerSignoutData_DetailedStats_Position::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerSignoutData_DetailedStats.Position)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerSignoutData_DetailedStats.Position)
  return target;
}

size_t CMsgServerSignoutData_DetailedStats_Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerSignoutData_DetailedStats.Position)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerSignoutData_DetailedStats_Position::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerSignoutData_DetailedStats_Position::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerSignoutData_DetailedStats_Position::GetClassData() const { return &_class_data_; }


void CMsgServerSignoutData_DetailedStats_Position::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerSignoutData_DetailedStats_Position*>(&to_msg);
  auto& from = static_cast<const CMsgServerSignoutData_DetailedStats_Position&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerSignoutData_DetailedStats.Position)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerSignoutData_DetailedStats_Position::CopyFrom(const CMsgServerSignoutData_DetailedStats_Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerSignoutData_DetailedStats.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerSignoutData_DetailedStats_Position::IsInitialized() const {
  return true;
}

void CMsgServerSignoutData_DetailedStats_Position::InternalSwap(CMsgServerSignoutData_DetailedStats_Position* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_DetailedStats_Position, _impl_.z_)
      + sizeof(CMsgServerSignoutData_DetailedStats_Position::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_DetailedStats_Position, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerSignoutData_DetailedStats_Position::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[22]);
}

// ===================================================================

class CMsgServerSignoutData_DetailedStats_TimeSample_Stats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerSignoutData_DetailedStats_TimeSample_Stats>()._impl_._has_bits_);
  static void set_has_net_worth(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_possible_creeps(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_creep_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_neutral_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_creep_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_neutral_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_boss_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_player_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_denies(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_player_healing(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_ability_points(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_self_healing(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_player_damage_taken(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_max_health(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_weapon_power(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tech_power(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_shots_hit(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_shots_missed(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_damage_absorbed(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_absorption_provided(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_heal_prevented(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_heal_lost(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
};

CMsgServerSignoutData_DetailedStats_TimeSample_Stats::CMsgServerSignoutData_DetailedStats_TimeSample_Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerSignoutData_DetailedStats.TimeSample.Stats)
}
CMsgServerSignoutData_DetailedStats_TimeSample_Stats::CMsgServerSignoutData_DetailedStats_TimeSample_Stats(const CMsgServerSignoutData_DetailedStats_TimeSample_Stats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerSignoutData_DetailedStats_TimeSample_Stats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.net_worth_){}
    , decltype(_impl_.kills_){}
    , decltype(_impl_.deaths_){}
    , decltype(_impl_.assists_){}
    , decltype(_impl_.possible_creeps_){}
    , decltype(_impl_.creep_kills_){}
    , decltype(_impl_.neutral_kills_){}
    , decltype(_impl_.creep_damage_){}
    , decltype(_impl_.neutral_damage_){}
    , decltype(_impl_.boss_damage_){}
    , decltype(_impl_.player_damage_){}
    , decltype(_impl_.denies_){}
    , decltype(_impl_.player_healing_){}
    , decltype(_impl_.ability_points_){}
    , decltype(_impl_.self_healing_){}
    , decltype(_impl_.player_damage_taken_){}
    , decltype(_impl_.max_health_){}
    , decltype(_impl_.weapon_power_){}
    , decltype(_impl_.tech_power_){}
    , decltype(_impl_.shots_hit_){}
    , decltype(_impl_.shots_missed_){}
    , decltype(_impl_.damage_absorbed_){}
    , decltype(_impl_.absorption_provided_){}
    , decltype(_impl_.heal_prevented_){}
    , decltype(_impl_.heal_lost_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.net_worth_, &from._impl_.net_worth_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.heal_lost_) -
    reinterpret_cast<char*>(&_impl_.net_worth_)) + sizeof(_impl_.heal_lost_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerSignoutData_DetailedStats.TimeSample.Stats)
}

inline void CMsgServerSignoutData_DetailedStats_TimeSample_Stats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.net_worth_){0u}
    , decltype(_impl_.kills_){0u}
    , decltype(_impl_.deaths_){0u}
    , decltype(_impl_.assists_){0u}
    , decltype(_impl_.possible_creeps_){0u}
    , decltype(_impl_.creep_kills_){0u}
    , decltype(_impl_.neutral_kills_){0u}
    , decltype(_impl_.creep_damage_){0u}
    , decltype(_impl_.neutral_damage_){0u}
    , decltype(_impl_.boss_damage_){0u}
    , decltype(_impl_.player_damage_){0u}
    , decltype(_impl_.denies_){0u}
    , decltype(_impl_.player_healing_){0u}
    , decltype(_impl_.ability_points_){0u}
    , decltype(_impl_.self_healing_){0u}
    , decltype(_impl_.player_damage_taken_){0u}
    , decltype(_impl_.max_health_){0u}
    , decltype(_impl_.weapon_power_){0u}
    , decltype(_impl_.tech_power_){0u}
    , decltype(_impl_.shots_hit_){0u}
    , decltype(_impl_.shots_missed_){0u}
    , decltype(_impl_.damage_absorbed_){0u}
    , decltype(_impl_.absorption_provided_){0u}
    , decltype(_impl_.heal_prevented_){0u}
    , decltype(_impl_.heal_lost_){0u}
  };
}

CMsgServerSignoutData_DetailedStats_TimeSample_Stats::~CMsgServerSignoutData_DetailedStats_TimeSample_Stats() {
  // @@protoc_insertion_point(destructor:CMsgServerSignoutData_DetailedStats.TimeSample.Stats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerSignoutData_DetailedStats_TimeSample_Stats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerSignoutData_DetailedStats_TimeSample_Stats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerSignoutData_DetailedStats_TimeSample_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerSignoutData_DetailedStats.TimeSample.Stats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.net_worth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.creep_damage_) -
        reinterpret_cast<char*>(&_impl_.net_worth_)) + sizeof(_impl_.creep_damage_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.neutral_damage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.player_damage_taken_) -
        reinterpret_cast<char*>(&_impl_.neutral_damage_)) + sizeof(_impl_.player_damage_taken_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.max_health_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.heal_prevented_) -
        reinterpret_cast<char*>(&_impl_.max_health_)) + sizeof(_impl_.heal_prevented_));
  }
  _impl_.heal_lost_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerSignoutData_DetailedStats_TimeSample_Stats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 net_worth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_net_worth(&has_bits);
          _impl_.net_worth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kills = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kills(&has_bits);
          _impl_.kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deaths = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_deaths(&has_bits);
          _impl_.deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 assists = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_assists(&has_bits);
          _impl_.assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 possible_creeps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_possible_creeps(&has_bits);
          _impl_.possible_creeps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 creep_kills = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_creep_kills(&has_bits);
          _impl_.creep_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 neutral_kills = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_neutral_kills(&has_bits);
          _impl_.neutral_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 creep_damage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_creep_damage(&has_bits);
          _impl_.creep_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 neutral_damage = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_neutral_damage(&has_bits);
          _impl_.neutral_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 boss_damage = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_boss_damage(&has_bits);
          _impl_.boss_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_damage = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_player_damage(&has_bits);
          _impl_.player_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 denies = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_denies(&has_bits);
          _impl_.denies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_healing = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_player_healing(&has_bits);
          _impl_.player_healing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_points = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_ability_points(&has_bits);
          _impl_.ability_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 self_healing = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_self_healing(&has_bits);
          _impl_.self_healing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_damage_taken = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_player_damage_taken(&has_bits);
          _impl_.player_damage_taken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_health = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_max_health(&has_bits);
          _impl_.max_health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 weapon_power = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_weapon_power(&has_bits);
          _impl_.weapon_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tech_power = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_tech_power(&has_bits);
          _impl_.tech_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 shots_hit = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_shots_hit(&has_bits);
          _impl_.shots_hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 shots_missed = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_shots_missed(&has_bits);
          _impl_.shots_missed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 damage_absorbed = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_damage_absorbed(&has_bits);
          _impl_.damage_absorbed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 absorption_provided = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_absorption_provided(&has_bits);
          _impl_.absorption_provided_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 heal_prevented = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_heal_prevented(&has_bits);
          _impl_.heal_prevented_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 heal_lost = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_heal_lost(&has_bits);
          _impl_.heal_lost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerSignoutData_DetailedStats_TimeSample_Stats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerSignoutData_DetailedStats.TimeSample.Stats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 net_worth = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_net_worth(), target);
  }

  // optional uint32 kills = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_assists(), target);
  }

  // optional uint32 possible_creeps = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_possible_creeps(), target);
  }

  // optional uint32 creep_kills = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_creep_kills(), target);
  }

  // optional uint32 neutral_kills = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_neutral_kills(), target);
  }

  // optional uint32 creep_damage = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_creep_damage(), target);
  }

  // optional uint32 neutral_damage = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_neutral_damage(), target);
  }

  // optional uint32 boss_damage = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_boss_damage(), target);
  }

  // optional uint32 player_damage = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_player_damage(), target);
  }

  // optional uint32 denies = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_denies(), target);
  }

  // optional uint32 player_healing = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_player_healing(), target);
  }

  // optional uint32 ability_points = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_ability_points(), target);
  }

  // optional uint32 self_healing = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_self_healing(), target);
  }

  // optional uint32 player_damage_taken = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_player_damage_taken(), target);
  }

  // optional uint32 max_health = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_max_health(), target);
  }

  // optional uint32 weapon_power = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_weapon_power(), target);
  }

  // optional uint32 tech_power = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_tech_power(), target);
  }

  // optional uint32 shots_hit = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_shots_hit(), target);
  }

  // optional uint32 shots_missed = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_shots_missed(), target);
  }

  // optional uint32 damage_absorbed = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_damage_absorbed(), target);
  }

  // optional uint32 absorption_provided = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_absorption_provided(), target);
  }

  // optional uint32 heal_prevented = 26;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_heal_prevented(), target);
  }

  // optional uint32 heal_lost = 27;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_heal_lost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerSignoutData_DetailedStats.TimeSample.Stats)
  return target;
}

size_t CMsgServerSignoutData_DetailedStats_TimeSample_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerSignoutData_DetailedStats.TimeSample.Stats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 net_worth = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_net_worth());
    }

    // optional uint32 kills = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kills());
    }

    // optional uint32 deaths = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deaths());
    }

    // optional uint32 assists = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_assists());
    }

    // optional uint32 possible_creeps = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_possible_creeps());
    }

    // optional uint32 creep_kills = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_creep_kills());
    }

    // optional uint32 neutral_kills = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_neutral_kills());
    }

    // optional uint32 creep_damage = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_creep_damage());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 neutral_damage = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_neutral_damage());
    }

    // optional uint32 boss_damage = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_boss_damage());
    }

    // optional uint32 player_damage = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_damage());
    }

    // optional uint32 denies = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_denies());
    }

    // optional uint32 player_healing = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_healing());
    }

    // optional uint32 ability_points = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ability_points());
    }

    // optional uint32 self_healing = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_self_healing());
    }

    // optional uint32 player_damage_taken = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_player_damage_taken());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 max_health = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_max_health());
    }

    // optional uint32 weapon_power = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_weapon_power());
    }

    // optional uint32 tech_power = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_tech_power());
    }

    // optional uint32 shots_hit = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_shots_hit());
    }

    // optional uint32 shots_missed = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_shots_missed());
    }

    // optional uint32 damage_absorbed = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_damage_absorbed());
    }

    // optional uint32 absorption_provided = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_absorption_provided());
    }

    // optional uint32 heal_prevented = 26;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_heal_prevented());
    }

  }
  // optional uint32 heal_lost = 27;
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_heal_lost());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerSignoutData_DetailedStats_TimeSample_Stats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerSignoutData_DetailedStats_TimeSample_Stats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerSignoutData_DetailedStats_TimeSample_Stats::GetClassData() const { return &_class_data_; }


void CMsgServerSignoutData_DetailedStats_TimeSample_Stats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerSignoutData_DetailedStats_TimeSample_Stats*>(&to_msg);
  auto& from = static_cast<const CMsgServerSignoutData_DetailedStats_TimeSample_Stats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerSignoutData_DetailedStats.TimeSample.Stats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.net_worth_ = from._impl_.net_worth_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.kills_ = from._impl_.kills_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.deaths_ = from._impl_.deaths_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.assists_ = from._impl_.assists_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.possible_creeps_ = from._impl_.possible_creeps_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.creep_kills_ = from._impl_.creep_kills_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.neutral_kills_ = from._impl_.neutral_kills_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.creep_damage_ = from._impl_.creep_damage_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.neutral_damage_ = from._impl_.neutral_damage_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.boss_damage_ = from._impl_.boss_damage_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.player_damage_ = from._impl_.player_damage_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.denies_ = from._impl_.denies_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.player_healing_ = from._impl_.player_healing_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.ability_points_ = from._impl_.ability_points_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.self_healing_ = from._impl_.self_healing_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.player_damage_taken_ = from._impl_.player_damage_taken_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.max_health_ = from._impl_.max_health_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.weapon_power_ = from._impl_.weapon_power_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.tech_power_ = from._impl_.tech_power_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.shots_hit_ = from._impl_.shots_hit_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.shots_missed_ = from._impl_.shots_missed_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.damage_absorbed_ = from._impl_.damage_absorbed_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.absorption_provided_ = from._impl_.absorption_provided_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.heal_prevented_ = from._impl_.heal_prevented_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _this->_internal_set_heal_lost(from._internal_heal_lost());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerSignoutData_DetailedStats_TimeSample_Stats::CopyFrom(const CMsgServerSignoutData_DetailedStats_TimeSample_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerSignoutData_DetailedStats.TimeSample.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerSignoutData_DetailedStats_TimeSample_Stats::IsInitialized() const {
  return true;
}

void CMsgServerSignoutData_DetailedStats_TimeSample_Stats::InternalSwap(CMsgServerSignoutData_DetailedStats_TimeSample_Stats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_.heal_lost_)
      + sizeof(CMsgServerSignoutData_DetailedStats_TimeSample_Stats::_impl_.heal_lost_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_DetailedStats_TimeSample_Stats, _impl_.net_worth_)>(
          reinterpret_cast<char*>(&_impl_.net_worth_),
          reinterpret_cast<char*>(&other->_impl_.net_worth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerSignoutData_DetailedStats_TimeSample_Stats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[23]);
}

// ===================================================================

class CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats>()._impl_._has_bits_);
  static void set_has_player(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_orb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lane_creep_orb(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_neutral_creep_orb(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_boss(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_boss_orb(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_treasure(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_denied(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_death_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_lane_creep(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_neutral_creep(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_team_bonus(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats::CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerSignoutData_DetailedStats.TimeSample.GoldStats)
}
CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats::CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats(const CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_){}
    , decltype(_impl_.player_orb_){}
    , decltype(_impl_.lane_creep_orb_){}
    , decltype(_impl_.neutral_creep_orb_){}
    , decltype(_impl_.boss_){}
    , decltype(_impl_.boss_orb_){}
    , decltype(_impl_.treasure_){}
    , decltype(_impl_.denied_){}
    , decltype(_impl_.death_loss_){}
    , decltype(_impl_.lane_creep_){}
    , decltype(_impl_.neutral_creep_){}
    , decltype(_impl_.team_bonus_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_, &from._impl_.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_bonus_) -
    reinterpret_cast<char*>(&_impl_.player_)) + sizeof(_impl_.team_bonus_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerSignoutData_DetailedStats.TimeSample.GoldStats)
}

inline void CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_){0u}
    , decltype(_impl_.player_orb_){0u}
    , decltype(_impl_.lane_creep_orb_){0u}
    , decltype(_impl_.neutral_creep_orb_){0u}
    , decltype(_impl_.boss_){0u}
    , decltype(_impl_.boss_orb_){0u}
    , decltype(_impl_.treasure_){0u}
    , decltype(_impl_.denied_){0u}
    , decltype(_impl_.death_loss_){0u}
    , decltype(_impl_.lane_creep_){0u}
    , decltype(_impl_.neutral_creep_){0u}
    , decltype(_impl_.team_bonus_){0u}
  };
}

CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats::~CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats() {
  // @@protoc_insertion_point(destructor:CMsgServerSignoutData_DetailedStats.TimeSample.GoldStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerSignoutData_DetailedStats.TimeSample.GoldStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.player_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.denied_) -
        reinterpret_cast<char*>(&_impl_.player_)) + sizeof(_impl_.denied_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.death_loss_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.team_bonus_) -
        reinterpret_cast<char*>(&_impl_.death_loss_)) + sizeof(_impl_.team_bonus_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player(&has_bits);
          _impl_.player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_orb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_player_orb(&has_bits);
          _impl_.player_orb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lane_creep_orb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_lane_creep_orb(&has_bits);
          _impl_.lane_creep_orb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 neutral_creep_orb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_neutral_creep_orb(&has_bits);
          _impl_.neutral_creep_orb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 boss = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_boss(&has_bits);
          _impl_.boss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 boss_orb = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_boss_orb(&has_bits);
          _impl_.boss_orb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 treasure = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_treasure(&has_bits);
          _impl_.treasure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 denied = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_denied(&has_bits);
          _impl_.denied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 death_loss = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_death_loss(&has_bits);
          _impl_.death_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lane_creep = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_lane_creep(&has_bits);
          _impl_.lane_creep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 neutral_creep = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_neutral_creep(&has_bits);
          _impl_.neutral_creep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_bonus = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_team_bonus(&has_bits);
          _impl_.team_bonus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerSignoutData_DetailedStats.TimeSample.GoldStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 player = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player(), target);
  }

  // optional uint32 player_orb = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_orb(), target);
  }

  // optional uint32 lane_creep_orb = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_lane_creep_orb(), target);
  }

  // optional uint32 neutral_creep_orb = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_neutral_creep_orb(), target);
  }

  // optional uint32 boss = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_boss(), target);
  }

  // optional uint32 boss_orb = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_boss_orb(), target);
  }

  // optional uint32 treasure = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_treasure(), target);
  }

  // optional uint32 denied = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_denied(), target);
  }

  // optional uint32 death_loss = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_death_loss(), target);
  }

  // optional uint32 lane_creep = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_lane_creep(), target);
  }

  // optional uint32 neutral_creep = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_neutral_creep(), target);
  }

  // optional uint32 team_bonus = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_team_bonus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerSignoutData_DetailedStats.TimeSample.GoldStats)
  return target;
}

size_t CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerSignoutData_DetailedStats.TimeSample.GoldStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 player = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player());
    }

    // optional uint32 player_orb = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_orb());
    }

    // optional uint32 lane_creep_orb = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lane_creep_orb());
    }

    // optional uint32 neutral_creep_orb = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_neutral_creep_orb());
    }

    // optional uint32 boss = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_boss());
    }

    // optional uint32 boss_orb = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_boss_orb());
    }

    // optional uint32 treasure = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_treasure());
    }

    // optional uint32 denied = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_denied());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 death_loss = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_death_loss());
    }

    // optional uint32 lane_creep = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lane_creep());
    }

    // optional uint32 neutral_creep = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_neutral_creep());
    }

    // optional uint32 team_bonus = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_bonus());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats::GetClassData() const { return &_class_data_; }


void CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats*>(&to_msg);
  auto& from = static_cast<const CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerSignoutData_DetailedStats.TimeSample.GoldStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.player_ = from._impl_.player_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_orb_ = from._impl_.player_orb_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.lane_creep_orb_ = from._impl_.lane_creep_orb_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.neutral_creep_orb_ = from._impl_.neutral_creep_orb_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.boss_ = from._impl_.boss_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.boss_orb_ = from._impl_.boss_orb_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.treasure_ = from._impl_.treasure_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.denied_ = from._impl_.denied_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.death_loss_ = from._impl_.death_loss_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.lane_creep_ = from._impl_.lane_creep_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.neutral_creep_ = from._impl_.neutral_creep_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.team_bonus_ = from._impl_.team_bonus_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats::CopyFrom(const CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerSignoutData_DetailedStats.TimeSample.GoldStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats::IsInitialized() const {
  return true;
}

void CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats::InternalSwap(CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats, _impl_.team_bonus_)
      + sizeof(CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats::_impl_.team_bonus_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[24]);
}

// ===================================================================

class CMsgServerSignoutData_DetailedStats_TimeSample::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerSignoutData_DetailedStats_TimeSample>()._impl_._has_bits_);
  static void set_has_match_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgServerSignoutData_DetailedStats_TimeSample_Stats& stats(const CMsgServerSignoutData_DetailedStats_TimeSample* msg);
  static void set_has_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats& gold_stats(const CMsgServerSignoutData_DetailedStats_TimeSample* msg);
  static void set_has_gold_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgServerSignoutData_DetailedStats_TimeSample_Stats&
CMsgServerSignoutData_DetailedStats_TimeSample::_Internal::stats(const CMsgServerSignoutData_DetailedStats_TimeSample* msg) {
  return *msg->_impl_.stats_;
}
const ::CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats&
CMsgServerSignoutData_DetailedStats_TimeSample::_Internal::gold_stats(const CMsgServerSignoutData_DetailedStats_TimeSample* msg) {
  return *msg->_impl_.gold_stats_;
}
CMsgServerSignoutData_DetailedStats_TimeSample::CMsgServerSignoutData_DetailedStats_TimeSample(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerSignoutData_DetailedStats.TimeSample)
}
CMsgServerSignoutData_DetailedStats_TimeSample::CMsgServerSignoutData_DetailedStats_TimeSample(const CMsgServerSignoutData_DetailedStats_TimeSample& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerSignoutData_DetailedStats_TimeSample* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_){nullptr}
    , decltype(_impl_.gold_stats_){nullptr}
    , decltype(_impl_.match_time_s_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stats()) {
    _this->_impl_.stats_ = new ::CMsgServerSignoutData_DetailedStats_TimeSample_Stats(*from._impl_.stats_);
  }
  if (from._internal_has_gold_stats()) {
    _this->_impl_.gold_stats_ = new ::CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats(*from._impl_.gold_stats_);
  }
  _this->_impl_.match_time_s_ = from._impl_.match_time_s_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerSignoutData_DetailedStats.TimeSample)
}

inline void CMsgServerSignoutData_DetailedStats_TimeSample::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_){nullptr}
    , decltype(_impl_.gold_stats_){nullptr}
    , decltype(_impl_.match_time_s_){0u}
  };
}

CMsgServerSignoutData_DetailedStats_TimeSample::~CMsgServerSignoutData_DetailedStats_TimeSample() {
  // @@protoc_insertion_point(destructor:CMsgServerSignoutData_DetailedStats.TimeSample)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerSignoutData_DetailedStats_TimeSample::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stats_;
  if (this != internal_default_instance()) delete _impl_.gold_stats_;
}

void CMsgServerSignoutData_DetailedStats_TimeSample::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerSignoutData_DetailedStats_TimeSample::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerSignoutData_DetailedStats.TimeSample)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.stats_ != nullptr);
      _impl_.stats_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.gold_stats_ != nullptr);
      _impl_.gold_stats_->Clear();
    }
  }
  _impl_.match_time_s_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerSignoutData_DetailedStats_TimeSample::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 match_time_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_time_s(&has_bits);
          _impl_.match_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgServerSignoutData_DetailedStats.TimeSample.Stats stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgServerSignoutData_DetailedStats.TimeSample.GoldStats gold_stats = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gold_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerSignoutData_DetailedStats_TimeSample::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerSignoutData_DetailedStats.TimeSample)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 match_time_s = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_match_time_s(), target);
  }

  // optional .CMsgServerSignoutData_DetailedStats.TimeSample.Stats stats = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::stats(this),
        _Internal::stats(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgServerSignoutData_DetailedStats.TimeSample.GoldStats gold_stats = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::gold_stats(this),
        _Internal::gold_stats(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerSignoutData_DetailedStats.TimeSample)
  return target;
}

size_t CMsgServerSignoutData_DetailedStats_TimeSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerSignoutData_DetailedStats.TimeSample)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgServerSignoutData_DetailedStats.TimeSample.Stats stats = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stats_);
    }

    // optional .CMsgServerSignoutData_DetailedStats.TimeSample.GoldStats gold_stats = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gold_stats_);
    }

    // optional uint32 match_time_s = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_match_time_s());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerSignoutData_DetailedStats_TimeSample::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerSignoutData_DetailedStats_TimeSample::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerSignoutData_DetailedStats_TimeSample::GetClassData() const { return &_class_data_; }


void CMsgServerSignoutData_DetailedStats_TimeSample::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerSignoutData_DetailedStats_TimeSample*>(&to_msg);
  auto& from = static_cast<const CMsgServerSignoutData_DetailedStats_TimeSample&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerSignoutData_DetailedStats.TimeSample)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_stats()->::CMsgServerSignoutData_DetailedStats_TimeSample_Stats::MergeFrom(
          from._internal_stats());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_gold_stats()->::CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats::MergeFrom(
          from._internal_gold_stats());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.match_time_s_ = from._impl_.match_time_s_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerSignoutData_DetailedStats_TimeSample::CopyFrom(const CMsgServerSignoutData_DetailedStats_TimeSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerSignoutData_DetailedStats.TimeSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerSignoutData_DetailedStats_TimeSample::IsInitialized() const {
  return true;
}

void CMsgServerSignoutData_DetailedStats_TimeSample::InternalSwap(CMsgServerSignoutData_DetailedStats_TimeSample* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_DetailedStats_TimeSample, _impl_.match_time_s_)
      + sizeof(CMsgServerSignoutData_DetailedStats_TimeSample::_impl_.match_time_s_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_DetailedStats_TimeSample, _impl_.stats_)>(
          reinterpret_cast<char*>(&_impl_.stats_),
          reinterpret_cast<char*>(&other->_impl_.stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerSignoutData_DetailedStats_TimeSample::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[25]);
}

// ===================================================================

class CMsgServerSignoutData_DetailedStats_Objective::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerSignoutData_DetailedStats_Objective>()._impl_._has_bits_);
  static void set_has_destroyed_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_creep_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_creep_damage_mitigated(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_player_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_player_damage_mitigated(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_first_damage_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_team_objective_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgServerSignoutData_DetailedStats_Objective::CMsgServerSignoutData_DetailedStats_Objective(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerSignoutData_DetailedStats.Objective)
}
CMsgServerSignoutData_DetailedStats_Objective::CMsgServerSignoutData_DetailedStats_Objective(const CMsgServerSignoutData_DetailedStats_Objective& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerSignoutData_DetailedStats_Objective* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destroyed_time_s_){}
    , decltype(_impl_.creep_damage_){}
    , decltype(_impl_.creep_damage_mitigated_){}
    , decltype(_impl_.player_damage_){}
    , decltype(_impl_.player_damage_mitigated_){}
    , decltype(_impl_.first_damage_time_s_){}
    , decltype(_impl_.team_objective_id_){}
    , decltype(_impl_.team_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.destroyed_time_s_, &from._impl_.destroyed_time_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_) -
    reinterpret_cast<char*>(&_impl_.destroyed_time_s_)) + sizeof(_impl_.team_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerSignoutData_DetailedStats.Objective)
}

inline void CMsgServerSignoutData_DetailedStats_Objective::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.destroyed_time_s_){0u}
    , decltype(_impl_.creep_damage_){0u}
    , decltype(_impl_.creep_damage_mitigated_){0u}
    , decltype(_impl_.player_damage_){0u}
    , decltype(_impl_.player_damage_mitigated_){0u}
    , decltype(_impl_.first_damage_time_s_){0u}
    , decltype(_impl_.team_objective_id_){0}
    , decltype(_impl_.team_){0}
  };
}

CMsgServerSignoutData_DetailedStats_Objective::~CMsgServerSignoutData_DetailedStats_Objective() {
  // @@protoc_insertion_point(destructor:CMsgServerSignoutData_DetailedStats.Objective)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerSignoutData_DetailedStats_Objective::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerSignoutData_DetailedStats_Objective::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerSignoutData_DetailedStats_Objective::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerSignoutData_DetailedStats.Objective)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.destroyed_time_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.team_) -
        reinterpret_cast<char*>(&_impl_.destroyed_time_s_)) + sizeof(_impl_.team_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerSignoutData_DetailedStats_Objective::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 destroyed_time_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_destroyed_time_s(&has_bits);
          _impl_.destroyed_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 creep_damage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_creep_damage(&has_bits);
          _impl_.creep_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 creep_damage_mitigated = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_creep_damage_mitigated(&has_bits);
          _impl_.creep_damage_mitigated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_damage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_player_damage(&has_bits);
          _impl_.player_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_damage_mitigated = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_player_damage_mitigated(&has_bits);
          _impl_.player_damage_mitigated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 first_damage_time_s = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_first_damage_time_s(&has_bits);
          _impl_.first_damage_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelTeamObjective team_objective_id = 9 [default = k_eCitadelTeamObjective_Core];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelTeamObjective_IsValid(val))) {
            _internal_set_team_objective_id(static_cast<::ECitadelTeamObjective>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelLobbyTeam team = 10 [default = k_ECitadelLobbyTeam_Team0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelLobbyTeam_IsValid(val))) {
            _internal_set_team(static_cast<::ECitadelLobbyTeam>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerSignoutData_DetailedStats_Objective::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerSignoutData_DetailedStats.Objective)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 destroyed_time_s = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_destroyed_time_s(), target);
  }

  // optional uint32 creep_damage = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_creep_damage(), target);
  }

  // optional uint32 creep_damage_mitigated = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_creep_damage_mitigated(), target);
  }

  // optional uint32 player_damage = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_player_damage(), target);
  }

  // optional uint32 player_damage_mitigated = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_player_damage_mitigated(), target);
  }

  // optional uint32 first_damage_time_s = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_first_damage_time_s(), target);
  }

  // optional .ECitadelTeamObjective team_objective_id = 9 [default = k_eCitadelTeamObjective_Core];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_team_objective_id(), target);
  }

  // optional .ECitadelLobbyTeam team = 10 [default = k_ECitadelLobbyTeam_Team0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerSignoutData_DetailedStats.Objective)
  return target;
}

size_t CMsgServerSignoutData_DetailedStats_Objective::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerSignoutData_DetailedStats.Objective)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 destroyed_time_s = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_destroyed_time_s());
    }

    // optional uint32 creep_damage = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_creep_damage());
    }

    // optional uint32 creep_damage_mitigated = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_creep_damage_mitigated());
    }

    // optional uint32 player_damage = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_damage());
    }

    // optional uint32 player_damage_mitigated = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_damage_mitigated());
    }

    // optional uint32 first_damage_time_s = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_first_damage_time_s());
    }

    // optional .ECitadelTeamObjective team_objective_id = 9 [default = k_eCitadelTeamObjective_Core];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_team_objective_id());
    }

    // optional .ECitadelLobbyTeam team = 10 [default = k_ECitadelLobbyTeam_Team0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_team());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerSignoutData_DetailedStats_Objective::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerSignoutData_DetailedStats_Objective::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerSignoutData_DetailedStats_Objective::GetClassData() const { return &_class_data_; }


void CMsgServerSignoutData_DetailedStats_Objective::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerSignoutData_DetailedStats_Objective*>(&to_msg);
  auto& from = static_cast<const CMsgServerSignoutData_DetailedStats_Objective&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerSignoutData_DetailedStats.Objective)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.destroyed_time_s_ = from._impl_.destroyed_time_s_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.creep_damage_ = from._impl_.creep_damage_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.creep_damage_mitigated_ = from._impl_.creep_damage_mitigated_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.player_damage_ = from._impl_.player_damage_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.player_damage_mitigated_ = from._impl_.player_damage_mitigated_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.first_damage_time_s_ = from._impl_.first_damage_time_s_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.team_objective_id_ = from._impl_.team_objective_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.team_ = from._impl_.team_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerSignoutData_DetailedStats_Objective::CopyFrom(const CMsgServerSignoutData_DetailedStats_Objective& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerSignoutData_DetailedStats.Objective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerSignoutData_DetailedStats_Objective::IsInitialized() const {
  return true;
}

void CMsgServerSignoutData_DetailedStats_Objective::InternalSwap(CMsgServerSignoutData_DetailedStats_Objective* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_DetailedStats_Objective, _impl_.team_)
      + sizeof(CMsgServerSignoutData_DetailedStats_Objective::_impl_.team_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_DetailedStats_Objective, _impl_.destroyed_time_s_)>(
          reinterpret_cast<char*>(&_impl_.destroyed_time_s_),
          reinterpret_cast<char*>(&other->_impl_.destroyed_time_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerSignoutData_DetailedStats_Objective::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[26]);
}

// ===================================================================

class CMsgServerSignoutData_DetailedStats_MidBoss::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerSignoutData_DetailedStats_MidBoss>()._impl_._has_bits_);
  static void set_has_team_killed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_claimed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_destroyed_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgServerSignoutData_DetailedStats_MidBoss::CMsgServerSignoutData_DetailedStats_MidBoss(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerSignoutData_DetailedStats.MidBoss)
}
CMsgServerSignoutData_DetailedStats_MidBoss::CMsgServerSignoutData_DetailedStats_MidBoss(const CMsgServerSignoutData_DetailedStats_MidBoss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerSignoutData_DetailedStats_MidBoss* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_killed_){}
    , decltype(_impl_.team_claimed_){}
    , decltype(_impl_.destroyed_time_s_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.team_killed_, &from._impl_.team_killed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.destroyed_time_s_) -
    reinterpret_cast<char*>(&_impl_.team_killed_)) + sizeof(_impl_.destroyed_time_s_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerSignoutData_DetailedStats.MidBoss)
}

inline void CMsgServerSignoutData_DetailedStats_MidBoss::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_killed_){0}
    , decltype(_impl_.team_claimed_){0}
    , decltype(_impl_.destroyed_time_s_){0u}
  };
}

CMsgServerSignoutData_DetailedStats_MidBoss::~CMsgServerSignoutData_DetailedStats_MidBoss() {
  // @@protoc_insertion_point(destructor:CMsgServerSignoutData_DetailedStats.MidBoss)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerSignoutData_DetailedStats_MidBoss::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerSignoutData_DetailedStats_MidBoss::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerSignoutData_DetailedStats_MidBoss::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerSignoutData_DetailedStats.MidBoss)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.team_killed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.destroyed_time_s_) -
        reinterpret_cast<char*>(&_impl_.team_killed_)) + sizeof(_impl_.destroyed_time_s_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerSignoutData_DetailedStats_MidBoss::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ECitadelLobbyTeam team_killed = 1 [default = k_ECitadelLobbyTeam_Team0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelLobbyTeam_IsValid(val))) {
            _internal_set_team_killed(static_cast<::ECitadelLobbyTeam>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelLobbyTeam team_claimed = 2 [default = k_ECitadelLobbyTeam_Team0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelLobbyTeam_IsValid(val))) {
            _internal_set_team_claimed(static_cast<::ECitadelLobbyTeam>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 destroyed_time_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_destroyed_time_s(&has_bits);
          _impl_.destroyed_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerSignoutData_DetailedStats_MidBoss::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerSignoutData_DetailedStats.MidBoss)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .ECitadelLobbyTeam team_killed = 1 [default = k_ECitadelLobbyTeam_Team0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_team_killed(), target);
  }

  // optional .ECitadelLobbyTeam team_claimed = 2 [default = k_ECitadelLobbyTeam_Team0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_team_claimed(), target);
  }

  // optional uint32 destroyed_time_s = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_destroyed_time_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerSignoutData_DetailedStats.MidBoss)
  return target;
}

size_t CMsgServerSignoutData_DetailedStats_MidBoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerSignoutData_DetailedStats.MidBoss)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ECitadelLobbyTeam team_killed = 1 [default = k_ECitadelLobbyTeam_Team0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_team_killed());
    }

    // optional .ECitadelLobbyTeam team_claimed = 2 [default = k_ECitadelLobbyTeam_Team0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_team_claimed());
    }

    // optional uint32 destroyed_time_s = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_destroyed_time_s());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerSignoutData_DetailedStats_MidBoss::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerSignoutData_DetailedStats_MidBoss::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerSignoutData_DetailedStats_MidBoss::GetClassData() const { return &_class_data_; }


void CMsgServerSignoutData_DetailedStats_MidBoss::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerSignoutData_DetailedStats_MidBoss*>(&to_msg);
  auto& from = static_cast<const CMsgServerSignoutData_DetailedStats_MidBoss&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerSignoutData_DetailedStats.MidBoss)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.team_killed_ = from._impl_.team_killed_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.team_claimed_ = from._impl_.team_claimed_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.destroyed_time_s_ = from._impl_.destroyed_time_s_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerSignoutData_DetailedStats_MidBoss::CopyFrom(const CMsgServerSignoutData_DetailedStats_MidBoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerSignoutData_DetailedStats.MidBoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerSignoutData_DetailedStats_MidBoss::IsInitialized() const {
  return true;
}

void CMsgServerSignoutData_DetailedStats_MidBoss::InternalSwap(CMsgServerSignoutData_DetailedStats_MidBoss* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_DetailedStats_MidBoss, _impl_.destroyed_time_s_)
      + sizeof(CMsgServerSignoutData_DetailedStats_MidBoss::_impl_.destroyed_time_s_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_DetailedStats_MidBoss, _impl_.team_killed_)>(
          reinterpret_cast<char*>(&_impl_.team_killed_),
          reinterpret_cast<char*>(&other->_impl_.team_killed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerSignoutData_DetailedStats_MidBoss::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[27]);
}

// ===================================================================

class CMsgServerSignoutData_DetailedStats_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerSignoutData_DetailedStats_Player>()._impl_._has_bits_);
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerSignoutData_DetailedStats_Player::CMsgServerSignoutData_DetailedStats_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerSignoutData_DetailedStats.Player)
}
CMsgServerSignoutData_DetailedStats_Player::CMsgServerSignoutData_DetailedStats_Player(const CMsgServerSignoutData_DetailedStats_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerSignoutData_DetailedStats_Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_samples_){from._impl_.time_samples_}
    , decltype(_impl_.player_slot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.player_slot_ = from._impl_.player_slot_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerSignoutData_DetailedStats.Player)
}

inline void CMsgServerSignoutData_DetailedStats_Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_samples_){arena}
    , decltype(_impl_.player_slot_){0u}
  };
}

CMsgServerSignoutData_DetailedStats_Player::~CMsgServerSignoutData_DetailedStats_Player() {
  // @@protoc_insertion_point(destructor:CMsgServerSignoutData_DetailedStats.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerSignoutData_DetailedStats_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.time_samples_.~RepeatedPtrField();
}

void CMsgServerSignoutData_DetailedStats_Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerSignoutData_DetailedStats_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerSignoutData_DetailedStats.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.time_samples_.Clear();
  _impl_.player_slot_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerSignoutData_DetailedStats_Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 player_slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_slot(&has_bits);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgServerSignoutData_DetailedStats.TimeSample time_samples = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_time_samples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerSignoutData_DetailedStats_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerSignoutData_DetailedStats.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 player_slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_slot(), target);
  }

  // repeated .CMsgServerSignoutData_DetailedStats.TimeSample time_samples = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_time_samples_size()); i < n; i++) {
    const auto& repfield = this->_internal_time_samples(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerSignoutData_DetailedStats.Player)
  return target;
}

size_t CMsgServerSignoutData_DetailedStats_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerSignoutData_DetailedStats.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerSignoutData_DetailedStats.TimeSample time_samples = 3;
  total_size += 1UL * this->_internal_time_samples_size();
  for (const auto& msg : this->_impl_.time_samples_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 player_slot = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_slot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerSignoutData_DetailedStats_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerSignoutData_DetailedStats_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerSignoutData_DetailedStats_Player::GetClassData() const { return &_class_data_; }


void CMsgServerSignoutData_DetailedStats_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerSignoutData_DetailedStats_Player*>(&to_msg);
  auto& from = static_cast<const CMsgServerSignoutData_DetailedStats_Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerSignoutData_DetailedStats.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.time_samples_.MergeFrom(from._impl_.time_samples_);
  if (from._internal_has_player_slot()) {
    _this->_internal_set_player_slot(from._internal_player_slot());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerSignoutData_DetailedStats_Player::CopyFrom(const CMsgServerSignoutData_DetailedStats_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerSignoutData_DetailedStats.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerSignoutData_DetailedStats_Player::IsInitialized() const {
  return true;
}

void CMsgServerSignoutData_DetailedStats_Player::InternalSwap(CMsgServerSignoutData_DetailedStats_Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.time_samples_.InternalSwap(&other->_impl_.time_samples_);
  swap(_impl_.player_slot_, other->_impl_.player_slot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerSignoutData_DetailedStats_Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[28]);
}

// ===================================================================

class CMsgServerSignoutData_DetailedStats::_Internal {
 public:
};

CMsgServerSignoutData_DetailedStats::CMsgServerSignoutData_DetailedStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerSignoutData_DetailedStats)
}
CMsgServerSignoutData_DetailedStats::CMsgServerSignoutData_DetailedStats(const CMsgServerSignoutData_DetailedStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerSignoutData_DetailedStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_stats_){from._impl_.player_stats_}
    , decltype(_impl_.objectives_){from._impl_.objectives_}
    , decltype(_impl_.mid_boss_){from._impl_.mid_boss_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgServerSignoutData_DetailedStats)
}

inline void CMsgServerSignoutData_DetailedStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_stats_){arena}
    , decltype(_impl_.objectives_){arena}
    , decltype(_impl_.mid_boss_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgServerSignoutData_DetailedStats::~CMsgServerSignoutData_DetailedStats() {
  // @@protoc_insertion_point(destructor:CMsgServerSignoutData_DetailedStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerSignoutData_DetailedStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_stats_.~RepeatedPtrField();
  _impl_.objectives_.~RepeatedPtrField();
  _impl_.mid_boss_.~RepeatedPtrField();
}

void CMsgServerSignoutData_DetailedStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerSignoutData_DetailedStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerSignoutData_DetailedStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_stats_.Clear();
  _impl_.objectives_.Clear();
  _impl_.mid_boss_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerSignoutData_DetailedStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgServerSignoutData_DetailedStats.Player player_stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgServerSignoutData_DetailedStats.Objective objectives = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objectives(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgServerSignoutData_DetailedStats.MidBoss mid_boss = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mid_boss(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerSignoutData_DetailedStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerSignoutData_DetailedStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgServerSignoutData_DetailedStats.Player player_stats = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_player_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_player_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgServerSignoutData_DetailedStats.Objective objectives = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_objectives_size()); i < n; i++) {
    const auto& repfield = this->_internal_objectives(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgServerSignoutData_DetailedStats.MidBoss mid_boss = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mid_boss_size()); i < n; i++) {
    const auto& repfield = this->_internal_mid_boss(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerSignoutData_DetailedStats)
  return target;
}

size_t CMsgServerSignoutData_DetailedStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerSignoutData_DetailedStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerSignoutData_DetailedStats.Player player_stats = 1;
  total_size += 1UL * this->_internal_player_stats_size();
  for (const auto& msg : this->_impl_.player_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgServerSignoutData_DetailedStats.Objective objectives = 2;
  total_size += 1UL * this->_internal_objectives_size();
  for (const auto& msg : this->_impl_.objectives_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgServerSignoutData_DetailedStats.MidBoss mid_boss = 3;
  total_size += 1UL * this->_internal_mid_boss_size();
  for (const auto& msg : this->_impl_.mid_boss_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerSignoutData_DetailedStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerSignoutData_DetailedStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerSignoutData_DetailedStats::GetClassData() const { return &_class_data_; }


void CMsgServerSignoutData_DetailedStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerSignoutData_DetailedStats*>(&to_msg);
  auto& from = static_cast<const CMsgServerSignoutData_DetailedStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerSignoutData_DetailedStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_stats_.MergeFrom(from._impl_.player_stats_);
  _this->_impl_.objectives_.MergeFrom(from._impl_.objectives_);
  _this->_impl_.mid_boss_.MergeFrom(from._impl_.mid_boss_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerSignoutData_DetailedStats::CopyFrom(const CMsgServerSignoutData_DetailedStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerSignoutData_DetailedStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerSignoutData_DetailedStats::IsInitialized() const {
  return true;
}

void CMsgServerSignoutData_DetailedStats::InternalSwap(CMsgServerSignoutData_DetailedStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.player_stats_.InternalSwap(&other->_impl_.player_stats_);
  _impl_.objectives_.InternalSwap(&other->_impl_.objectives_);
  _impl_.mid_boss_.InternalSwap(&other->_impl_.mid_boss_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerSignoutData_DetailedStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[29]);
}

// ===================================================================

class CMsgServerSignoutData_PerfData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerSignoutData_PerfData>()._impl_._has_bits_);
  static void set_has_server_average_frame_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_max_frame_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgServerSignoutData_PerfData::CMsgServerSignoutData_PerfData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerSignoutData_PerfData)
}
CMsgServerSignoutData_PerfData::CMsgServerSignoutData_PerfData(const CMsgServerSignoutData_PerfData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerSignoutData_PerfData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.average_frame_time_){from._impl_.average_frame_time_}
    , decltype(_impl_.max_frame_time_){from._impl_.max_frame_time_}
    , decltype(_impl_.average_compute_time_){from._impl_.average_compute_time_}
    , decltype(_impl_.max_compute_time_){from._impl_.max_compute_time_}
    , decltype(_impl_.average_client_tick_time_){from._impl_.average_client_tick_time_}
    , decltype(_impl_.max_client_tick_time_){from._impl_.max_client_tick_time_}
    , decltype(_impl_.average_client_simulate_time_){from._impl_.average_client_simulate_time_}
    , decltype(_impl_.max_client_simulate_time_){from._impl_.max_client_simulate_time_}
    , decltype(_impl_.average_output_time_){from._impl_.average_output_time_}
    , decltype(_impl_.max_output_time_){from._impl_.max_output_time_}
    , decltype(_impl_.average_wait_for_rendering_to_complete_time_){from._impl_.average_wait_for_rendering_to_complete_time_}
    , decltype(_impl_.max_wait_for_rendering_to_complete_time_){from._impl_.max_wait_for_rendering_to_complete_time_}
    , decltype(_impl_.average_swap_time_){from._impl_.average_swap_time_}
    , decltype(_impl_.max_swap_time_){from._impl_.max_swap_time_}
    , decltype(_impl_.average_frame_update_time_){from._impl_.average_frame_update_time_}
    , decltype(_impl_.max_frame_update_time_){from._impl_.max_frame_update_time_}
    , decltype(_impl_.average_idle_time_){from._impl_.average_idle_time_}
    , decltype(_impl_.max_idle_time_){from._impl_.max_idle_time_}
    , decltype(_impl_.average_input_processing_time_){from._impl_.average_input_processing_time_}
    , decltype(_impl_.max_input_processing_time_){from._impl_.max_input_processing_time_}
    , decltype(_impl_.server_average_frame_time_){}
    , decltype(_impl_.server_max_frame_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.server_average_frame_time_, &from._impl_.server_average_frame_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.server_max_frame_time_) -
    reinterpret_cast<char*>(&_impl_.server_average_frame_time_)) + sizeof(_impl_.server_max_frame_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerSignoutData_PerfData)
}

inline void CMsgServerSignoutData_PerfData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.average_frame_time_){arena}
    , decltype(_impl_.max_frame_time_){arena}
    , decltype(_impl_.average_compute_time_){arena}
    , decltype(_impl_.max_compute_time_){arena}
    , decltype(_impl_.average_client_tick_time_){arena}
    , decltype(_impl_.max_client_tick_time_){arena}
    , decltype(_impl_.average_client_simulate_time_){arena}
    , decltype(_impl_.max_client_simulate_time_){arena}
    , decltype(_impl_.average_output_time_){arena}
    , decltype(_impl_.max_output_time_){arena}
    , decltype(_impl_.average_wait_for_rendering_to_complete_time_){arena}
    , decltype(_impl_.max_wait_for_rendering_to_complete_time_){arena}
    , decltype(_impl_.average_swap_time_){arena}
    , decltype(_impl_.max_swap_time_){arena}
    , decltype(_impl_.average_frame_update_time_){arena}
    , decltype(_impl_.max_frame_update_time_){arena}
    , decltype(_impl_.average_idle_time_){arena}
    , decltype(_impl_.max_idle_time_){arena}
    , decltype(_impl_.average_input_processing_time_){arena}
    , decltype(_impl_.max_input_processing_time_){arena}
    , decltype(_impl_.server_average_frame_time_){0}
    , decltype(_impl_.server_max_frame_time_){0}
  };
}

CMsgServerSignoutData_PerfData::~CMsgServerSignoutData_PerfData() {
  // @@protoc_insertion_point(destructor:CMsgServerSignoutData_PerfData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerSignoutData_PerfData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.average_frame_time_.~RepeatedField();
  _impl_.max_frame_time_.~RepeatedField();
  _impl_.average_compute_time_.~RepeatedField();
  _impl_.max_compute_time_.~RepeatedField();
  _impl_.average_client_tick_time_.~RepeatedField();
  _impl_.max_client_tick_time_.~RepeatedField();
  _impl_.average_client_simulate_time_.~RepeatedField();
  _impl_.max_client_simulate_time_.~RepeatedField();
  _impl_.average_output_time_.~RepeatedField();
  _impl_.max_output_time_.~RepeatedField();
  _impl_.average_wait_for_rendering_to_complete_time_.~RepeatedField();
  _impl_.max_wait_for_rendering_to_complete_time_.~RepeatedField();
  _impl_.average_swap_time_.~RepeatedField();
  _impl_.max_swap_time_.~RepeatedField();
  _impl_.average_frame_update_time_.~RepeatedField();
  _impl_.max_frame_update_time_.~RepeatedField();
  _impl_.average_idle_time_.~RepeatedField();
  _impl_.max_idle_time_.~RepeatedField();
  _impl_.average_input_processing_time_.~RepeatedField();
  _impl_.max_input_processing_time_.~RepeatedField();
}

void CMsgServerSignoutData_PerfData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerSignoutData_PerfData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerSignoutData_PerfData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.average_frame_time_.Clear();
  _impl_.max_frame_time_.Clear();
  _impl_.average_compute_time_.Clear();
  _impl_.max_compute_time_.Clear();
  _impl_.average_client_tick_time_.Clear();
  _impl_.max_client_tick_time_.Clear();
  _impl_.average_client_simulate_time_.Clear();
  _impl_.max_client_simulate_time_.Clear();
  _impl_.average_output_time_.Clear();
  _impl_.max_output_time_.Clear();
  _impl_.average_wait_for_rendering_to_complete_time_.Clear();
  _impl_.max_wait_for_rendering_to_complete_time_.Clear();
  _impl_.average_swap_time_.Clear();
  _impl_.max_swap_time_.Clear();
  _impl_.average_frame_update_time_.Clear();
  _impl_.max_frame_update_time_.Clear();
  _impl_.average_idle_time_.Clear();
  _impl_.max_idle_time_.Clear();
  _impl_.average_input_processing_time_.Clear();
  _impl_.max_input_processing_time_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.server_average_frame_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.server_max_frame_time_) -
        reinterpret_cast<char*>(&_impl_.server_average_frame_time_)) + sizeof(_impl_.server_max_frame_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerSignoutData_PerfData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float average_frame_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_average_frame_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_frame_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float max_frame_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max_frame_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_frame_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float server_average_frame_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_server_average_frame_time(&has_bits);
          _impl_.server_average_frame_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float server_max_frame_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_server_max_frame_time(&has_bits);
          _impl_.server_max_frame_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float average_compute_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_average_compute_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_compute_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float max_compute_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max_compute_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<53>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_compute_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float average_client_tick_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_average_client_tick_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<61>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_client_tick_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float max_client_tick_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max_client_tick_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<69>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_client_tick_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float average_client_simulate_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_average_client_simulate_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<77>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_client_simulate_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float max_client_simulate_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max_client_simulate_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<85>(ptr));
        } else if (static_cast<uint8_t>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_client_simulate_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float average_output_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_average_output_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<93>(ptr));
        } else if (static_cast<uint8_t>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_output_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float max_output_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max_output_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<101>(ptr));
        } else if (static_cast<uint8_t>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_output_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float average_wait_for_rendering_to_complete_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_average_wait_for_rendering_to_complete_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<109>(ptr));
        } else if (static_cast<uint8_t>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_wait_for_rendering_to_complete_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float max_wait_for_rendering_to_complete_time = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max_wait_for_rendering_to_complete_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<117>(ptr));
        } else if (static_cast<uint8_t>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_wait_for_rendering_to_complete_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float average_swap_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_average_swap_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<125>(ptr));
        } else if (static_cast<uint8_t>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_swap_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float max_swap_time = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_max_swap_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<133>(ptr));
        } else if (static_cast<uint8_t>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_swap_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float average_frame_update_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_average_frame_update_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<141>(ptr));
        } else if (static_cast<uint8_t>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_frame_update_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float max_frame_update_time = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_max_frame_update_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<149>(ptr));
        } else if (static_cast<uint8_t>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_frame_update_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float average_idle_time = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_average_idle_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<157>(ptr));
        } else if (static_cast<uint8_t>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_idle_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float max_idle_time = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_max_idle_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<165>(ptr));
        } else if (static_cast<uint8_t>(tag) == 162) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_idle_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float average_input_processing_time = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 173)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_average_input_processing_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<173>(ptr));
        } else if (static_cast<uint8_t>(tag) == 170) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_input_processing_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float max_input_processing_time = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_max_input_processing_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<181>(ptr));
        } else if (static_cast<uint8_t>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_input_processing_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerSignoutData_PerfData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerSignoutData_PerfData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float average_frame_time = 1;
  for (int i = 0, n = this->_internal_average_frame_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_average_frame_time(i), target);
  }

  // repeated float max_frame_time = 2;
  for (int i = 0, n = this->_internal_max_frame_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_max_frame_time(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional float server_average_frame_time = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_server_average_frame_time(), target);
  }

  // optional float server_max_frame_time = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_server_max_frame_time(), target);
  }

  // repeated float average_compute_time = 5;
  for (int i = 0, n = this->_internal_average_compute_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_average_compute_time(i), target);
  }

  // repeated float max_compute_time = 6;
  for (int i = 0, n = this->_internal_max_compute_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_max_compute_time(i), target);
  }

  // repeated float average_client_tick_time = 7;
  for (int i = 0, n = this->_internal_average_client_tick_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_average_client_tick_time(i), target);
  }

  // repeated float max_client_tick_time = 8;
  for (int i = 0, n = this->_internal_max_client_tick_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_max_client_tick_time(i), target);
  }

  // repeated float average_client_simulate_time = 9;
  for (int i = 0, n = this->_internal_average_client_simulate_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_average_client_simulate_time(i), target);
  }

  // repeated float max_client_simulate_time = 10;
  for (int i = 0, n = this->_internal_max_client_simulate_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_max_client_simulate_time(i), target);
  }

  // repeated float average_output_time = 11;
  for (int i = 0, n = this->_internal_average_output_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_average_output_time(i), target);
  }

  // repeated float max_output_time = 12;
  for (int i = 0, n = this->_internal_max_output_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_max_output_time(i), target);
  }

  // repeated float average_wait_for_rendering_to_complete_time = 13;
  for (int i = 0, n = this->_internal_average_wait_for_rendering_to_complete_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_average_wait_for_rendering_to_complete_time(i), target);
  }

  // repeated float max_wait_for_rendering_to_complete_time = 14;
  for (int i = 0, n = this->_internal_max_wait_for_rendering_to_complete_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_max_wait_for_rendering_to_complete_time(i), target);
  }

  // repeated float average_swap_time = 15;
  for (int i = 0, n = this->_internal_average_swap_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_average_swap_time(i), target);
  }

  // repeated float max_swap_time = 16;
  for (int i = 0, n = this->_internal_max_swap_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_max_swap_time(i), target);
  }

  // repeated float average_frame_update_time = 17;
  for (int i = 0, n = this->_internal_average_frame_update_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_average_frame_update_time(i), target);
  }

  // repeated float max_frame_update_time = 18;
  for (int i = 0, n = this->_internal_max_frame_update_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_max_frame_update_time(i), target);
  }

  // repeated float average_idle_time = 19;
  for (int i = 0, n = this->_internal_average_idle_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(19, this->_internal_average_idle_time(i), target);
  }

  // repeated float max_idle_time = 20;
  for (int i = 0, n = this->_internal_max_idle_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(20, this->_internal_max_idle_time(i), target);
  }

  // repeated float average_input_processing_time = 21;
  for (int i = 0, n = this->_internal_average_input_processing_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(21, this->_internal_average_input_processing_time(i), target);
  }

  // repeated float max_input_processing_time = 22;
  for (int i = 0, n = this->_internal_max_input_processing_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(22, this->_internal_max_input_processing_time(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerSignoutData_PerfData)
  return target;
}

size_t CMsgServerSignoutData_PerfData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerSignoutData_PerfData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float average_frame_time = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_frame_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_average_frame_time_size());
    total_size += data_size;
  }

  // repeated float max_frame_time = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_frame_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_max_frame_time_size());
    total_size += data_size;
  }

  // repeated float average_compute_time = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_compute_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_average_compute_time_size());
    total_size += data_size;
  }

  // repeated float max_compute_time = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_compute_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_max_compute_time_size());
    total_size += data_size;
  }

  // repeated float average_client_tick_time = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_client_tick_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_average_client_tick_time_size());
    total_size += data_size;
  }

  // repeated float max_client_tick_time = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_client_tick_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_max_client_tick_time_size());
    total_size += data_size;
  }

  // repeated float average_client_simulate_time = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_client_simulate_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_average_client_simulate_time_size());
    total_size += data_size;
  }

  // repeated float max_client_simulate_time = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_client_simulate_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_max_client_simulate_time_size());
    total_size += data_size;
  }

  // repeated float average_output_time = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_output_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_average_output_time_size());
    total_size += data_size;
  }

  // repeated float max_output_time = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_output_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_max_output_time_size());
    total_size += data_size;
  }

  // repeated float average_wait_for_rendering_to_complete_time = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_wait_for_rendering_to_complete_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_average_wait_for_rendering_to_complete_time_size());
    total_size += data_size;
  }

  // repeated float max_wait_for_rendering_to_complete_time = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_wait_for_rendering_to_complete_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_max_wait_for_rendering_to_complete_time_size());
    total_size += data_size;
  }

  // repeated float average_swap_time = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_swap_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_average_swap_time_size());
    total_size += data_size;
  }

  // repeated float max_swap_time = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_swap_time_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_max_swap_time_size());
    total_size += data_size;
  }

  // repeated float average_frame_update_time = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_frame_update_time_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_average_frame_update_time_size());
    total_size += data_size;
  }

  // repeated float max_frame_update_time = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_frame_update_time_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_max_frame_update_time_size());
    total_size += data_size;
  }

  // repeated float average_idle_time = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_idle_time_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_average_idle_time_size());
    total_size += data_size;
  }

  // repeated float max_idle_time = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_idle_time_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_max_idle_time_size());
    total_size += data_size;
  }

  // repeated float average_input_processing_time = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_input_processing_time_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_average_input_processing_time_size());
    total_size += data_size;
  }

  // repeated float max_input_processing_time = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_input_processing_time_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_max_input_processing_time_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float server_average_frame_time = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float server_max_frame_time = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerSignoutData_PerfData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerSignoutData_PerfData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerSignoutData_PerfData::GetClassData() const { return &_class_data_; }


void CMsgServerSignoutData_PerfData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerSignoutData_PerfData*>(&to_msg);
  auto& from = static_cast<const CMsgServerSignoutData_PerfData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerSignoutData_PerfData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.average_frame_time_.MergeFrom(from._impl_.average_frame_time_);
  _this->_impl_.max_frame_time_.MergeFrom(from._impl_.max_frame_time_);
  _this->_impl_.average_compute_time_.MergeFrom(from._impl_.average_compute_time_);
  _this->_impl_.max_compute_time_.MergeFrom(from._impl_.max_compute_time_);
  _this->_impl_.average_client_tick_time_.MergeFrom(from._impl_.average_client_tick_time_);
  _this->_impl_.max_client_tick_time_.MergeFrom(from._impl_.max_client_tick_time_);
  _this->_impl_.average_client_simulate_time_.MergeFrom(from._impl_.average_client_simulate_time_);
  _this->_impl_.max_client_simulate_time_.MergeFrom(from._impl_.max_client_simulate_time_);
  _this->_impl_.average_output_time_.MergeFrom(from._impl_.average_output_time_);
  _this->_impl_.max_output_time_.MergeFrom(from._impl_.max_output_time_);
  _this->_impl_.average_wait_for_rendering_to_complete_time_.MergeFrom(from._impl_.average_wait_for_rendering_to_complete_time_);
  _this->_impl_.max_wait_for_rendering_to_complete_time_.MergeFrom(from._impl_.max_wait_for_rendering_to_complete_time_);
  _this->_impl_.average_swap_time_.MergeFrom(from._impl_.average_swap_time_);
  _this->_impl_.max_swap_time_.MergeFrom(from._impl_.max_swap_time_);
  _this->_impl_.average_frame_update_time_.MergeFrom(from._impl_.average_frame_update_time_);
  _this->_impl_.max_frame_update_time_.MergeFrom(from._impl_.max_frame_update_time_);
  _this->_impl_.average_idle_time_.MergeFrom(from._impl_.average_idle_time_);
  _this->_impl_.max_idle_time_.MergeFrom(from._impl_.max_idle_time_);
  _this->_impl_.average_input_processing_time_.MergeFrom(from._impl_.average_input_processing_time_);
  _this->_impl_.max_input_processing_time_.MergeFrom(from._impl_.max_input_processing_time_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.server_average_frame_time_ = from._impl_.server_average_frame_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.server_max_frame_time_ = from._impl_.server_max_frame_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerSignoutData_PerfData::CopyFrom(const CMsgServerSignoutData_PerfData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerSignoutData_PerfData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerSignoutData_PerfData::IsInitialized() const {
  return true;
}

void CMsgServerSignoutData_PerfData::InternalSwap(CMsgServerSignoutData_PerfData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.average_frame_time_.InternalSwap(&other->_impl_.average_frame_time_);
  _impl_.max_frame_time_.InternalSwap(&other->_impl_.max_frame_time_);
  _impl_.average_compute_time_.InternalSwap(&other->_impl_.average_compute_time_);
  _impl_.max_compute_time_.InternalSwap(&other->_impl_.max_compute_time_);
  _impl_.average_client_tick_time_.InternalSwap(&other->_impl_.average_client_tick_time_);
  _impl_.max_client_tick_time_.InternalSwap(&other->_impl_.max_client_tick_time_);
  _impl_.average_client_simulate_time_.InternalSwap(&other->_impl_.average_client_simulate_time_);
  _impl_.max_client_simulate_time_.InternalSwap(&other->_impl_.max_client_simulate_time_);
  _impl_.average_output_time_.InternalSwap(&other->_impl_.average_output_time_);
  _impl_.max_output_time_.InternalSwap(&other->_impl_.max_output_time_);
  _impl_.average_wait_for_rendering_to_complete_time_.InternalSwap(&other->_impl_.average_wait_for_rendering_to_complete_time_);
  _impl_.max_wait_for_rendering_to_complete_time_.InternalSwap(&other->_impl_.max_wait_for_rendering_to_complete_time_);
  _impl_.average_swap_time_.InternalSwap(&other->_impl_.average_swap_time_);
  _impl_.max_swap_time_.InternalSwap(&other->_impl_.max_swap_time_);
  _impl_.average_frame_update_time_.InternalSwap(&other->_impl_.average_frame_update_time_);
  _impl_.max_frame_update_time_.InternalSwap(&other->_impl_.max_frame_update_time_);
  _impl_.average_idle_time_.InternalSwap(&other->_impl_.average_idle_time_);
  _impl_.max_idle_time_.InternalSwap(&other->_impl_.max_idle_time_);
  _impl_.average_input_processing_time_.InternalSwap(&other->_impl_.average_input_processing_time_);
  _impl_.max_input_processing_time_.InternalSwap(&other->_impl_.max_input_processing_time_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_PerfData, _impl_.server_max_frame_time_)
      + sizeof(CMsgServerSignoutData_PerfData::_impl_.server_max_frame_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_PerfData, _impl_.server_average_frame_time_)>(
          reinterpret_cast<char*>(&_impl_.server_average_frame_time_),
          reinterpret_cast<char*>(&other->_impl_.server_average_frame_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerSignoutData_PerfData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[30]);
}

// ===================================================================

class CMsgServerSignoutData_BookRewards_BookReward::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerSignoutData_BookRewards_BookReward>()._impl_._has_bits_);
  static void set_has_book_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_xp_reward(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgServerSignoutData_BookRewards_BookReward::CMsgServerSignoutData_BookRewards_BookReward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerSignoutData_BookRewards.BookReward)
}
CMsgServerSignoutData_BookRewards_BookReward::CMsgServerSignoutData_BookRewards_BookReward(const CMsgServerSignoutData_BookRewards_BookReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerSignoutData_BookRewards_BookReward* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.book_id_){}
    , decltype(_impl_.xp_reward_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.book_id_, &from._impl_.book_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.xp_reward_) -
    reinterpret_cast<char*>(&_impl_.book_id_)) + sizeof(_impl_.xp_reward_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerSignoutData_BookRewards.BookReward)
}

inline void CMsgServerSignoutData_BookRewards_BookReward::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.book_id_){0u}
    , decltype(_impl_.xp_reward_){0u}
  };
}

CMsgServerSignoutData_BookRewards_BookReward::~CMsgServerSignoutData_BookRewards_BookReward() {
  // @@protoc_insertion_point(destructor:CMsgServerSignoutData_BookRewards.BookReward)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerSignoutData_BookRewards_BookReward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerSignoutData_BookRewards_BookReward::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerSignoutData_BookRewards_BookReward::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerSignoutData_BookRewards.BookReward)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.book_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.xp_reward_) -
        reinterpret_cast<char*>(&_impl_.book_id_)) + sizeof(_impl_.xp_reward_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerSignoutData_BookRewards_BookReward::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 book_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_book_id(&has_bits);
          _impl_.book_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 xp_reward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_xp_reward(&has_bits);
          _impl_.xp_reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerSignoutData_BookRewards_BookReward::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerSignoutData_BookRewards.BookReward)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 book_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_book_id(), target);
  }

  // optional uint32 xp_reward = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_xp_reward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerSignoutData_BookRewards.BookReward)
  return target;
}

size_t CMsgServerSignoutData_BookRewards_BookReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerSignoutData_BookRewards.BookReward)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 book_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_book_id());
    }

    // optional uint32 xp_reward = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_xp_reward());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerSignoutData_BookRewards_BookReward::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerSignoutData_BookRewards_BookReward::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerSignoutData_BookRewards_BookReward::GetClassData() const { return &_class_data_; }


void CMsgServerSignoutData_BookRewards_BookReward::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerSignoutData_BookRewards_BookReward*>(&to_msg);
  auto& from = static_cast<const CMsgServerSignoutData_BookRewards_BookReward&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerSignoutData_BookRewards.BookReward)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.book_id_ = from._impl_.book_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.xp_reward_ = from._impl_.xp_reward_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerSignoutData_BookRewards_BookReward::CopyFrom(const CMsgServerSignoutData_BookRewards_BookReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerSignoutData_BookRewards.BookReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerSignoutData_BookRewards_BookReward::IsInitialized() const {
  return true;
}

void CMsgServerSignoutData_BookRewards_BookReward::InternalSwap(CMsgServerSignoutData_BookRewards_BookReward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_BookRewards_BookReward, _impl_.xp_reward_)
      + sizeof(CMsgServerSignoutData_BookRewards_BookReward::_impl_.xp_reward_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_BookRewards_BookReward, _impl_.book_id_)>(
          reinterpret_cast<char*>(&_impl_.book_id_),
          reinterpret_cast<char*>(&other->_impl_.book_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerSignoutData_BookRewards_BookReward::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[31]);
}

// ===================================================================

class CMsgServerSignoutData_BookRewards_AccountRewards::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerSignoutData_BookRewards_AccountRewards>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgServerSignoutData_BookRewards_BookReward& book_reward(const CMsgServerSignoutData_BookRewards_AccountRewards* msg);
  static void set_has_book_reward(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgServerSignoutData_BookRewards_BookReward&
CMsgServerSignoutData_BookRewards_AccountRewards::_Internal::book_reward(const CMsgServerSignoutData_BookRewards_AccountRewards* msg) {
  return *msg->_impl_.book_reward_;
}
CMsgServerSignoutData_BookRewards_AccountRewards::CMsgServerSignoutData_BookRewards_AccountRewards(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerSignoutData_BookRewards.AccountRewards)
}
CMsgServerSignoutData_BookRewards_AccountRewards::CMsgServerSignoutData_BookRewards_AccountRewards(const CMsgServerSignoutData_BookRewards_AccountRewards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerSignoutData_BookRewards_AccountRewards* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.book_reward_){nullptr}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_book_reward()) {
    _this->_impl_.book_reward_ = new ::CMsgServerSignoutData_BookRewards_BookReward(*from._impl_.book_reward_);
  }
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerSignoutData_BookRewards.AccountRewards)
}

inline void CMsgServerSignoutData_BookRewards_AccountRewards::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.book_reward_){nullptr}
    , decltype(_impl_.account_id_){0u}
  };
}

CMsgServerSignoutData_BookRewards_AccountRewards::~CMsgServerSignoutData_BookRewards_AccountRewards() {
  // @@protoc_insertion_point(destructor:CMsgServerSignoutData_BookRewards.AccountRewards)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerSignoutData_BookRewards_AccountRewards::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.book_reward_;
}

void CMsgServerSignoutData_BookRewards_AccountRewards::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerSignoutData_BookRewards_AccountRewards::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerSignoutData_BookRewards.AccountRewards)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.book_reward_ != nullptr);
    _impl_.book_reward_->Clear();
  }
  _impl_.account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerSignoutData_BookRewards_AccountRewards::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgServerSignoutData_BookRewards.BookReward book_reward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_book_reward(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerSignoutData_BookRewards_AccountRewards::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerSignoutData_BookRewards.AccountRewards)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional .CMsgServerSignoutData_BookRewards.BookReward book_reward = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::book_reward(this),
        _Internal::book_reward(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerSignoutData_BookRewards.AccountRewards)
  return target;
}

size_t CMsgServerSignoutData_BookRewards_AccountRewards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerSignoutData_BookRewards.AccountRewards)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgServerSignoutData_BookRewards.BookReward book_reward = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.book_reward_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerSignoutData_BookRewards_AccountRewards::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerSignoutData_BookRewards_AccountRewards::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerSignoutData_BookRewards_AccountRewards::GetClassData() const { return &_class_data_; }


void CMsgServerSignoutData_BookRewards_AccountRewards::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerSignoutData_BookRewards_AccountRewards*>(&to_msg);
  auto& from = static_cast<const CMsgServerSignoutData_BookRewards_AccountRewards&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerSignoutData_BookRewards.AccountRewards)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_book_reward()->::CMsgServerSignoutData_BookRewards_BookReward::MergeFrom(
          from._internal_book_reward());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerSignoutData_BookRewards_AccountRewards::CopyFrom(const CMsgServerSignoutData_BookRewards_AccountRewards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerSignoutData_BookRewards.AccountRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerSignoutData_BookRewards_AccountRewards::IsInitialized() const {
  return true;
}

void CMsgServerSignoutData_BookRewards_AccountRewards::InternalSwap(CMsgServerSignoutData_BookRewards_AccountRewards* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_BookRewards_AccountRewards, _impl_.account_id_)
      + sizeof(CMsgServerSignoutData_BookRewards_AccountRewards::_impl_.account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_BookRewards_AccountRewards, _impl_.book_reward_)>(
          reinterpret_cast<char*>(&_impl_.book_reward_),
          reinterpret_cast<char*>(&other->_impl_.book_reward_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerSignoutData_BookRewards_AccountRewards::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[32]);
}

// ===================================================================

class CMsgServerSignoutData_BookRewards::_Internal {
 public:
};

CMsgServerSignoutData_BookRewards::CMsgServerSignoutData_BookRewards(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerSignoutData_BookRewards)
}
CMsgServerSignoutData_BookRewards::CMsgServerSignoutData_BookRewards(const CMsgServerSignoutData_BookRewards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerSignoutData_BookRewards* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_rewards_){from._impl_.account_rewards_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgServerSignoutData_BookRewards)
}

inline void CMsgServerSignoutData_BookRewards::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_rewards_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgServerSignoutData_BookRewards::~CMsgServerSignoutData_BookRewards() {
  // @@protoc_insertion_point(destructor:CMsgServerSignoutData_BookRewards)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerSignoutData_BookRewards::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_rewards_.~RepeatedPtrField();
}

void CMsgServerSignoutData_BookRewards::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerSignoutData_BookRewards::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerSignoutData_BookRewards)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_rewards_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerSignoutData_BookRewards::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgServerSignoutData_BookRewards.AccountRewards account_rewards = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_account_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerSignoutData_BookRewards::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerSignoutData_BookRewards)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgServerSignoutData_BookRewards.AccountRewards account_rewards = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_account_rewards_size()); i < n; i++) {
    const auto& repfield = this->_internal_account_rewards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerSignoutData_BookRewards)
  return target;
}

size_t CMsgServerSignoutData_BookRewards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerSignoutData_BookRewards)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerSignoutData_BookRewards.AccountRewards account_rewards = 1;
  total_size += 1UL * this->_internal_account_rewards_size();
  for (const auto& msg : this->_impl_.account_rewards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerSignoutData_BookRewards::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerSignoutData_BookRewards::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerSignoutData_BookRewards::GetClassData() const { return &_class_data_; }


void CMsgServerSignoutData_BookRewards::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerSignoutData_BookRewards*>(&to_msg);
  auto& from = static_cast<const CMsgServerSignoutData_BookRewards&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerSignoutData_BookRewards)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.account_rewards_.MergeFrom(from._impl_.account_rewards_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerSignoutData_BookRewards::CopyFrom(const CMsgServerSignoutData_BookRewards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerSignoutData_BookRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerSignoutData_BookRewards::IsInitialized() const {
  return true;
}

void CMsgServerSignoutData_BookRewards::InternalSwap(CMsgServerSignoutData_BookRewards* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.account_rewards_.InternalSwap(&other->_impl_.account_rewards_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerSignoutData_BookRewards::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[33]);
}

// ===================================================================

class CMsgServerSignoutData_AccountStatChanges_Stat::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerSignoutData_AccountStatChanges_Stat>()._impl_._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_medal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgServerSignoutData_AccountStatChanges_Stat::CMsgServerSignoutData_AccountStatChanges_Stat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerSignoutData_AccountStatChanges.Stat)
}
CMsgServerSignoutData_AccountStatChanges_Stat::CMsgServerSignoutData_AccountStatChanges_Stat(const CMsgServerSignoutData_AccountStatChanges_Stat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerSignoutData_AccountStatChanges_Stat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.stat_id_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.medal_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hero_id_, &from._impl_.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.medal_) -
    reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.medal_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerSignoutData_AccountStatChanges.Stat)
}

inline void CMsgServerSignoutData_AccountStatChanges_Stat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.stat_id_){0u}
    , decltype(_impl_.value_){0u}
    , decltype(_impl_.medal_){0}
  };
}

CMsgServerSignoutData_AccountStatChanges_Stat::~CMsgServerSignoutData_AccountStatChanges_Stat() {
  // @@protoc_insertion_point(destructor:CMsgServerSignoutData_AccountStatChanges.Stat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerSignoutData_AccountStatChanges_Stat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerSignoutData_AccountStatChanges_Stat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerSignoutData_AccountStatChanges_Stat::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerSignoutData_AccountStatChanges.Stat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.medal_) -
        reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.medal_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerSignoutData_AccountStatChanges_Stat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stat_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_stat_id(&has_bits);
          _impl_.stat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelAccountStatMedal medal = 4 [default = k_eNone];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelAccountStatMedal_IsValid(val))) {
            _internal_set_medal(static_cast<::ECitadelAccountStatMedal>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerSignoutData_AccountStatChanges_Stat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerSignoutData_AccountStatChanges.Stat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 stat_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stat_id(), target);
  }

  // optional uint32 value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_value(), target);
  }

  // optional .ECitadelAccountStatMedal medal = 4 [default = k_eNone];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_medal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerSignoutData_AccountStatChanges.Stat)
  return target;
}

size_t CMsgServerSignoutData_AccountStatChanges_Stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerSignoutData_AccountStatChanges.Stat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 stat_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stat_id());
    }

    // optional uint32 value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
    }

    // optional .ECitadelAccountStatMedal medal = 4 [default = k_eNone];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_medal());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerSignoutData_AccountStatChanges_Stat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerSignoutData_AccountStatChanges_Stat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerSignoutData_AccountStatChanges_Stat::GetClassData() const { return &_class_data_; }


void CMsgServerSignoutData_AccountStatChanges_Stat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerSignoutData_AccountStatChanges_Stat*>(&to_msg);
  auto& from = static_cast<const CMsgServerSignoutData_AccountStatChanges_Stat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerSignoutData_AccountStatChanges.Stat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.stat_id_ = from._impl_.stat_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.medal_ = from._impl_.medal_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerSignoutData_AccountStatChanges_Stat::CopyFrom(const CMsgServerSignoutData_AccountStatChanges_Stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerSignoutData_AccountStatChanges.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerSignoutData_AccountStatChanges_Stat::IsInitialized() const {
  return true;
}

void CMsgServerSignoutData_AccountStatChanges_Stat::InternalSwap(CMsgServerSignoutData_AccountStatChanges_Stat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_AccountStatChanges_Stat, _impl_.medal_)
      + sizeof(CMsgServerSignoutData_AccountStatChanges_Stat::_impl_.medal_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_AccountStatChanges_Stat, _impl_.hero_id_)>(
          reinterpret_cast<char*>(&_impl_.hero_id_),
          reinterpret_cast<char*>(&other->_impl_.hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerSignoutData_AccountStatChanges_Stat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[34]);
}

// ===================================================================

class CMsgServerSignoutData_AccountStatChanges_AccountStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerSignoutData_AccountStatChanges_AccountStats>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerSignoutData_AccountStatChanges_AccountStats::CMsgServerSignoutData_AccountStatChanges_AccountStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerSignoutData_AccountStatChanges.AccountStats)
}
CMsgServerSignoutData_AccountStatChanges_AccountStats::CMsgServerSignoutData_AccountStatChanges_AccountStats(const CMsgServerSignoutData_AccountStatChanges_AccountStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerSignoutData_AccountStatChanges_AccountStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_){from._impl_.stats_}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerSignoutData_AccountStatChanges.AccountStats)
}

inline void CMsgServerSignoutData_AccountStatChanges_AccountStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_){arena}
    , decltype(_impl_.account_id_){0u}
  };
}

CMsgServerSignoutData_AccountStatChanges_AccountStats::~CMsgServerSignoutData_AccountStatChanges_AccountStats() {
  // @@protoc_insertion_point(destructor:CMsgServerSignoutData_AccountStatChanges.AccountStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerSignoutData_AccountStatChanges_AccountStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_.~RepeatedPtrField();
}

void CMsgServerSignoutData_AccountStatChanges_AccountStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerSignoutData_AccountStatChanges_AccountStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerSignoutData_AccountStatChanges.AccountStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_.Clear();
  _impl_.account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerSignoutData_AccountStatChanges_AccountStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgServerSignoutData_AccountStatChanges.Stat stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerSignoutData_AccountStatChanges_AccountStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerSignoutData_AccountStatChanges.AccountStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated .CMsgServerSignoutData_AccountStatChanges.Stat stats = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerSignoutData_AccountStatChanges.AccountStats)
  return target;
}

size_t CMsgServerSignoutData_AccountStatChanges_AccountStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerSignoutData_AccountStatChanges.AccountStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerSignoutData_AccountStatChanges.Stat stats = 2;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 account_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerSignoutData_AccountStatChanges_AccountStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerSignoutData_AccountStatChanges_AccountStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerSignoutData_AccountStatChanges_AccountStats::GetClassData() const { return &_class_data_; }


void CMsgServerSignoutData_AccountStatChanges_AccountStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerSignoutData_AccountStatChanges_AccountStats*>(&to_msg);
  auto& from = static_cast<const CMsgServerSignoutData_AccountStatChanges_AccountStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerSignoutData_AccountStatChanges.AccountStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  if (from._internal_has_account_id()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerSignoutData_AccountStatChanges_AccountStats::CopyFrom(const CMsgServerSignoutData_AccountStatChanges_AccountStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerSignoutData_AccountStatChanges.AccountStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerSignoutData_AccountStatChanges_AccountStats::IsInitialized() const {
  return true;
}

void CMsgServerSignoutData_AccountStatChanges_AccountStats::InternalSwap(CMsgServerSignoutData_AccountStatChanges_AccountStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
  swap(_impl_.account_id_, other->_impl_.account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerSignoutData_AccountStatChanges_AccountStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[35]);
}

// ===================================================================

class CMsgServerSignoutData_AccountStatChanges::_Internal {
 public:
};

CMsgServerSignoutData_AccountStatChanges::CMsgServerSignoutData_AccountStatChanges(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerSignoutData_AccountStatChanges)
}
CMsgServerSignoutData_AccountStatChanges::CMsgServerSignoutData_AccountStatChanges(const CMsgServerSignoutData_AccountStatChanges& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerSignoutData_AccountStatChanges* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_stats_){from._impl_.account_stats_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgServerSignoutData_AccountStatChanges)
}

inline void CMsgServerSignoutData_AccountStatChanges::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_stats_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgServerSignoutData_AccountStatChanges::~CMsgServerSignoutData_AccountStatChanges() {
  // @@protoc_insertion_point(destructor:CMsgServerSignoutData_AccountStatChanges)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerSignoutData_AccountStatChanges::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_stats_.~RepeatedPtrField();
}

void CMsgServerSignoutData_AccountStatChanges::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerSignoutData_AccountStatChanges::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerSignoutData_AccountStatChanges)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_stats_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerSignoutData_AccountStatChanges::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgServerSignoutData_AccountStatChanges.AccountStats account_stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_account_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerSignoutData_AccountStatChanges::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerSignoutData_AccountStatChanges)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgServerSignoutData_AccountStatChanges.AccountStats account_stats = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_account_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_account_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerSignoutData_AccountStatChanges)
  return target;
}

size_t CMsgServerSignoutData_AccountStatChanges::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerSignoutData_AccountStatChanges)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerSignoutData_AccountStatChanges.AccountStats account_stats = 1;
  total_size += 1UL * this->_internal_account_stats_size();
  for (const auto& msg : this->_impl_.account_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerSignoutData_AccountStatChanges::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerSignoutData_AccountStatChanges::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerSignoutData_AccountStatChanges::GetClassData() const { return &_class_data_; }


void CMsgServerSignoutData_AccountStatChanges::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerSignoutData_AccountStatChanges*>(&to_msg);
  auto& from = static_cast<const CMsgServerSignoutData_AccountStatChanges&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerSignoutData_AccountStatChanges)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.account_stats_.MergeFrom(from._impl_.account_stats_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerSignoutData_AccountStatChanges::CopyFrom(const CMsgServerSignoutData_AccountStatChanges& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerSignoutData_AccountStatChanges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerSignoutData_AccountStatChanges::IsInitialized() const {
  return true;
}

void CMsgServerSignoutData_AccountStatChanges::InternalSwap(CMsgServerSignoutData_AccountStatChanges* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.account_stats_.InternalSwap(&other->_impl_.account_stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerSignoutData_AccountStatChanges::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[36]);
}

// ===================================================================

class CMsgServerSignoutData_PlayerChat_ChatLine::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerSignoutData_PlayerChat_ChatLine>()._impl_._has_bits_);
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team_only(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_chat_line(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerSignoutData_PlayerChat_ChatLine::CMsgServerSignoutData_PlayerChat_ChatLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerSignoutData_PlayerChat.ChatLine)
}
CMsgServerSignoutData_PlayerChat_ChatLine::CMsgServerSignoutData_PlayerChat_ChatLine(const CMsgServerSignoutData_PlayerChat_ChatLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerSignoutData_PlayerChat_ChatLine* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chat_line_){}
    , decltype(_impl_.player_slot_){}
    , decltype(_impl_.game_time_){}
    , decltype(_impl_.team_only_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chat_line_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_line_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chat_line()) {
    _this->_impl_.chat_line_.Set(from._internal_chat_line(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.player_slot_, &from._impl_.player_slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_only_) -
    reinterpret_cast<char*>(&_impl_.player_slot_)) + sizeof(_impl_.team_only_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerSignoutData_PlayerChat.ChatLine)
}

inline void CMsgServerSignoutData_PlayerChat_ChatLine::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chat_line_){}
    , decltype(_impl_.player_slot_){0u}
    , decltype(_impl_.game_time_){0}
    , decltype(_impl_.team_only_){false}
  };
  _impl_.chat_line_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_line_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgServerSignoutData_PlayerChat_ChatLine::~CMsgServerSignoutData_PlayerChat_ChatLine() {
  // @@protoc_insertion_point(destructor:CMsgServerSignoutData_PlayerChat.ChatLine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerSignoutData_PlayerChat_ChatLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chat_line_.Destroy();
}

void CMsgServerSignoutData_PlayerChat_ChatLine::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerSignoutData_PlayerChat_ChatLine::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerSignoutData_PlayerChat.ChatLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.chat_line_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.player_slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.team_only_) -
        reinterpret_cast<char*>(&_impl_.player_slot_)) + sizeof(_impl_.team_only_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerSignoutData_PlayerChat_ChatLine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 player_slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_slot(&has_bits);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float game_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_game_time(&has_bits);
          _impl_.game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool team_only = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_team_only(&has_bits);
          _impl_.team_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string chat_line = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_chat_line();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgServerSignoutData_PlayerChat.ChatLine.chat_line");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerSignoutData_PlayerChat_ChatLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerSignoutData_PlayerChat.ChatLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 player_slot = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_slot(), target);
  }

  // optional float game_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_game_time(), target);
  }

  // optional bool team_only = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_team_only(), target);
  }

  // optional string chat_line = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_chat_line().data(), static_cast<int>(this->_internal_chat_line().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgServerSignoutData_PlayerChat.ChatLine.chat_line");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_chat_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerSignoutData_PlayerChat.ChatLine)
  return target;
}

size_t CMsgServerSignoutData_PlayerChat_ChatLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerSignoutData_PlayerChat.ChatLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string chat_line = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_chat_line());
    }

    // optional uint32 player_slot = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_slot());
    }

    // optional float game_time = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional bool team_only = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerSignoutData_PlayerChat_ChatLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerSignoutData_PlayerChat_ChatLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerSignoutData_PlayerChat_ChatLine::GetClassData() const { return &_class_data_; }


void CMsgServerSignoutData_PlayerChat_ChatLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerSignoutData_PlayerChat_ChatLine*>(&to_msg);
  auto& from = static_cast<const CMsgServerSignoutData_PlayerChat_ChatLine&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerSignoutData_PlayerChat.ChatLine)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_chat_line(from._internal_chat_line());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.game_time_ = from._impl_.game_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.team_only_ = from._impl_.team_only_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerSignoutData_PlayerChat_ChatLine::CopyFrom(const CMsgServerSignoutData_PlayerChat_ChatLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerSignoutData_PlayerChat.ChatLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerSignoutData_PlayerChat_ChatLine::IsInitialized() const {
  return true;
}

void CMsgServerSignoutData_PlayerChat_ChatLine::InternalSwap(CMsgServerSignoutData_PlayerChat_ChatLine* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chat_line_, lhs_arena,
      &other->_impl_.chat_line_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_PlayerChat_ChatLine, _impl_.team_only_)
      + sizeof(CMsgServerSignoutData_PlayerChat_ChatLine::_impl_.team_only_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_PlayerChat_ChatLine, _impl_.player_slot_)>(
          reinterpret_cast<char*>(&_impl_.player_slot_),
          reinterpret_cast<char*>(&other->_impl_.player_slot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerSignoutData_PlayerChat_ChatLine::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[37]);
}

// ===================================================================

class CMsgServerSignoutData_PlayerChat::_Internal {
 public:
};

CMsgServerSignoutData_PlayerChat::CMsgServerSignoutData_PlayerChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerSignoutData_PlayerChat)
}
CMsgServerSignoutData_PlayerChat::CMsgServerSignoutData_PlayerChat(const CMsgServerSignoutData_PlayerChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerSignoutData_PlayerChat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chat_lines_){from._impl_.chat_lines_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgServerSignoutData_PlayerChat)
}

inline void CMsgServerSignoutData_PlayerChat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chat_lines_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgServerSignoutData_PlayerChat::~CMsgServerSignoutData_PlayerChat() {
  // @@protoc_insertion_point(destructor:CMsgServerSignoutData_PlayerChat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerSignoutData_PlayerChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chat_lines_.~RepeatedPtrField();
}

void CMsgServerSignoutData_PlayerChat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerSignoutData_PlayerChat::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerSignoutData_PlayerChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chat_lines_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerSignoutData_PlayerChat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgServerSignoutData_PlayerChat.ChatLine chat_lines = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chat_lines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerSignoutData_PlayerChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerSignoutData_PlayerChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgServerSignoutData_PlayerChat.ChatLine chat_lines = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chat_lines_size()); i < n; i++) {
    const auto& repfield = this->_internal_chat_lines(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerSignoutData_PlayerChat)
  return target;
}

size_t CMsgServerSignoutData_PlayerChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerSignoutData_PlayerChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerSignoutData_PlayerChat.ChatLine chat_lines = 1;
  total_size += 1UL * this->_internal_chat_lines_size();
  for (const auto& msg : this->_impl_.chat_lines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerSignoutData_PlayerChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerSignoutData_PlayerChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerSignoutData_PlayerChat::GetClassData() const { return &_class_data_; }


void CMsgServerSignoutData_PlayerChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerSignoutData_PlayerChat*>(&to_msg);
  auto& from = static_cast<const CMsgServerSignoutData_PlayerChat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerSignoutData_PlayerChat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chat_lines_.MergeFrom(from._impl_.chat_lines_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerSignoutData_PlayerChat::CopyFrom(const CMsgServerSignoutData_PlayerChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerSignoutData_PlayerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerSignoutData_PlayerChat::IsInitialized() const {
  return true;
}

void CMsgServerSignoutData_PlayerChat::InternalSwap(CMsgServerSignoutData_PlayerChat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chat_lines_.InternalSwap(&other->_impl_.chat_lines_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerSignoutData_PlayerChat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[38]);
}

// ===================================================================

class CMsgServerSignoutData_PenalizedPlayers_Penalty::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerSignoutData_PenalizedPlayers_Penalty>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgServerSignoutData_PenalizedPlayers_Penalty::CMsgServerSignoutData_PenalizedPlayers_Penalty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerSignoutData_PenalizedPlayers.Penalty)
}
CMsgServerSignoutData_PenalizedPlayers_Penalty::CMsgServerSignoutData_PenalizedPlayers_Penalty(const CMsgServerSignoutData_PenalizedPlayers_Penalty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerSignoutData_PenalizedPlayers_Penalty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.match_time_s_){}
    , decltype(_impl_.time_stamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_stamp_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.time_stamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerSignoutData_PenalizedPlayers.Penalty)
}

inline void CMsgServerSignoutData_PenalizedPlayers_Penalty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.reason_){0}
    , decltype(_impl_.match_time_s_){0u}
    , decltype(_impl_.time_stamp_){0u}
  };
}

CMsgServerSignoutData_PenalizedPlayers_Penalty::~CMsgServerSignoutData_PenalizedPlayers_Penalty() {
  // @@protoc_insertion_point(destructor:CMsgServerSignoutData_PenalizedPlayers.Penalty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerSignoutData_PenalizedPlayers_Penalty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerSignoutData_PenalizedPlayers_Penalty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerSignoutData_PenalizedPlayers_Penalty::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerSignoutData_PenalizedPlayers.Penalty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.time_stamp_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.time_stamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerSignoutData_PenalizedPlayers_Penalty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgServerSignoutData_PenalizedPlayers.EPenaltyReason reason = 2 [default = k_EPenaltyReason_Abandon];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason_IsValid(val))) {
            _internal_set_reason(static_cast<::CMsgServerSignoutData_PenalizedPlayers_EPenaltyReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 match_time_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_match_time_s(&has_bits);
          _impl_.match_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_stamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_time_stamp(&has_bits);
          _impl_.time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerSignoutData_PenalizedPlayers_Penalty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerSignoutData_PenalizedPlayers.Penalty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional .CMsgServerSignoutData_PenalizedPlayers.EPenaltyReason reason = 2 [default = k_EPenaltyReason_Abandon];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reason(), target);
  }

  // optional uint32 match_time_s = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_match_time_s(), target);
  }

  // optional uint32 time_stamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_time_stamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerSignoutData_PenalizedPlayers.Penalty)
  return target;
}

size_t CMsgServerSignoutData_PenalizedPlayers_Penalty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerSignoutData_PenalizedPlayers.Penalty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional .CMsgServerSignoutData_PenalizedPlayers.EPenaltyReason reason = 2 [default = k_EPenaltyReason_Abandon];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_reason());
    }

    // optional uint32 match_time_s = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_match_time_s());
    }

    // optional uint32 time_stamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time_stamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerSignoutData_PenalizedPlayers_Penalty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerSignoutData_PenalizedPlayers_Penalty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerSignoutData_PenalizedPlayers_Penalty::GetClassData() const { return &_class_data_; }


void CMsgServerSignoutData_PenalizedPlayers_Penalty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerSignoutData_PenalizedPlayers_Penalty*>(&to_msg);
  auto& from = static_cast<const CMsgServerSignoutData_PenalizedPlayers_Penalty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerSignoutData_PenalizedPlayers.Penalty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.reason_ = from._impl_.reason_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.match_time_s_ = from._impl_.match_time_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.time_stamp_ = from._impl_.time_stamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerSignoutData_PenalizedPlayers_Penalty::CopyFrom(const CMsgServerSignoutData_PenalizedPlayers_Penalty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerSignoutData_PenalizedPlayers.Penalty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerSignoutData_PenalizedPlayers_Penalty::IsInitialized() const {
  return true;
}

void CMsgServerSignoutData_PenalizedPlayers_Penalty::InternalSwap(CMsgServerSignoutData_PenalizedPlayers_Penalty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_PenalizedPlayers_Penalty, _impl_.time_stamp_)
      + sizeof(CMsgServerSignoutData_PenalizedPlayers_Penalty::_impl_.time_stamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerSignoutData_PenalizedPlayers_Penalty, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerSignoutData_PenalizedPlayers_Penalty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[39]);
}

// ===================================================================

class CMsgServerSignoutData_PenalizedPlayers::_Internal {
 public:
};

CMsgServerSignoutData_PenalizedPlayers::CMsgServerSignoutData_PenalizedPlayers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerSignoutData_PenalizedPlayers)
}
CMsgServerSignoutData_PenalizedPlayers::CMsgServerSignoutData_PenalizedPlayers(const CMsgServerSignoutData_PenalizedPlayers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerSignoutData_PenalizedPlayers* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.penalized_players_){from._impl_.penalized_players_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgServerSignoutData_PenalizedPlayers)
}

inline void CMsgServerSignoutData_PenalizedPlayers::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.penalized_players_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgServerSignoutData_PenalizedPlayers::~CMsgServerSignoutData_PenalizedPlayers() {
  // @@protoc_insertion_point(destructor:CMsgServerSignoutData_PenalizedPlayers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerSignoutData_PenalizedPlayers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.penalized_players_.~RepeatedPtrField();
}

void CMsgServerSignoutData_PenalizedPlayers::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerSignoutData_PenalizedPlayers::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerSignoutData_PenalizedPlayers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.penalized_players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerSignoutData_PenalizedPlayers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgServerSignoutData_PenalizedPlayers.Penalty penalized_players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_penalized_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerSignoutData_PenalizedPlayers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerSignoutData_PenalizedPlayers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgServerSignoutData_PenalizedPlayers.Penalty penalized_players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_penalized_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_penalized_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerSignoutData_PenalizedPlayers)
  return target;
}

size_t CMsgServerSignoutData_PenalizedPlayers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerSignoutData_PenalizedPlayers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerSignoutData_PenalizedPlayers.Penalty penalized_players = 1;
  total_size += 1UL * this->_internal_penalized_players_size();
  for (const auto& msg : this->_impl_.penalized_players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerSignoutData_PenalizedPlayers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerSignoutData_PenalizedPlayers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerSignoutData_PenalizedPlayers::GetClassData() const { return &_class_data_; }


void CMsgServerSignoutData_PenalizedPlayers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerSignoutData_PenalizedPlayers*>(&to_msg);
  auto& from = static_cast<const CMsgServerSignoutData_PenalizedPlayers&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerSignoutData_PenalizedPlayers)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.penalized_players_.MergeFrom(from._impl_.penalized_players_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerSignoutData_PenalizedPlayers::CopyFrom(const CMsgServerSignoutData_PenalizedPlayers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerSignoutData_PenalizedPlayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerSignoutData_PenalizedPlayers::IsInitialized() const {
  return true;
}

void CMsgServerSignoutData_PenalizedPlayers::InternalSwap(CMsgServerSignoutData_PenalizedPlayers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.penalized_players_.InternalSwap(&other->_impl_.penalized_players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerSignoutData_PenalizedPlayers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[40]);
}

// ===================================================================

class CMsgMatchData_PlayerItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchData_PlayerItem>()._impl_._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_upgrade_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sold_time_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_imbued_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgMatchData_PlayerItem::CMsgMatchData_PlayerItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchData.PlayerItem)
}
CMsgMatchData_PlayerItem::CMsgMatchData_PlayerItem(const CMsgMatchData_PlayerItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchData_PlayerItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.game_time_s_){}
    , decltype(_impl_.upgrade_id_){}
    , decltype(_impl_.sold_time_s_){}
    , decltype(_impl_.flags_){}
    , decltype(_impl_.imbued_ability_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.imbued_ability_id_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.imbued_ability_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchData.PlayerItem)
}

inline void CMsgMatchData_PlayerItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){0u}
    , decltype(_impl_.game_time_s_){0u}
    , decltype(_impl_.upgrade_id_){0u}
    , decltype(_impl_.sold_time_s_){0u}
    , decltype(_impl_.flags_){0u}
    , decltype(_impl_.imbued_ability_id_){0u}
  };
}

CMsgMatchData_PlayerItem::~CMsgMatchData_PlayerItem() {
  // @@protoc_insertion_point(destructor:CMsgMatchData.PlayerItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchData_PlayerItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgMatchData_PlayerItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchData_PlayerItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchData.PlayerItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.imbued_ability_id_) -
        reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.imbued_ability_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchData_PlayerItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_time_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_game_time_s(&has_bits);
          _impl_.game_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 upgrade_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_upgrade_id(&has_bits);
          _impl_.upgrade_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sold_time_s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_sold_time_s(&has_bits);
          _impl_.sold_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 imbued_ability_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_imbued_ability_id(&has_bits);
          _impl_.imbued_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchData_PlayerItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchData.PlayerItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 game_time_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_game_time_s(), target);
  }

  // optional uint32 upgrade_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_upgrade_id(), target);
  }

  // optional uint32 sold_time_s = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sold_time_s(), target);
  }

  // optional uint32 flags = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_flags(), target);
  }

  // optional uint32 imbued_ability_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_imbued_ability_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchData.PlayerItem)
  return target;
}

size_t CMsgMatchData_PlayerItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchData.PlayerItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_id());
    }

    // optional uint32 game_time_s = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_time_s());
    }

    // optional uint32 upgrade_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_upgrade_id());
    }

    // optional uint32 sold_time_s = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sold_time_s());
    }

    // optional uint32 flags = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

    // optional uint32 imbued_ability_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_imbued_ability_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchData_PlayerItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchData_PlayerItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchData_PlayerItem::GetClassData() const { return &_class_data_; }


void CMsgMatchData_PlayerItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchData_PlayerItem*>(&to_msg);
  auto& from = static_cast<const CMsgMatchData_PlayerItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchData.PlayerItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.game_time_s_ = from._impl_.game_time_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.upgrade_id_ = from._impl_.upgrade_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sold_time_s_ = from._impl_.sold_time_s_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.imbued_ability_id_ = from._impl_.imbued_ability_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchData_PlayerItem::CopyFrom(const CMsgMatchData_PlayerItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchData.PlayerItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchData_PlayerItem::IsInitialized() const {
  return true;
}

void CMsgMatchData_PlayerItem::InternalSwap(CMsgMatchData_PlayerItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchData_PlayerItem, _impl_.imbued_ability_id_)
      + sizeof(CMsgMatchData_PlayerItem::_impl_.imbued_ability_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchData_PlayerItem, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchData_PlayerItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[41]);
}

// ===================================================================

class CMsgMatchData_PlayerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchData_PlayerInfo>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hero_mmr_with_uncertainty(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_player_mmr(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_player_uncertainty(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_net_worth(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_hero_mmr(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_gpm_10min(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_gpm_15min(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_gpm_20min(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_gpm_25min(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_gpm_30min(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_gpm_35min(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_gpm_end(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_last_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_denies(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_ability_points(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_assigned_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_party_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_ability_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_bullet_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_hero_bullets_hit(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_hero_bullets_hit_crit(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_player_healing(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_hero_bullets_fired(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_hero_incoming_bullets_fired(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_hero_incoming_bullets_hit(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_hero_incoming_bullets_crit(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_time_dead_s(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_player_bullet_damage(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_player_ability_damage(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_player_melee_damage(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_abandon_match_time_s(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_abandon_time_stamp(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_trooper_kill_excluded(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_hero_bullets_lucky_shots(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_hero_build_id(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
};

CMsgMatchData_PlayerInfo::CMsgMatchData_PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchData.PlayerInfo)
}
CMsgMatchData_PlayerInfo::CMsgMatchData_PlayerInfo(const CMsgMatchData_PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchData_PlayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.team_){}
    , decltype(_impl_.player_slot_){}
    , decltype(_impl_.hero_mmr_with_uncertainty_){}
    , decltype(_impl_.player_mmr_){}
    , decltype(_impl_.player_uncertainty_){}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.kills_){}
    , decltype(_impl_.deaths_){}
    , decltype(_impl_.net_worth_){}
    , decltype(_impl_.assists_){}
    , decltype(_impl_.hero_mmr_){}
    , decltype(_impl_.gpm_10min_){}
    , decltype(_impl_.gpm_15min_){}
    , decltype(_impl_.gpm_20min_){}
    , decltype(_impl_.gpm_25min_){}
    , decltype(_impl_.gpm_30min_){}
    , decltype(_impl_.gpm_35min_){}
    , decltype(_impl_.gpm_end_){}
    , decltype(_impl_.last_hits_){}
    , decltype(_impl_.denies_){}
    , decltype(_impl_.ability_points_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.assigned_lane_){}
    , decltype(_impl_.party_index_){}
    , decltype(_impl_.platform_){}
    , decltype(_impl_.ability_damage_){}
    , decltype(_impl_.bullet_damage_){}
    , decltype(_impl_.hero_bullets_hit_){}
    , decltype(_impl_.hero_bullets_hit_crit_){}
    , decltype(_impl_.player_healing_){}
    , decltype(_impl_.hero_bullets_fired_){}
    , decltype(_impl_.hero_incoming_bullets_fired_){}
    , decltype(_impl_.hero_incoming_bullets_hit_){}
    , decltype(_impl_.hero_incoming_bullets_crit_){}
    , decltype(_impl_.time_dead_s_){}
    , decltype(_impl_.player_bullet_damage_){}
    , decltype(_impl_.player_ability_damage_){}
    , decltype(_impl_.player_melee_damage_){}
    , decltype(_impl_.abandon_match_time_s_){}
    , decltype(_impl_.abandon_time_stamp_){}
    , decltype(_impl_.trooper_kill_excluded_){}
    , decltype(_impl_.hero_bullets_lucky_shots_){}
    , decltype(_impl_.hero_build_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hero_build_id_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.hero_build_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchData.PlayerInfo)
}

inline void CMsgMatchData_PlayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_){arena}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.team_){0}
    , decltype(_impl_.player_slot_){0u}
    , decltype(_impl_.hero_mmr_with_uncertainty_){0u}
    , decltype(_impl_.player_mmr_){0u}
    , decltype(_impl_.player_uncertainty_){0u}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.kills_){0u}
    , decltype(_impl_.deaths_){0u}
    , decltype(_impl_.net_worth_){0u}
    , decltype(_impl_.assists_){0u}
    , decltype(_impl_.hero_mmr_){0u}
    , decltype(_impl_.gpm_10min_){0u}
    , decltype(_impl_.gpm_15min_){0u}
    , decltype(_impl_.gpm_20min_){0u}
    , decltype(_impl_.gpm_25min_){0u}
    , decltype(_impl_.gpm_30min_){0u}
    , decltype(_impl_.gpm_35min_){0u}
    , decltype(_impl_.gpm_end_){0u}
    , decltype(_impl_.last_hits_){0u}
    , decltype(_impl_.denies_){0u}
    , decltype(_impl_.ability_points_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.assigned_lane_){0u}
    , decltype(_impl_.party_index_){0u}
    , decltype(_impl_.platform_){0}
    , decltype(_impl_.ability_damage_){0u}
    , decltype(_impl_.bullet_damage_){0u}
    , decltype(_impl_.hero_bullets_hit_){0u}
    , decltype(_impl_.hero_bullets_hit_crit_){0u}
    , decltype(_impl_.player_healing_){0u}
    , decltype(_impl_.hero_bullets_fired_){0u}
    , decltype(_impl_.hero_incoming_bullets_fired_){0u}
    , decltype(_impl_.hero_incoming_bullets_hit_){0u}
    , decltype(_impl_.hero_incoming_bullets_crit_){0u}
    , decltype(_impl_.time_dead_s_){0u}
    , decltype(_impl_.player_bullet_damage_){0u}
    , decltype(_impl_.player_ability_damage_){0u}
    , decltype(_impl_.player_melee_damage_){0u}
    , decltype(_impl_.abandon_match_time_s_){0u}
    , decltype(_impl_.abandon_time_stamp_){0u}
    , decltype(_impl_.trooper_kill_excluded_){0u}
    , decltype(_impl_.hero_bullets_lucky_shots_){0u}
    , decltype(_impl_.hero_build_id_){0u}
  };
}

CMsgMatchData_PlayerInfo::~CMsgMatchData_PlayerInfo() {
  // @@protoc_insertion_point(destructor:CMsgMatchData.PlayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchData_PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void CMsgMatchData_PlayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchData_PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchData.PlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.kills_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.kills_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.deaths_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gpm_25min_) -
        reinterpret_cast<char*>(&_impl_.deaths_)) + sizeof(_impl_.gpm_25min_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.gpm_30min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.assigned_lane_) -
        reinterpret_cast<char*>(&_impl_.gpm_30min_)) + sizeof(_impl_.assigned_lane_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.party_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.hero_bullets_fired_) -
        reinterpret_cast<char*>(&_impl_.party_index_)) + sizeof(_impl_.hero_bullets_fired_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.hero_incoming_bullets_fired_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.abandon_match_time_s_) -
        reinterpret_cast<char*>(&_impl_.hero_incoming_bullets_fired_)) + sizeof(_impl_.abandon_match_time_s_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.abandon_time_stamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.hero_build_id_) -
        reinterpret_cast<char*>(&_impl_.abandon_time_stamp_)) + sizeof(_impl_.hero_build_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchData_PlayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&_impl_._has_bits_);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelLobbyTeam team = 2 [default = k_ECitadelLobbyTeam_Team0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelLobbyTeam_IsValid(val))) {
            _internal_set_team(static_cast<::ECitadelLobbyTeam>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_player_slot(&_impl_._has_bits_);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_mmr_with_uncertainty = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_hero_mmr_with_uncertainty(&_impl_._has_bits_);
          _impl_.hero_mmr_with_uncertainty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_mmr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_player_mmr(&_impl_._has_bits_);
          _impl_.player_mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_uncertainty = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_player_uncertainty(&_impl_._has_bits_);
          _impl_.player_uncertainty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_hero_id(&_impl_._has_bits_);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kills = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_kills(&_impl_._has_bits_);
          _impl_.kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deaths = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_deaths(&_impl_._has_bits_);
          _impl_.deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 net_worth = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_net_worth(&_impl_._has_bits_);
          _impl_.net_worth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 assists = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_assists(&_impl_._has_bits_);
          _impl_.assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_mmr = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_hero_mmr(&_impl_._has_bits_);
          _impl_.hero_mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgMatchData.PlayerItem items = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gpm_10min = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_gpm_10min(&_impl_._has_bits_);
          _impl_.gpm_10min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gpm_15min = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_gpm_15min(&_impl_._has_bits_);
          _impl_.gpm_15min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gpm_20min = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_gpm_20min(&_impl_._has_bits_);
          _impl_.gpm_20min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gpm_25min = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_gpm_25min(&_impl_._has_bits_);
          _impl_.gpm_25min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gpm_30min = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_gpm_30min(&_impl_._has_bits_);
          _impl_.gpm_30min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gpm_35min = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_gpm_35min(&_impl_._has_bits_);
          _impl_.gpm_35min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gpm_end = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_gpm_end(&_impl_._has_bits_);
          _impl_.gpm_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_hits = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_last_hits(&_impl_._has_bits_);
          _impl_.last_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 denies = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_denies(&_impl_._has_bits_);
          _impl_.denies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_points = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_ability_points(&_impl_._has_bits_);
          _impl_.ability_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 level = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_level(&_impl_._has_bits_);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 assigned_lane = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_assigned_lane(&_impl_._has_bits_);
          _impl_.assigned_lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 party_index = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_party_index(&_impl_._has_bits_);
          _impl_.party_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EGCPlatform platform = 27 [default = k_eGCPlatform_None];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGCPlatform_IsValid(val))) {
            _internal_set_platform(static_cast<::EGCPlatform>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(27, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_damage = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_ability_damage(&_impl_._has_bits_);
          _impl_.ability_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bullet_damage = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_bullet_damage(&_impl_._has_bits_);
          _impl_.bullet_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_bullets_hit = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_hero_bullets_hit(&_impl_._has_bits_);
          _impl_.hero_bullets_hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_bullets_hit_crit = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_hero_bullets_hit_crit(&_impl_._has_bits_);
          _impl_.hero_bullets_hit_crit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_healing = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_player_healing(&_impl_._has_bits_);
          _impl_.player_healing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_bullets_fired = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hero_bullets_fired(&_impl_._has_bits_);
          _impl_.hero_bullets_fired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_incoming_bullets_fired = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hero_incoming_bullets_fired(&_impl_._has_bits_);
          _impl_.hero_incoming_bullets_fired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_incoming_bullets_hit = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_hero_incoming_bullets_hit(&_impl_._has_bits_);
          _impl_.hero_incoming_bullets_hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_incoming_bullets_crit = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_hero_incoming_bullets_crit(&_impl_._has_bits_);
          _impl_.hero_incoming_bullets_crit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_dead_s = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_time_dead_s(&_impl_._has_bits_);
          _impl_.time_dead_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_bullet_damage = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_player_bullet_damage(&_impl_._has_bits_);
          _impl_.player_bullet_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_ability_damage = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_player_ability_damage(&_impl_._has_bits_);
          _impl_.player_ability_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_melee_damage = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_player_melee_damage(&_impl_._has_bits_);
          _impl_.player_melee_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 abandon_match_time_s = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_abandon_match_time_s(&_impl_._has_bits_);
          _impl_.abandon_match_time_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 abandon_time_stamp = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_abandon_time_stamp(&_impl_._has_bits_);
          _impl_.abandon_time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 trooper_kill_excluded = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_trooper_kill_excluded(&_impl_._has_bits_);
          _impl_.trooper_kill_excluded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_bullets_lucky_shots = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_hero_bullets_lucky_shots(&_impl_._has_bits_);
          _impl_.hero_bullets_lucky_shots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_build_id = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_hero_build_id(&_impl_._has_bits_);
          _impl_.hero_build_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchData_PlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchData.PlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional .ECitadelLobbyTeam team = 2 [default = k_ECitadelLobbyTeam_Team0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_team(), target);
  }

  // optional uint32 player_slot = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_player_slot(), target);
  }

  // optional uint32 hero_mmr_with_uncertainty = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hero_mmr_with_uncertainty(), target);
  }

  // optional uint32 player_mmr = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_player_mmr(), target);
  }

  // optional uint32 player_uncertainty = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_player_uncertainty(), target);
  }

  // optional uint32 hero_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_hero_id(), target);
  }

  // optional uint32 kills = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_deaths(), target);
  }

  // optional uint32 net_worth = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_net_worth(), target);
  }

  // optional uint32 assists = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_assists(), target);
  }

  // optional uint32 hero_mmr = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_hero_mmr(), target);
  }

  // repeated .CMsgMatchData.PlayerItem items = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 gpm_10min = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_gpm_10min(), target);
  }

  // optional uint32 gpm_15min = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_gpm_15min(), target);
  }

  // optional uint32 gpm_20min = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_gpm_20min(), target);
  }

  // optional uint32 gpm_25min = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_gpm_25min(), target);
  }

  // optional uint32 gpm_30min = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_gpm_30min(), target);
  }

  // optional uint32 gpm_35min = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_gpm_35min(), target);
  }

  // optional uint32 gpm_end = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_gpm_end(), target);
  }

  // optional uint32 last_hits = 21;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_last_hits(), target);
  }

  // optional uint32 denies = 22;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_denies(), target);
  }

  // optional uint32 ability_points = 23;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_ability_points(), target);
  }

  // optional uint32 level = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_level(), target);
  }

  // optional uint32 assigned_lane = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_assigned_lane(), target);
  }

  // optional uint32 party_index = 26;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_party_index(), target);
  }

  // optional .EGCPlatform platform = 27 [default = k_eGCPlatform_None];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      27, this->_internal_platform(), target);
  }

  // optional uint32 ability_damage = 28;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_ability_damage(), target);
  }

  // optional uint32 bullet_damage = 29;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(29, this->_internal_bullet_damage(), target);
  }

  // optional uint32 hero_bullets_hit = 30;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(30, this->_internal_hero_bullets_hit(), target);
  }

  // optional uint32 hero_bullets_hit_crit = 31;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(31, this->_internal_hero_bullets_hit_crit(), target);
  }

  // optional uint32 player_healing = 32;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(32, this->_internal_player_healing(), target);
  }

  // optional uint32 hero_bullets_fired = 33;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(33, this->_internal_hero_bullets_fired(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 hero_incoming_bullets_fired = 34;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(34, this->_internal_hero_incoming_bullets_fired(), target);
  }

  // optional uint32 hero_incoming_bullets_hit = 35;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(35, this->_internal_hero_incoming_bullets_hit(), target);
  }

  // optional uint32 hero_incoming_bullets_crit = 36;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(36, this->_internal_hero_incoming_bullets_crit(), target);
  }

  // optional uint32 time_dead_s = 37;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(37, this->_internal_time_dead_s(), target);
  }

  // optional uint32 player_bullet_damage = 38;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(38, this->_internal_player_bullet_damage(), target);
  }

  // optional uint32 player_ability_damage = 39;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(39, this->_internal_player_ability_damage(), target);
  }

  // optional uint32 player_melee_damage = 40;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(40, this->_internal_player_melee_damage(), target);
  }

  // optional uint32 abandon_match_time_s = 41;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(41, this->_internal_abandon_match_time_s(), target);
  }

  // optional uint32 abandon_time_stamp = 42;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(42, this->_internal_abandon_time_stamp(), target);
  }

  // optional uint32 trooper_kill_excluded = 43;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(43, this->_internal_trooper_kill_excluded(), target);
  }

  // optional uint32 hero_bullets_lucky_shots = 44;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(44, this->_internal_hero_bullets_lucky_shots(), target);
  }

  // optional uint32 hero_build_id = 45;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(45, this->_internal_hero_build_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchData.PlayerInfo)
  return target;
}

size_t CMsgMatchData_PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchData.PlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMatchData.PlayerItem items = 13;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional .ECitadelLobbyTeam team = 2 [default = k_ECitadelLobbyTeam_Team0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_team());
    }

    // optional uint32 player_slot = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_slot());
    }

    // optional uint32 hero_mmr_with_uncertainty = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_mmr_with_uncertainty());
    }

    // optional uint32 player_mmr = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_mmr());
    }

    // optional uint32 player_uncertainty = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_uncertainty());
    }

    // optional uint32 hero_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 kills = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kills());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 deaths = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deaths());
    }

    // optional uint32 net_worth = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_net_worth());
    }

    // optional uint32 assists = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_assists());
    }

    // optional uint32 hero_mmr = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_mmr());
    }

    // optional uint32 gpm_10min = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gpm_10min());
    }

    // optional uint32 gpm_15min = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gpm_15min());
    }

    // optional uint32 gpm_20min = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_gpm_20min());
    }

    // optional uint32 gpm_25min = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_gpm_25min());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 gpm_30min = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_gpm_30min());
    }

    // optional uint32 gpm_35min = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_gpm_35min());
    }

    // optional uint32 gpm_end = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_gpm_end());
    }

    // optional uint32 last_hits = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_last_hits());
    }

    // optional uint32 denies = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_denies());
    }

    // optional uint32 ability_points = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_ability_points());
    }

    // optional uint32 level = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 assigned_lane = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_assigned_lane());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 party_index = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_party_index());
    }

    // optional .EGCPlatform platform = 27 [default = k_eGCPlatform_None];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_platform());
    }

    // optional uint32 ability_damage = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_ability_damage());
    }

    // optional uint32 bullet_damage = 29;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_bullet_damage());
    }

    // optional uint32 hero_bullets_hit = 30;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_hero_bullets_hit());
    }

    // optional uint32 hero_bullets_hit_crit = 31;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_hero_bullets_hit_crit());
    }

    // optional uint32 player_healing = 32;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_player_healing());
    }

    // optional uint32 hero_bullets_fired = 33;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_hero_bullets_fired());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 hero_incoming_bullets_fired = 34;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_hero_incoming_bullets_fired());
    }

    // optional uint32 hero_incoming_bullets_hit = 35;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_hero_incoming_bullets_hit());
    }

    // optional uint32 hero_incoming_bullets_crit = 36;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_hero_incoming_bullets_crit());
    }

    // optional uint32 time_dead_s = 37;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_time_dead_s());
    }

    // optional uint32 player_bullet_damage = 38;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_player_bullet_damage());
    }

    // optional uint32 player_ability_damage = 39;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_player_ability_damage());
    }

    // optional uint32 player_melee_damage = 40;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_player_melee_damage());
    }

    // optional uint32 abandon_match_time_s = 41;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_abandon_match_time_s());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 abandon_time_stamp = 42;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_abandon_time_stamp());
    }

    // optional uint32 trooper_kill_excluded = 43;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_trooper_kill_excluded());
    }

    // optional uint32 hero_bullets_lucky_shots = 44;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_hero_bullets_lucky_shots());
    }

    // optional uint32 hero_build_id = 45;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_hero_build_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchData_PlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchData_PlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchData_PlayerInfo::GetClassData() const { return &_class_data_; }


void CMsgMatchData_PlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchData_PlayerInfo*>(&to_msg);
  auto& from = static_cast<const CMsgMatchData_PlayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchData.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.team_ = from._impl_.team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.hero_mmr_with_uncertainty_ = from._impl_.hero_mmr_with_uncertainty_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.player_mmr_ = from._impl_.player_mmr_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.player_uncertainty_ = from._impl_.player_uncertainty_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.kills_ = from._impl_.kills_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.deaths_ = from._impl_.deaths_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.net_worth_ = from._impl_.net_worth_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.assists_ = from._impl_.assists_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.hero_mmr_ = from._impl_.hero_mmr_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.gpm_10min_ = from._impl_.gpm_10min_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.gpm_15min_ = from._impl_.gpm_15min_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.gpm_20min_ = from._impl_.gpm_20min_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.gpm_25min_ = from._impl_.gpm_25min_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.gpm_30min_ = from._impl_.gpm_30min_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.gpm_35min_ = from._impl_.gpm_35min_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.gpm_end_ = from._impl_.gpm_end_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.last_hits_ = from._impl_.last_hits_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.denies_ = from._impl_.denies_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.ability_points_ = from._impl_.ability_points_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.assigned_lane_ = from._impl_.assigned_lane_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.party_index_ = from._impl_.party_index_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.platform_ = from._impl_.platform_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.ability_damage_ = from._impl_.ability_damage_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.bullet_damage_ = from._impl_.bullet_damage_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.hero_bullets_hit_ = from._impl_.hero_bullets_hit_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.hero_bullets_hit_crit_ = from._impl_.hero_bullets_hit_crit_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.player_healing_ = from._impl_.player_healing_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.hero_bullets_fired_ = from._impl_.hero_bullets_fired_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.hero_incoming_bullets_fired_ = from._impl_.hero_incoming_bullets_fired_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.hero_incoming_bullets_hit_ = from._impl_.hero_incoming_bullets_hit_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.hero_incoming_bullets_crit_ = from._impl_.hero_incoming_bullets_crit_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.time_dead_s_ = from._impl_.time_dead_s_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.player_bullet_damage_ = from._impl_.player_bullet_damage_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.player_ability_damage_ = from._impl_.player_ability_damage_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.player_melee_damage_ = from._impl_.player_melee_damage_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.abandon_match_time_s_ = from._impl_.abandon_match_time_s_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.abandon_time_stamp_ = from._impl_.abandon_time_stamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.trooper_kill_excluded_ = from._impl_.trooper_kill_excluded_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.hero_bullets_lucky_shots_ = from._impl_.hero_bullets_lucky_shots_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.hero_build_id_ = from._impl_.hero_build_id_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchData_PlayerInfo::CopyFrom(const CMsgMatchData_PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchData.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchData_PlayerInfo::IsInitialized() const {
  return true;
}

void CMsgMatchData_PlayerInfo::InternalSwap(CMsgMatchData_PlayerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchData_PlayerInfo, _impl_.hero_build_id_)
      + sizeof(CMsgMatchData_PlayerInfo::_impl_.hero_build_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchData_PlayerInfo, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchData_PlayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[42]);
}

// ===================================================================

class CMsgMatchData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchData>()._impl_._has_bits_);
  static void set_has_match_duration_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_winning_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_objectives_mask_legacy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_server_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_match_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_objectives_mask_team0(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_objectives_mask_team1(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_match_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_stomp_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_safe_to_abandon(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_team_abandon(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_new_player_pool(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_low_pri_pool(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

CMsgMatchData::CMsgMatchData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchData)
}
CMsgMatchData::CMsgMatchData(const CMsgMatchData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.match_duration_s_){}
    , decltype(_impl_.end_reason_){}
    , decltype(_impl_.winning_team_){}
    , decltype(_impl_.objectives_mask_legacy_){}
    , decltype(_impl_.server_version_){}
    , decltype(_impl_.game_mode_){}
    , decltype(_impl_.objectives_mask_team0_){}
    , decltype(_impl_.match_mode_){}
    , decltype(_impl_.match_end_time_){}
    , decltype(_impl_.objectives_mask_team1_){}
    , decltype(_impl_.stomp_score_){}
    , decltype(_impl_.safe_to_abandon_){}
    , decltype(_impl_.team_abandon_){}
    , decltype(_impl_.new_player_pool_){}
    , decltype(_impl_.low_pri_pool_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.match_duration_s_, &from._impl_.match_duration_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.low_pri_pool_) -
    reinterpret_cast<char*>(&_impl_.match_duration_s_)) + sizeof(_impl_.low_pri_pool_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchData)
}

inline void CMsgMatchData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){arena}
    , decltype(_impl_.match_duration_s_){0u}
    , decltype(_impl_.end_reason_){0}
    , decltype(_impl_.winning_team_){0}
    , decltype(_impl_.objectives_mask_legacy_){0u}
    , decltype(_impl_.server_version_){0u}
    , decltype(_impl_.game_mode_){0}
    , decltype(_impl_.objectives_mask_team0_){uint64_t{0u}}
    , decltype(_impl_.match_mode_){0}
    , decltype(_impl_.match_end_time_){0u}
    , decltype(_impl_.objectives_mask_team1_){uint64_t{0u}}
    , decltype(_impl_.stomp_score_){0}
    , decltype(_impl_.safe_to_abandon_){false}
    , decltype(_impl_.team_abandon_){false}
    , decltype(_impl_.new_player_pool_){false}
    , decltype(_impl_.low_pri_pool_){false}
  };
}

CMsgMatchData::~CMsgMatchData() {
  // @@protoc_insertion_point(destructor:CMsgMatchData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void CMsgMatchData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.match_duration_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.match_mode_) -
        reinterpret_cast<char*>(&_impl_.match_duration_s_)) + sizeof(_impl_.match_mode_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.match_end_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.low_pri_pool_) -
        reinterpret_cast<char*>(&_impl_.match_end_time_)) + sizeof(_impl_.low_pri_pool_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 match_duration_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_duration_s(&has_bits);
          _impl_.match_duration_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgMatchData.EEndReason end_reason = 2 [default = k_EEndReason_TeamWin];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgMatchData_EEndReason_IsValid(val))) {
            _internal_set_end_reason(static_cast<::CMsgMatchData_EEndReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelLobbyTeam winning_team = 3 [default = k_ECitadelLobbyTeam_Team0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelLobbyTeam_IsValid(val))) {
            _internal_set_winning_team(static_cast<::ECitadelLobbyTeam>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgMatchData.PlayerInfo players = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 objectives_mask_legacy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_objectives_mask_legacy(&has_bits);
          _impl_.objectives_mask_legacy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_server_version(&has_bits);
          _impl_.server_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelGameMode game_mode = 7 [default = k_ECitadelGameMode_Invalid];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelGameMode_IsValid(val))) {
            _internal_set_game_mode(static_cast<::ECitadelGameMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelMatchMode match_mode = 8 [default = k_ECitadelMatchMode_Invalid];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelMatchMode_IsValid(val))) {
            _internal_set_match_mode(static_cast<::ECitadelMatchMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 objectives_mask_team0 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_objectives_mask_team0(&has_bits);
          _impl_.objectives_mask_team0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 objectives_mask_team1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_objectives_mask_team1(&has_bits);
          _impl_.objectives_mask_team1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 match_end_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_match_end_time(&has_bits);
          _impl_.match_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float stomp_score = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_stomp_score(&has_bits);
          _impl_.stomp_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool safe_to_abandon = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_safe_to_abandon(&has_bits);
          _impl_.safe_to_abandon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool team_abandon = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_team_abandon(&has_bits);
          _impl_.team_abandon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool new_player_pool = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_new_player_pool(&has_bits);
          _impl_.new_player_pool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool low_pri_pool = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_low_pri_pool(&has_bits);
          _impl_.low_pri_pool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 match_duration_s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_match_duration_s(), target);
  }

  // optional .CMsgMatchData.EEndReason end_reason = 2 [default = k_EEndReason_TeamWin];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_end_reason(), target);
  }

  // optional .ECitadelLobbyTeam winning_team = 3 [default = k_ECitadelLobbyTeam_Team0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_winning_team(), target);
  }

  // repeated .CMsgMatchData.PlayerInfo players = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 objectives_mask_legacy = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_objectives_mask_legacy(), target);
  }

  // optional uint32 server_version = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_server_version(), target);
  }

  // optional .ECitadelGameMode game_mode = 7 [default = k_ECitadelGameMode_Invalid];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_game_mode(), target);
  }

  // optional .ECitadelMatchMode match_mode = 8 [default = k_ECitadelMatchMode_Invalid];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_match_mode(), target);
  }

  // optional uint64 objectives_mask_team0 = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_objectives_mask_team0(), target);
  }

  // optional uint64 objectives_mask_team1 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_objectives_mask_team1(), target);
  }

  // optional uint32 match_end_time = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_match_end_time(), target);
  }

  // optional float stomp_score = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_stomp_score(), target);
  }

  // optional bool safe_to_abandon = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_safe_to_abandon(), target);
  }

  // optional bool team_abandon = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_team_abandon(), target);
  }

  // optional bool new_player_pool = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_new_player_pool(), target);
  }

  // optional bool low_pri_pool = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_low_pri_pool(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchData)
  return target;
}

size_t CMsgMatchData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMatchData.PlayerInfo players = 4;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 match_duration_s = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_match_duration_s());
    }

    // optional .CMsgMatchData.EEndReason end_reason = 2 [default = k_EEndReason_TeamWin];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_end_reason());
    }

    // optional .ECitadelLobbyTeam winning_team = 3 [default = k_ECitadelLobbyTeam_Team0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_winning_team());
    }

    // optional uint32 objectives_mask_legacy = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_objectives_mask_legacy());
    }

    // optional uint32 server_version = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_version());
    }

    // optional .ECitadelGameMode game_mode = 7 [default = k_ECitadelGameMode_Invalid];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_game_mode());
    }

    // optional uint64 objectives_mask_team0 = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_objectives_mask_team0());
    }

    // optional .ECitadelMatchMode match_mode = 8 [default = k_ECitadelMatchMode_Invalid];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_match_mode());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 match_end_time = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_match_end_time());
    }

    // optional uint64 objectives_mask_team1 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_objectives_mask_team1());
    }

    // optional float stomp_score = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional bool safe_to_abandon = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool team_abandon = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool new_player_pool = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool low_pri_pool = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchData::GetClassData() const { return &_class_data_; }


void CMsgMatchData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchData*>(&to_msg);
  auto& from = static_cast<const CMsgMatchData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.match_duration_s_ = from._impl_.match_duration_s_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.end_reason_ = from._impl_.end_reason_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.winning_team_ = from._impl_.winning_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.objectives_mask_legacy_ = from._impl_.objectives_mask_legacy_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.server_version_ = from._impl_.server_version_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.game_mode_ = from._impl_.game_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.objectives_mask_team0_ = from._impl_.objectives_mask_team0_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.match_mode_ = from._impl_.match_mode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.match_end_time_ = from._impl_.match_end_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.objectives_mask_team1_ = from._impl_.objectives_mask_team1_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.stomp_score_ = from._impl_.stomp_score_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.safe_to_abandon_ = from._impl_.safe_to_abandon_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.team_abandon_ = from._impl_.team_abandon_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.new_player_pool_ = from._impl_.new_player_pool_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.low_pri_pool_ = from._impl_.low_pri_pool_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchData::CopyFrom(const CMsgMatchData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchData::IsInitialized() const {
  return true;
}

void CMsgMatchData::InternalSwap(CMsgMatchData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchData, _impl_.low_pri_pool_)
      + sizeof(CMsgMatchData::_impl_.low_pri_pool_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchData, _impl_.match_duration_s_)>(
          reinterpret_cast<char*>(&_impl_.match_duration_s_),
          reinterpret_cast<char*>(&other->_impl_.match_duration_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[43]);
}

// ===================================================================

class CMsgServerToGCMatchSignout::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchSignout>()._impl_._has_bits_);
  static void set_has_signout_attempt(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cluster_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgMatchData& match_data(const CMsgServerToGCMatchSignout* msg);
  static void set_has_match_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgMatchData&
CMsgServerToGCMatchSignout::_Internal::match_data(const CMsgServerToGCMatchSignout* msg) {
  return *msg->_impl_.match_data_;
}
void CMsgServerToGCMatchSignout::clear_additional_data() {
  _impl_.additional_data_.Clear();
}
CMsgServerToGCMatchSignout::CMsgServerToGCMatchSignout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchSignout)
}
CMsgServerToGCMatchSignout::CMsgServerToGCMatchSignout(const CMsgServerToGCMatchSignout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCMatchSignout* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.additional_data_){from._impl_.additional_data_}
    , decltype(_impl_.match_data_){nullptr}
    , decltype(_impl_.lobby_id_){}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.signout_attempt_){}
    , decltype(_impl_.cluster_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_match_data()) {
    _this->_impl_.match_data_ = new ::CMsgMatchData(*from._impl_.match_data_);
  }
  ::memcpy(&_impl_.lobby_id_, &from._impl_.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cluster_id_) -
    reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.cluster_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchSignout)
}

inline void CMsgServerToGCMatchSignout::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.additional_data_){arena}
    , decltype(_impl_.match_data_){nullptr}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.signout_attempt_){0u}
    , decltype(_impl_.cluster_id_){0u}
  };
}

CMsgServerToGCMatchSignout::~CMsgServerToGCMatchSignout() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchSignout)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCMatchSignout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.additional_data_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.match_data_;
}

void CMsgServerToGCMatchSignout::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCMatchSignout::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchSignout)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.additional_data_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.match_data_ != nullptr);
    _impl_.match_data_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cluster_id_) -
        reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.cluster_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchSignout::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CExtraMsgBlock additional_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 signout_attempt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_signout_attempt(&has_bits);
          _impl_.signout_attempt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 lobby_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_lobby_id(&has_bits);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cluster_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_cluster_id(&has_bits);
          _impl_.cluster_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgMatchData match_data = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCMatchSignout::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchSignout)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CExtraMsgBlock additional_data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_additional_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_additional_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 signout_attempt = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_signout_attempt(), target);
  }

  // optional uint64 lobby_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_lobby_id(), target);
  }

  // optional uint64 match_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_match_id(), target);
  }

  // optional uint32 cluster_id = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_cluster_id(), target);
  }

  // optional .CMsgMatchData match_data = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::match_data(this),
        _Internal::match_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchSignout)
  return target;
}

size_t CMsgServerToGCMatchSignout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchSignout)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CExtraMsgBlock additional_data = 1;
  total_size += 1UL * this->_internal_additional_data_size();
  for (const auto& msg : this->_impl_.additional_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgMatchData match_data = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.match_data_);
    }

    // optional uint64 lobby_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lobby_id());
    }

    // optional uint64 match_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint32 signout_attempt = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_signout_attempt());
    }

    // optional uint32 cluster_id = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cluster_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCMatchSignout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCMatchSignout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCMatchSignout::GetClassData() const { return &_class_data_; }


void CMsgServerToGCMatchSignout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCMatchSignout*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCMatchSignout&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchSignout)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.additional_data_.MergeFrom(from._impl_.additional_data_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_match_data()->::CMsgMatchData::MergeFrom(
          from._internal_match_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.signout_attempt_ = from._impl_.signout_attempt_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.cluster_id_ = from._impl_.cluster_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCMatchSignout::CopyFrom(const CMsgServerToGCMatchSignout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchSignout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchSignout::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchSignout::InternalSwap(CMsgServerToGCMatchSignout* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.additional_data_.InternalSwap(&other->_impl_.additional_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchSignout, _impl_.cluster_id_)
      + sizeof(CMsgServerToGCMatchSignout::_impl_.cluster_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchSignout, _impl_.match_data_)>(
          reinterpret_cast<char*>(&_impl_.match_data_),
          reinterpret_cast<char*>(&other->_impl_.match_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchSignout::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[44]);
}

// ===================================================================

class CMsgServerToGCMatchSignoutResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchSignoutResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerToGCMatchSignoutResponse::CMsgServerToGCMatchSignoutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchSignoutResponse)
}
CMsgServerToGCMatchSignoutResponse::CMsgServerToGCMatchSignoutResponse(const CMsgServerToGCMatchSignoutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCMatchSignoutResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchSignoutResponse)
}

inline void CMsgServerToGCMatchSignoutResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){1}
  };
}

CMsgServerToGCMatchSignoutResponse::~CMsgServerToGCMatchSignoutResponse() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchSignoutResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCMatchSignoutResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerToGCMatchSignoutResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCMatchSignoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchSignoutResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchSignoutResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgServerToGCMatchSignoutResponse.ESignoutResult result = 1 [default = k_ESignout_Failed_Retry];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgServerToGCMatchSignoutResponse_ESignoutResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgServerToGCMatchSignoutResponse_ESignoutResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCMatchSignoutResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchSignoutResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgServerToGCMatchSignoutResponse.ESignoutResult result = 1 [default = k_ESignout_Failed_Retry];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchSignoutResponse)
  return target;
}

size_t CMsgServerToGCMatchSignoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchSignoutResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgServerToGCMatchSignoutResponse.ESignoutResult result = 1 [default = k_ESignout_Failed_Retry];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCMatchSignoutResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCMatchSignoutResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCMatchSignoutResponse::GetClassData() const { return &_class_data_; }


void CMsgServerToGCMatchSignoutResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCMatchSignoutResponse*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCMatchSignoutResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchSignoutResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCMatchSignoutResponse::CopyFrom(const CMsgServerToGCMatchSignoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchSignoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchSignoutResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchSignoutResponse::InternalSwap(CMsgServerToGCMatchSignoutResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchSignoutResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[45]);
}

// ===================================================================

class CMsgServerWelcomeCitadel::_Internal {
 public:
};

CMsgServerWelcomeCitadel::CMsgServerWelcomeCitadel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgServerWelcomeCitadel)
}
CMsgServerWelcomeCitadel::CMsgServerWelcomeCitadel(const CMsgServerWelcomeCitadel& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgServerWelcomeCitadel* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgServerWelcomeCitadel)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerWelcomeCitadel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerWelcomeCitadel::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerWelcomeCitadel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[46]);
}

// ===================================================================

class CMsgServerToGCIdlePing::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCIdlePing>()._impl_._has_bits_);
  static void set_has_server_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerToGCIdlePing::CMsgServerToGCIdlePing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCIdlePing)
}
CMsgServerToGCIdlePing::CMsgServerToGCIdlePing(const CMsgServerToGCIdlePing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCIdlePing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.server_version_ = from._impl_.server_version_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCIdlePing)
}

inline void CMsgServerToGCIdlePing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_version_){0u}
  };
}

CMsgServerToGCIdlePing::~CMsgServerToGCIdlePing() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCIdlePing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCIdlePing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerToGCIdlePing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCIdlePing::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCIdlePing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.server_version_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCIdlePing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 server_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_server_version(&has_bits);
          _impl_.server_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCIdlePing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCIdlePing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 server_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCIdlePing)
  return target;
}

size_t CMsgServerToGCIdlePing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCIdlePing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 server_version = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCIdlePing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCIdlePing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCIdlePing::GetClassData() const { return &_class_data_; }


void CMsgServerToGCIdlePing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCIdlePing*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCIdlePing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCIdlePing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_server_version()) {
    _this->_internal_set_server_version(from._internal_server_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCIdlePing::CopyFrom(const CMsgServerToGCIdlePing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCIdlePing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCIdlePing::IsInitialized() const {
  return true;
}

void CMsgServerToGCIdlePing::InternalSwap(CMsgServerToGCIdlePing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.server_version_, other->_impl_.server_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCIdlePing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[47]);
}

// ===================================================================

class CMsgGCToServerRequestPing::_Internal {
 public:
};

CMsgGCToServerRequestPing::CMsgGCToServerRequestPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerRequestPing)
}
CMsgGCToServerRequestPing::CMsgGCToServerRequestPing(const CMsgGCToServerRequestPing& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgGCToServerRequestPing* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerRequestPing)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToServerRequestPing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToServerRequestPing::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerRequestPing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[48]);
}

// ===================================================================

class CMsgGCToServerAllocateForMatch::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerAllocateForMatch>()._impl_._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToServerAllocateForMatch::CMsgGCToServerAllocateForMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerAllocateForMatch)
}
CMsgGCToServerAllocateForMatch::CMsgGCToServerAllocateForMatch(const CMsgGCToServerAllocateForMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToServerAllocateForMatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.match_id_ = from._impl_.match_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerAllocateForMatch)
}

inline void CMsgGCToServerAllocateForMatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_id_){uint64_t{0u}}
  };
}

CMsgGCToServerAllocateForMatch::~CMsgGCToServerAllocateForMatch() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerAllocateForMatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToServerAllocateForMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToServerAllocateForMatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToServerAllocateForMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerAllocateForMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerAllocateForMatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToServerAllocateForMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerAllocateForMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerAllocateForMatch)
  return target;
}

size_t CMsgGCToServerAllocateForMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerAllocateForMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 match_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToServerAllocateForMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToServerAllocateForMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToServerAllocateForMatch::GetClassData() const { return &_class_data_; }


void CMsgGCToServerAllocateForMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToServerAllocateForMatch*>(&to_msg);
  auto& from = static_cast<const CMsgGCToServerAllocateForMatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerAllocateForMatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_match_id()) {
    _this->_internal_set_match_id(from._internal_match_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToServerAllocateForMatch::CopyFrom(const CMsgGCToServerAllocateForMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerAllocateForMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerAllocateForMatch::IsInitialized() const {
  return true;
}

void CMsgGCToServerAllocateForMatch::InternalSwap(CMsgGCToServerAllocateForMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.match_id_, other->_impl_.match_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerAllocateForMatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[49]);
}

// ===================================================================

class CMsgGCToServerAllocateForMatchResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerAllocateForMatchResponse>()._impl_._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToServerAllocateForMatchResponse::CMsgGCToServerAllocateForMatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerAllocateForMatchResponse)
}
CMsgGCToServerAllocateForMatchResponse::CMsgGCToServerAllocateForMatchResponse(const CMsgGCToServerAllocateForMatchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToServerAllocateForMatchResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.success_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerAllocateForMatchResponse)
}

inline void CMsgGCToServerAllocateForMatchResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.success_){false}
  };
}

CMsgGCToServerAllocateForMatchResponse::~CMsgGCToServerAllocateForMatchResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerAllocateForMatchResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToServerAllocateForMatchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToServerAllocateForMatchResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToServerAllocateForMatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerAllocateForMatchResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerAllocateForMatchResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToServerAllocateForMatchResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerAllocateForMatchResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerAllocateForMatchResponse)
  return target;
}

size_t CMsgGCToServerAllocateForMatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerAllocateForMatchResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool success = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToServerAllocateForMatchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToServerAllocateForMatchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToServerAllocateForMatchResponse::GetClassData() const { return &_class_data_; }


void CMsgGCToServerAllocateForMatchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToServerAllocateForMatchResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCToServerAllocateForMatchResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerAllocateForMatchResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_success()) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToServerAllocateForMatchResponse::CopyFrom(const CMsgGCToServerAllocateForMatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerAllocateForMatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerAllocateForMatchResponse::IsInitialized() const {
  return true;
}

void CMsgGCToServerAllocateForMatchResponse::InternalSwap(CMsgGCToServerAllocateForMatchResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerAllocateForMatchResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[50]);
}

// ===================================================================

class CMsgServerToGCEnterMatchmaking::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCEnterMatchmaking>()._impl_._has_bits_);
  static void set_has_server_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_search_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_region_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cluster_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_server_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_server_private_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_server_port(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sdr_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgServerToGCEnterMatchmaking::CMsgServerToGCEnterMatchmaking(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCEnterMatchmaking)
}
CMsgServerToGCEnterMatchmaking::CMsgServerToGCEnterMatchmaking(const CMsgServerToGCEnterMatchmaking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCEnterMatchmaking* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.search_key_){}
    , decltype(_impl_.sdr_address_){}
    , decltype(_impl_.server_version_){}
    , decltype(_impl_.region_id_){}
    , decltype(_impl_.cluster_id_){}
    , decltype(_impl_.server_public_ip_){}
    , decltype(_impl_.server_private_ip_){}
    , decltype(_impl_.server_port_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.search_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_search_key()) {
    _this->_impl_.search_key_.Set(from._internal_search_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sdr_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdr_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sdr_address()) {
    _this->_impl_.sdr_address_.Set(from._internal_sdr_address(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.server_version_, &from._impl_.server_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.server_port_) -
    reinterpret_cast<char*>(&_impl_.server_version_)) + sizeof(_impl_.server_port_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCEnterMatchmaking)
}

inline void CMsgServerToGCEnterMatchmaking::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.search_key_){}
    , decltype(_impl_.sdr_address_){}
    , decltype(_impl_.server_version_){0u}
    , decltype(_impl_.region_id_){0u}
    , decltype(_impl_.cluster_id_){0u}
    , decltype(_impl_.server_public_ip_){0u}
    , decltype(_impl_.server_private_ip_){0u}
    , decltype(_impl_.server_port_){0u}
  };
  _impl_.search_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sdr_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdr_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgServerToGCEnterMatchmaking::~CMsgServerToGCEnterMatchmaking() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCEnterMatchmaking)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCEnterMatchmaking::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.search_key_.Destroy();
  _impl_.sdr_address_.Destroy();
}

void CMsgServerToGCEnterMatchmaking::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCEnterMatchmaking::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCEnterMatchmaking)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.search_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.sdr_address_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.server_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.server_port_) -
        reinterpret_cast<char*>(&_impl_.server_version_)) + sizeof(_impl_.server_port_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCEnterMatchmaking::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 server_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_server_version(&has_bits);
          _impl_.server_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string search_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_search_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgServerToGCEnterMatchmaking.search_key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 region_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_region_id(&has_bits);
          _impl_.region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cluster_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_cluster_id(&has_bits);
          _impl_.cluster_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_public_ip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_server_public_ip(&has_bits);
          _impl_.server_public_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_private_ip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_server_private_ip(&has_bits);
          _impl_.server_private_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_port = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_server_port(&has_bits);
          _impl_.server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes sdr_address = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_sdr_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCEnterMatchmaking::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCEnterMatchmaking)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 server_version = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_version(), target);
  }

  // optional string search_key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_search_key().data(), static_cast<int>(this->_internal_search_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgServerToGCEnterMatchmaking.search_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_search_key(), target);
  }

  // optional uint32 region_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_region_id(), target);
  }

  // optional uint32 cluster_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cluster_id(), target);
  }

  // optional uint32 server_public_ip = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_server_public_ip(), target);
  }

  // optional uint32 server_private_ip = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_server_private_ip(), target);
  }

  // optional uint32 server_port = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_server_port(), target);
  }

  // optional bytes sdr_address = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_sdr_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCEnterMatchmaking)
  return target;
}

size_t CMsgServerToGCEnterMatchmaking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCEnterMatchmaking)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string search_key = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_search_key());
    }

    // optional bytes sdr_address = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sdr_address());
    }

    // optional uint32 server_version = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_version());
    }

    // optional uint32 region_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_region_id());
    }

    // optional uint32 cluster_id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cluster_id());
    }

    // optional uint32 server_public_ip = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_public_ip());
    }

    // optional uint32 server_private_ip = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_private_ip());
    }

    // optional uint32 server_port = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_port());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCEnterMatchmaking::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCEnterMatchmaking::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCEnterMatchmaking::GetClassData() const { return &_class_data_; }


void CMsgServerToGCEnterMatchmaking::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCEnterMatchmaking*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCEnterMatchmaking&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCEnterMatchmaking)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_search_key(from._internal_search_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_sdr_address(from._internal_sdr_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.server_version_ = from._impl_.server_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.region_id_ = from._impl_.region_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.cluster_id_ = from._impl_.cluster_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.server_public_ip_ = from._impl_.server_public_ip_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.server_private_ip_ = from._impl_.server_private_ip_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.server_port_ = from._impl_.server_port_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCEnterMatchmaking::CopyFrom(const CMsgServerToGCEnterMatchmaking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCEnterMatchmaking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCEnterMatchmaking::IsInitialized() const {
  return true;
}

void CMsgServerToGCEnterMatchmaking::InternalSwap(CMsgServerToGCEnterMatchmaking* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.search_key_, lhs_arena,
      &other->_impl_.search_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sdr_address_, lhs_arena,
      &other->_impl_.sdr_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCEnterMatchmaking, _impl_.server_port_)
      + sizeof(CMsgServerToGCEnterMatchmaking::_impl_.server_port_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCEnterMatchmaking, _impl_.server_version_)>(
          reinterpret_cast<char*>(&_impl_.server_version_),
          reinterpret_cast<char*>(&other->_impl_.server_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCEnterMatchmaking::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[51]);
}

// ===================================================================

class CMsgGCToServerCancelAllocateForMatch::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerCancelAllocateForMatch>()._impl_._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToServerCancelAllocateForMatch::CMsgGCToServerCancelAllocateForMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerCancelAllocateForMatch)
}
CMsgGCToServerCancelAllocateForMatch::CMsgGCToServerCancelAllocateForMatch(const CMsgGCToServerCancelAllocateForMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToServerCancelAllocateForMatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.match_id_ = from._impl_.match_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerCancelAllocateForMatch)
}

inline void CMsgGCToServerCancelAllocateForMatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_id_){uint64_t{0u}}
  };
}

CMsgGCToServerCancelAllocateForMatch::~CMsgGCToServerCancelAllocateForMatch() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerCancelAllocateForMatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToServerCancelAllocateForMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToServerCancelAllocateForMatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToServerCancelAllocateForMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerCancelAllocateForMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerCancelAllocateForMatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToServerCancelAllocateForMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerCancelAllocateForMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerCancelAllocateForMatch)
  return target;
}

size_t CMsgGCToServerCancelAllocateForMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerCancelAllocateForMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 match_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToServerCancelAllocateForMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToServerCancelAllocateForMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToServerCancelAllocateForMatch::GetClassData() const { return &_class_data_; }


void CMsgGCToServerCancelAllocateForMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToServerCancelAllocateForMatch*>(&to_msg);
  auto& from = static_cast<const CMsgGCToServerCancelAllocateForMatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerCancelAllocateForMatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_match_id()) {
    _this->_internal_set_match_id(from._internal_match_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToServerCancelAllocateForMatch::CopyFrom(const CMsgGCToServerCancelAllocateForMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerCancelAllocateForMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerCancelAllocateForMatch::IsInitialized() const {
  return true;
}

void CMsgGCToServerCancelAllocateForMatch::InternalSwap(CMsgGCToServerCancelAllocateForMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.match_id_, other->_impl_.match_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerCancelAllocateForMatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[52]);
}

// ===================================================================

class CMsgServerToGCUpdateLobbyServerState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCUpdateLobbyServerState>()._impl_._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_safe_to_abandon(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgServerToGCUpdateLobbyServerState::CMsgServerToGCUpdateLobbyServerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCUpdateLobbyServerState)
}
CMsgServerToGCUpdateLobbyServerState::CMsgServerToGCUpdateLobbyServerState(const CMsgServerToGCUpdateLobbyServerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCUpdateLobbyServerState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lobby_id_){}
    , decltype(_impl_.server_state_){}
    , decltype(_impl_.safe_to_abandon_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.lobby_id_, &from._impl_.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.safe_to_abandon_) -
    reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.safe_to_abandon_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCUpdateLobbyServerState)
}

inline void CMsgServerToGCUpdateLobbyServerState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
    , decltype(_impl_.server_state_){0}
    , decltype(_impl_.safe_to_abandon_){false}
  };
}

CMsgServerToGCUpdateLobbyServerState::~CMsgServerToGCUpdateLobbyServerState() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCUpdateLobbyServerState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCUpdateLobbyServerState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerToGCUpdateLobbyServerState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCUpdateLobbyServerState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCUpdateLobbyServerState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.safe_to_abandon_) -
        reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.safe_to_abandon_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCUpdateLobbyServerState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_lobby_id(&has_bits);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ELobbyServerState server_state = 2 [default = k_eLobbyServerState_Assign];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ELobbyServerState_IsValid(val))) {
            _internal_set_server_state(static_cast<::ELobbyServerState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool safe_to_abandon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_safe_to_abandon(&has_bits);
          _impl_.safe_to_abandon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCUpdateLobbyServerState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCUpdateLobbyServerState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_lobby_id(), target);
  }

  // optional .ELobbyServerState server_state = 2 [default = k_eLobbyServerState_Assign];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_server_state(), target);
  }

  // optional bool safe_to_abandon = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_safe_to_abandon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCUpdateLobbyServerState)
  return target;
}

size_t CMsgServerToGCUpdateLobbyServerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCUpdateLobbyServerState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 lobby_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lobby_id());
    }

    // optional .ELobbyServerState server_state = 2 [default = k_eLobbyServerState_Assign];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_server_state());
    }

    // optional bool safe_to_abandon = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCUpdateLobbyServerState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCUpdateLobbyServerState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCUpdateLobbyServerState::GetClassData() const { return &_class_data_; }


void CMsgServerToGCUpdateLobbyServerState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCUpdateLobbyServerState*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCUpdateLobbyServerState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCUpdateLobbyServerState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.server_state_ = from._impl_.server_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.safe_to_abandon_ = from._impl_.safe_to_abandon_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCUpdateLobbyServerState::CopyFrom(const CMsgServerToGCUpdateLobbyServerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCUpdateLobbyServerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCUpdateLobbyServerState::IsInitialized() const {
  return true;
}

void CMsgServerToGCUpdateLobbyServerState::InternalSwap(CMsgServerToGCUpdateLobbyServerState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCUpdateLobbyServerState, _impl_.safe_to_abandon_)
      + sizeof(CMsgServerToGCUpdateLobbyServerState::_impl_.safe_to_abandon_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCUpdateLobbyServerState, _impl_.lobby_id_)>(
          reinterpret_cast<char*>(&_impl_.lobby_id_),
          reinterpret_cast<char*>(&other->_impl_.lobby_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCUpdateLobbyServerState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[53]);
}

// ===================================================================

class CMsgServerToGCAbandonMatch_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCAbandonMatch_Player>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_additional_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgServerToGCAbandonMatch_Player::CMsgServerToGCAbandonMatch_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCAbandonMatch.Player)
}
CMsgServerToGCAbandonMatch_Player::CMsgServerToGCAbandonMatch_Player(const CMsgServerToGCAbandonMatch_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCAbandonMatch_Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.additional_data_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.hero_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.additional_data_, &from._impl_.additional_data_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hero_id_) -
    reinterpret_cast<char*>(&_impl_.additional_data_)) + sizeof(_impl_.hero_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCAbandonMatch.Player)
}

inline void CMsgServerToGCAbandonMatch_Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.additional_data_){uint64_t{0u}}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.hero_id_){0u}
  };
}

CMsgServerToGCAbandonMatch_Player::~CMsgServerToGCAbandonMatch_Player() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCAbandonMatch.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCAbandonMatch_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerToGCAbandonMatch_Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCAbandonMatch_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCAbandonMatch.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.additional_data_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.hero_id_) -
        reinterpret_cast<char*>(&_impl_.additional_data_)) + sizeof(_impl_.hero_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCAbandonMatch_Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 additional_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_additional_data(&has_bits);
          _impl_.additional_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCAbandonMatch_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCAbandonMatch.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint64 additional_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_additional_data(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hero_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCAbandonMatch.Player)
  return target;
}

size_t CMsgServerToGCAbandonMatch_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCAbandonMatch.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 additional_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_additional_data());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCAbandonMatch_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCAbandonMatch_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCAbandonMatch_Player::GetClassData() const { return &_class_data_; }


void CMsgServerToGCAbandonMatch_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCAbandonMatch_Player*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCAbandonMatch_Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCAbandonMatch.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.additional_data_ = from._impl_.additional_data_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCAbandonMatch_Player::CopyFrom(const CMsgServerToGCAbandonMatch_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCAbandonMatch.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCAbandonMatch_Player::IsInitialized() const {
  return true;
}

void CMsgServerToGCAbandonMatch_Player::InternalSwap(CMsgServerToGCAbandonMatch_Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCAbandonMatch_Player, _impl_.hero_id_)
      + sizeof(CMsgServerToGCAbandonMatch_Player::_impl_.hero_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCAbandonMatch_Player, _impl_.additional_data_)>(
          reinterpret_cast<char*>(&_impl_.additional_data_),
          reinterpret_cast<char*>(&other->_impl_.additional_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCAbandonMatch_Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[54]);
}

// ===================================================================

class CMsgServerToGCAbandonMatch::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCAbandonMatch>()._impl_._has_bits_);
  static void set_has_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cluster_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_reason_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_additional_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_public_ip_address(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_server_version(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_private_ip_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_match_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_was_server_shutdown(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

CMsgServerToGCAbandonMatch::CMsgServerToGCAbandonMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCAbandonMatch)
}
CMsgServerToGCAbandonMatch::CMsgServerToGCAbandonMatch(const CMsgServerToGCAbandonMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCAbandonMatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.server_steam_id_){}
    , decltype(_impl_.lobby_id_){}
    , decltype(_impl_.additional_data_){}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.cluster_id_){}
    , decltype(_impl_.public_ip_address_){}
    , decltype(_impl_.port_){}
    , decltype(_impl_.server_version_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.instance_id_){}
    , decltype(_impl_.private_ip_address_){}
    , decltype(_impl_.match_mode_){}
    , decltype(_impl_.game_mode_){}
    , decltype(_impl_.was_server_shutdown_){}
    , decltype(_impl_.reason_code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.server_steam_id_, &from._impl_.server_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reason_code_) -
    reinterpret_cast<char*>(&_impl_.server_steam_id_)) + sizeof(_impl_.reason_code_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCAbandonMatch)
}

inline void CMsgServerToGCAbandonMatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){arena}
    , decltype(_impl_.server_steam_id_){uint64_t{0u}}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
    , decltype(_impl_.additional_data_){uint64_t{0u}}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.cluster_id_){0u}
    , decltype(_impl_.public_ip_address_){0u}
    , decltype(_impl_.port_){0u}
    , decltype(_impl_.server_version_){0u}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.instance_id_){0u}
    , decltype(_impl_.private_ip_address_){0u}
    , decltype(_impl_.match_mode_){0}
    , decltype(_impl_.game_mode_){0}
    , decltype(_impl_.was_server_shutdown_){false}
    , decltype(_impl_.reason_code_){1}
  };
}

CMsgServerToGCAbandonMatch::~CMsgServerToGCAbandonMatch() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCAbandonMatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCAbandonMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void CMsgServerToGCAbandonMatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCAbandonMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCAbandonMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.server_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.server_version_) -
        reinterpret_cast<char*>(&_impl_.server_steam_id_)) + sizeof(_impl_.server_version_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.was_server_shutdown_) -
        reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.was_server_shutdown_));
    _impl_.reason_code_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCAbandonMatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 server_steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_server_steam_id(&has_bits);
          _impl_.server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 lobby_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_lobby_id(&has_bits);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cluster_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_cluster_id(&has_bits);
          _impl_.cluster_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgServerToGCAbandonMatch.EReason reason_code = 4 [default = eReason_ServerCrash];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgServerToGCAbandonMatch_EReason_IsValid(val))) {
            _internal_set_reason_code(static_cast<::CMsgServerToGCAbandonMatch_EReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 additional_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_additional_data(&has_bits);
          _impl_.additional_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgServerToGCAbandonMatch.Player players = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 public_ip_address = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_public_ip_address(&has_bits);
          _impl_.public_ip_address_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 port = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_port(&has_bits);
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_version = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_server_version(&has_bits);
          _impl_.server_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 instance_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_instance_id(&has_bits);
          _impl_.instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 private_ip_address = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_private_ip_address(&has_bits);
          _impl_.private_ip_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelMatchMode match_mode = 15 [default = k_ECitadelMatchMode_Invalid];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelMatchMode_IsValid(val))) {
            _internal_set_match_mode(static_cast<::ECitadelMatchMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .ECitadelGameMode game_mode = 16 [default = k_ECitadelGameMode_Invalid];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECitadelGameMode_IsValid(val))) {
            _internal_set_game_mode(static_cast<::ECitadelGameMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool was_server_shutdown = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_was_server_shutdown(&has_bits);
          _impl_.was_server_shutdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCAbandonMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCAbandonMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 server_steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_server_steam_id(), target);
  }

  // optional fixed64 lobby_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_lobby_id(), target);
  }

  // optional uint32 cluster_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cluster_id(), target);
  }

  // optional .CMsgServerToGCAbandonMatch.EReason reason_code = 4 [default = eReason_ServerCrash];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_reason_code(), target);
  }

  // optional uint64 additional_data = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_additional_data(), target);
  }

  // optional uint64 match_id = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_match_id(), target);
  }

  // repeated .CMsgServerToGCAbandonMatch.Player players = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional fixed32 public_ip_address = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(9, this->_internal_public_ip_address(), target);
  }

  // optional uint32 port = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_port(), target);
  }

  // optional uint32 server_version = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_server_version(), target);
  }

  // optional uint32 pid = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_pid(), target);
  }

  // optional uint32 instance_id = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_instance_id(), target);
  }

  // optional uint32 private_ip_address = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_private_ip_address(), target);
  }

  // optional .ECitadelMatchMode match_mode = 15 [default = k_ECitadelMatchMode_Invalid];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_match_mode(), target);
  }

  // optional .ECitadelGameMode game_mode = 16 [default = k_ECitadelGameMode_Invalid];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      16, this->_internal_game_mode(), target);
  }

  // optional bool was_server_shutdown = 17;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_was_server_shutdown(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCAbandonMatch)
  return target;
}

size_t CMsgServerToGCAbandonMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCAbandonMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCAbandonMatch.Player players = 8;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed64 server_steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 lobby_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint64 additional_data = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_additional_data());
    }

    // optional uint64 match_id = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint32 cluster_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cluster_id());
    }

    // optional fixed32 public_ip_address = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 port = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
    }

    // optional uint32 server_version = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_version());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 pid = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
    }

    // optional uint32 instance_id = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_instance_id());
    }

    // optional uint32 private_ip_address = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_private_ip_address());
    }

    // optional .ECitadelMatchMode match_mode = 15 [default = k_ECitadelMatchMode_Invalid];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_match_mode());
    }

    // optional .ECitadelGameMode game_mode = 16 [default = k_ECitadelGameMode_Invalid];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_game_mode());
    }

    // optional bool was_server_shutdown = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional .CMsgServerToGCAbandonMatch.EReason reason_code = 4 [default = eReason_ServerCrash];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_reason_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCAbandonMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCAbandonMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCAbandonMatch::GetClassData() const { return &_class_data_; }


void CMsgServerToGCAbandonMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCAbandonMatch*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCAbandonMatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCAbandonMatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.server_steam_id_ = from._impl_.server_steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.additional_data_ = from._impl_.additional_data_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.cluster_id_ = from._impl_.cluster_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.public_ip_address_ = from._impl_.public_ip_address_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.port_ = from._impl_.port_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.server_version_ = from._impl_.server_version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.instance_id_ = from._impl_.instance_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.private_ip_address_ = from._impl_.private_ip_address_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.match_mode_ = from._impl_.match_mode_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.game_mode_ = from._impl_.game_mode_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.was_server_shutdown_ = from._impl_.was_server_shutdown_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.reason_code_ = from._impl_.reason_code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCAbandonMatch::CopyFrom(const CMsgServerToGCAbandonMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCAbandonMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCAbandonMatch::IsInitialized() const {
  return true;
}

void CMsgServerToGCAbandonMatch::InternalSwap(CMsgServerToGCAbandonMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCAbandonMatch, _impl_.was_server_shutdown_)
      + sizeof(CMsgServerToGCAbandonMatch::_impl_.was_server_shutdown_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCAbandonMatch, _impl_.server_steam_id_)>(
          reinterpret_cast<char*>(&_impl_.server_steam_id_),
          reinterpret_cast<char*>(&other->_impl_.server_steam_id_));
  swap(_impl_.reason_code_, other->_impl_.reason_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCAbandonMatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[55]);
}

// ===================================================================

class CMsgServerToGCAbandonMatchResponse::_Internal {
 public:
};

CMsgServerToGCAbandonMatchResponse::CMsgServerToGCAbandonMatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCAbandonMatchResponse)
}
CMsgServerToGCAbandonMatchResponse::CMsgServerToGCAbandonMatchResponse(const CMsgServerToGCAbandonMatchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgServerToGCAbandonMatchResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCAbandonMatchResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCAbandonMatchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCAbandonMatchResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCAbandonMatchResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[56]);
}

// ===================================================================

class CMsgServerToGCTestConnection::_Internal {
 public:
};

CMsgServerToGCTestConnection::CMsgServerToGCTestConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCTestConnection)
}
CMsgServerToGCTestConnection::CMsgServerToGCTestConnection(const CMsgServerToGCTestConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgServerToGCTestConnection* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCTestConnection)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCTestConnection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCTestConnection::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCTestConnection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[57]);
}

// ===================================================================

class CMsgServerToGCTestConnectionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCTestConnectionResponse>()._impl_._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerToGCTestConnectionResponse::CMsgServerToGCTestConnectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCTestConnectionResponse)
}
CMsgServerToGCTestConnectionResponse::CMsgServerToGCTestConnectionResponse(const CMsgServerToGCTestConnectionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCTestConnectionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lobby_id_){}
    , decltype(_impl_.state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.lobby_id_, &from._impl_.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCTestConnectionResponse)
}

inline void CMsgServerToGCTestConnectionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
    , decltype(_impl_.state_){0u}
  };
}

CMsgServerToGCTestConnectionResponse::~CMsgServerToGCTestConnectionResponse() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCTestConnectionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCTestConnectionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerToGCTestConnectionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCTestConnectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCTestConnectionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.state_) -
        reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCTestConnectionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_state(&has_bits);
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 lobby_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_lobby_id(&has_bits);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCTestConnectionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCTestConnectionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 state = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_state(), target);
  }

  // optional uint64 lobby_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_lobby_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCTestConnectionResponse)
  return target;
}

size_t CMsgServerToGCTestConnectionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCTestConnectionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 lobby_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lobby_id());
    }

    // optional uint32 state = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCTestConnectionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCTestConnectionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCTestConnectionResponse::GetClassData() const { return &_class_data_; }


void CMsgServerToGCTestConnectionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCTestConnectionResponse*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCTestConnectionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCTestConnectionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCTestConnectionResponse::CopyFrom(const CMsgServerToGCTestConnectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCTestConnectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCTestConnectionResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCTestConnectionResponse::InternalSwap(CMsgServerToGCTestConnectionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCTestConnectionResponse, _impl_.state_)
      + sizeof(CMsgServerToGCTestConnectionResponse::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCTestConnectionResponse, _impl_.lobby_id_)>(
          reinterpret_cast<char*>(&_impl_.lobby_id_),
          reinterpret_cast<char*>(&other->_impl_.lobby_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCTestConnectionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[58]);
}

// ===================================================================

class CMsgGCToServerSetServerConVar::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerSetServerConVar>()._impl_._has_bits_);
  static void set_has_convar_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_convar_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToServerSetServerConVar::CMsgGCToServerSetServerConVar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerSetServerConVar)
}
CMsgGCToServerSetServerConVar::CMsgGCToServerSetServerConVar(const CMsgGCToServerSetServerConVar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToServerSetServerConVar* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.convar_name_){}
    , decltype(_impl_.convar_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.convar_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.convar_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_convar_name()) {
    _this->_impl_.convar_name_.Set(from._internal_convar_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.convar_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.convar_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_convar_value()) {
    _this->_impl_.convar_value_.Set(from._internal_convar_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerSetServerConVar)
}

inline void CMsgGCToServerSetServerConVar::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.convar_name_){}
    , decltype(_impl_.convar_value_){}
  };
  _impl_.convar_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.convar_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.convar_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.convar_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCToServerSetServerConVar::~CMsgGCToServerSetServerConVar() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerSetServerConVar)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToServerSetServerConVar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.convar_name_.Destroy();
  _impl_.convar_value_.Destroy();
}

void CMsgGCToServerSetServerConVar::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToServerSetServerConVar::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerSetServerConVar)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.convar_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.convar_value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerSetServerConVar::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string convar_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_convar_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCToServerSetServerConVar.convar_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string convar_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_convar_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCToServerSetServerConVar.convar_value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToServerSetServerConVar::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerSetServerConVar)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string convar_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_convar_name().data(), static_cast<int>(this->_internal_convar_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToServerSetServerConVar.convar_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_convar_name(), target);
  }

  // optional string convar_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_convar_value().data(), static_cast<int>(this->_internal_convar_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToServerSetServerConVar.convar_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_convar_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerSetServerConVar)
  return target;
}

size_t CMsgGCToServerSetServerConVar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerSetServerConVar)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string convar_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_convar_name());
    }

    // optional string convar_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_convar_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToServerSetServerConVar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToServerSetServerConVar::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToServerSetServerConVar::GetClassData() const { return &_class_data_; }


void CMsgGCToServerSetServerConVar::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToServerSetServerConVar*>(&to_msg);
  auto& from = static_cast<const CMsgGCToServerSetServerConVar&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerSetServerConVar)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_convar_name(from._internal_convar_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_convar_value(from._internal_convar_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToServerSetServerConVar::CopyFrom(const CMsgGCToServerSetServerConVar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerSetServerConVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerSetServerConVar::IsInitialized() const {
  return true;
}

void CMsgGCToServerSetServerConVar::InternalSwap(CMsgGCToServerSetServerConVar* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.convar_name_, lhs_arena,
      &other->_impl_.convar_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.convar_value_, lhs_arena,
      &other->_impl_.convar_value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerSetServerConVar::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[59]);
}

// ===================================================================

class CMsgGCToServerSetServerConVarResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerSetServerConVarResponse>()._impl_._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToServerSetServerConVarResponse::CMsgGCToServerSetServerConVarResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerSetServerConVarResponse)
}
CMsgGCToServerSetServerConVarResponse::CMsgGCToServerSetServerConVarResponse(const CMsgGCToServerSetServerConVarResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToServerSetServerConVarResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.success_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerSetServerConVarResponse)
}

inline void CMsgGCToServerSetServerConVarResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.success_){false}
  };
}

CMsgGCToServerSetServerConVarResponse::~CMsgGCToServerSetServerConVarResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerSetServerConVarResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToServerSetServerConVarResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToServerSetServerConVarResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToServerSetServerConVarResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerSetServerConVarResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerSetServerConVarResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToServerSetServerConVarResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerSetServerConVarResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerSetServerConVarResponse)
  return target;
}

size_t CMsgGCToServerSetServerConVarResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerSetServerConVarResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool success = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToServerSetServerConVarResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToServerSetServerConVarResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToServerSetServerConVarResponse::GetClassData() const { return &_class_data_; }


void CMsgGCToServerSetServerConVarResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToServerSetServerConVarResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCToServerSetServerConVarResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerSetServerConVarResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_success()) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToServerSetServerConVarResponse::CopyFrom(const CMsgGCToServerSetServerConVarResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerSetServerConVarResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerSetServerConVarResponse::IsInitialized() const {
  return true;
}

void CMsgGCToServerSetServerConVarResponse::InternalSwap(CMsgGCToServerSetServerConVarResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerSetServerConVarResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[60]);
}

// ===================================================================

class CMsgGCToServerAddSpectator::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerAddSpectator>()._impl_._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_account_to_spectate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCToServerAddSpectator::CMsgGCToServerAddSpectator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerAddSpectator)
}
CMsgGCToServerAddSpectator::CMsgGCToServerAddSpectator(const CMsgGCToServerAddSpectator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToServerAddSpectator* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lobby_id_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.account_to_spectate_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.lobby_id_, &from._impl_.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.account_to_spectate_) -
    reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.account_to_spectate_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerAddSpectator)
}

inline void CMsgGCToServerAddSpectator::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.account_to_spectate_){0u}
  };
}

CMsgGCToServerAddSpectator::~CMsgGCToServerAddSpectator() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerAddSpectator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToServerAddSpectator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToServerAddSpectator::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToServerAddSpectator::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerAddSpectator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.account_to_spectate_) -
        reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.account_to_spectate_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerAddSpectator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_lobby_id(&has_bits);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_to_spectate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_account_to_spectate(&has_bits);
          _impl_.account_to_spectate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToServerAddSpectator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerAddSpectator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_lobby_id(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  // optional uint32 account_to_spectate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_account_to_spectate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerAddSpectator)
  return target;
}

size_t CMsgGCToServerAddSpectator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerAddSpectator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 lobby_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lobby_id());
    }

    // optional uint32 account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 account_to_spectate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_to_spectate());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToServerAddSpectator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToServerAddSpectator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToServerAddSpectator::GetClassData() const { return &_class_data_; }


void CMsgGCToServerAddSpectator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToServerAddSpectator*>(&to_msg);
  auto& from = static_cast<const CMsgGCToServerAddSpectator&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerAddSpectator)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.account_to_spectate_ = from._impl_.account_to_spectate_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToServerAddSpectator::CopyFrom(const CMsgGCToServerAddSpectator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerAddSpectator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerAddSpectator::IsInitialized() const {
  return true;
}

void CMsgGCToServerAddSpectator::InternalSwap(CMsgGCToServerAddSpectator* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToServerAddSpectator, _impl_.account_to_spectate_)
      + sizeof(CMsgGCToServerAddSpectator::_impl_.account_to_spectate_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToServerAddSpectator, _impl_.lobby_id_)>(
          reinterpret_cast<char*>(&_impl_.lobby_id_),
          reinterpret_cast<char*>(&other->_impl_.lobby_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerAddSpectator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[61]);
}

// ===================================================================

class CMsgGCToServerAddSpectatorResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerAddSpectatorResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_requesting_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToServerAddSpectatorResponse::CMsgGCToServerAddSpectatorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerAddSpectatorResponse)
}
CMsgGCToServerAddSpectatorResponse::CMsgGCToServerAddSpectatorResponse(const CMsgGCToServerAddSpectatorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToServerAddSpectatorResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){}
    , decltype(_impl_.requesting_account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.requesting_account_id_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.requesting_account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerAddSpectatorResponse)
}

inline void CMsgGCToServerAddSpectatorResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){0}
    , decltype(_impl_.requesting_account_id_){0u}
  };
}

CMsgGCToServerAddSpectatorResponse::~CMsgGCToServerAddSpectatorResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerAddSpectatorResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToServerAddSpectatorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToServerAddSpectatorResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToServerAddSpectatorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerAddSpectatorResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.requesting_account_id_) -
        reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.requesting_account_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerAddSpectatorResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgGCToServerAddSpectatorResponse.EResponse result = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGCToServerAddSpectatorResponse_EResponse_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgGCToServerAddSpectatorResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 requesting_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_requesting_account_id(&has_bits);
          _impl_.requesting_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToServerAddSpectatorResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerAddSpectatorResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgGCToServerAddSpectatorResponse.EResponse result = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional uint32 requesting_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_requesting_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerAddSpectatorResponse)
  return target;
}

size_t CMsgGCToServerAddSpectatorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerAddSpectatorResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgGCToServerAddSpectatorResponse.EResponse result = 1 [default = k_eInternalError];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
    }

    // optional uint32 requesting_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_requesting_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToServerAddSpectatorResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToServerAddSpectatorResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToServerAddSpectatorResponse::GetClassData() const { return &_class_data_; }


void CMsgGCToServerAddSpectatorResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToServerAddSpectatorResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCToServerAddSpectatorResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerAddSpectatorResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.requesting_account_id_ = from._impl_.requesting_account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToServerAddSpectatorResponse::CopyFrom(const CMsgGCToServerAddSpectatorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerAddSpectatorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerAddSpectatorResponse::IsInitialized() const {
  return true;
}

void CMsgGCToServerAddSpectatorResponse::InternalSwap(CMsgGCToServerAddSpectatorResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToServerAddSpectatorResponse, _impl_.requesting_account_id_)
      + sizeof(CMsgGCToServerAddSpectatorResponse::_impl_.requesting_account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToServerAddSpectatorResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerAddSpectatorResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[62]);
}

// ===================================================================

class CMsgServerToGCReportCheater::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCReportCheater>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_record_data_only(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cheater_score(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgServerToGCReportCheater::CMsgServerToGCReportCheater(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCReportCheater)
}
CMsgServerToGCReportCheater::CMsgServerToGCReportCheater(const CMsgServerToGCReportCheater& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCReportCheater* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.lobby_id_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.record_data_only_){}
    , decltype(_impl_.cheater_score_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reason()) {
    _this->_impl_.reason_.Set(from._internal_reason(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cheater_score_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.cheater_score_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCReportCheater)
}

inline void CMsgServerToGCReportCheater::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.record_data_only_){false}
    , decltype(_impl_.cheater_score_){0}
  };
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgServerToGCReportCheater::~CMsgServerToGCReportCheater() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCReportCheater)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCReportCheater::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reason_.Destroy();
}

void CMsgServerToGCReportCheater::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCReportCheater::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCReportCheater)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.reason_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cheater_score_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.cheater_score_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCReportCheater::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 lobby_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_lobby_id(&has_bits);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string reason = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgServerToGCReportCheater.reason");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool record_data_only = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_record_data_only(&has_bits);
          _impl_.record_data_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float cheater_score = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_cheater_score(&has_bits);
          _impl_.cheater_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCReportCheater::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCReportCheater)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_match_id(), target);
  }

  // optional fixed64 lobby_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(3, this->_internal_lobby_id(), target);
  }

  // optional string reason = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgServerToGCReportCheater.reason");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reason(), target);
  }

  // optional bool record_data_only = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_record_data_only(), target);
  }

  // optional float cheater_score = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_cheater_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCReportCheater)
  return target;
}

size_t CMsgServerToGCReportCheater::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCReportCheater)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string reason = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reason());
    }

    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional fixed64 lobby_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional bool record_data_only = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional float cheater_score = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCReportCheater::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCReportCheater::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCReportCheater::GetClassData() const { return &_class_data_; }


void CMsgServerToGCReportCheater::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCReportCheater*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCReportCheater&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCReportCheater)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_reason(from._internal_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.record_data_only_ = from._impl_.record_data_only_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.cheater_score_ = from._impl_.cheater_score_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCReportCheater::CopyFrom(const CMsgServerToGCReportCheater& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCReportCheater)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCReportCheater::IsInitialized() const {
  return true;
}

void CMsgServerToGCReportCheater::InternalSwap(CMsgServerToGCReportCheater* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCReportCheater, _impl_.cheater_score_)
      + sizeof(CMsgServerToGCReportCheater::_impl_.cheater_score_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCReportCheater, _impl_.match_id_)>(
          reinterpret_cast<char*>(&_impl_.match_id_),
          reinterpret_cast<char*>(&other->_impl_.match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCReportCheater::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[63]);
}

// ===================================================================

class CMsgServerToGCReportCheaterResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCReportCheaterResponse>()._impl_._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerToGCReportCheaterResponse::CMsgServerToGCReportCheaterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCReportCheaterResponse)
}
CMsgServerToGCReportCheaterResponse::CMsgServerToGCReportCheaterResponse(const CMsgServerToGCReportCheaterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCReportCheaterResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.success_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCReportCheaterResponse)
}

inline void CMsgServerToGCReportCheaterResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.success_){false}
  };
}

CMsgServerToGCReportCheaterResponse::~CMsgServerToGCReportCheaterResponse() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCReportCheaterResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCReportCheaterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerToGCReportCheaterResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCReportCheaterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCReportCheaterResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCReportCheaterResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCReportCheaterResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCReportCheaterResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCReportCheaterResponse)
  return target;
}

size_t CMsgServerToGCReportCheaterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCReportCheaterResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool success = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCReportCheaterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCReportCheaterResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCReportCheaterResponse::GetClassData() const { return &_class_data_; }


void CMsgServerToGCReportCheaterResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCReportCheaterResponse*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCReportCheaterResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCReportCheaterResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_success()) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCReportCheaterResponse::CopyFrom(const CMsgServerToGCReportCheaterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCReportCheaterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCReportCheaterResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCReportCheaterResponse::InternalSwap(CMsgServerToGCReportCheaterResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCReportCheaterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_citadel_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_citadel_5fgcmessages_5fserver_2eproto[64]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgServerCrashSentinelFile_Player*
Arena::CreateMaybeMessage< ::CMsgServerCrashSentinelFile_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerCrashSentinelFile_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerCrashSentinelFile_GameInfo*
Arena::CreateMaybeMessage< ::CMsgServerCrashSentinelFile_GameInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerCrashSentinelFile_GameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerCrashSentinelFile*
Arena::CreateMaybeMessage< ::CMsgServerCrashSentinelFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerCrashSentinelFile >(arena);
}
template<> PROTOBUF_NOINLINE ::CServerLobbyData_PlayerMMR_Player*
Arena::CreateMaybeMessage< ::CServerLobbyData_PlayerMMR_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CServerLobbyData_PlayerMMR_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CServerLobbyData_PlayerMMR*
Arena::CreateMaybeMessage< ::CServerLobbyData_PlayerMMR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CServerLobbyData_PlayerMMR >(arena);
}
template<> PROTOBUF_NOINLINE ::CServerLobbyData_PlayerInfo*
Arena::CreateMaybeMessage< ::CServerLobbyData_PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CServerLobbyData_PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CServerLobbyData_PostMatchSurvey_PlayerSurvey*
Arena::CreateMaybeMessage< ::CServerLobbyData_PostMatchSurvey_PlayerSurvey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CServerLobbyData_PostMatchSurvey_PlayerSurvey >(arena);
}
template<> PROTOBUF_NOINLINE ::CServerLobbyData_PostMatchSurvey*
Arena::CreateMaybeMessage< ::CServerLobbyData_PostMatchSurvey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CServerLobbyData_PostMatchSurvey >(arena);
}
template<> PROTOBUF_NOINLINE ::CServerLobbyData_AutoTest*
Arena::CreateMaybeMessage< ::CServerLobbyData_AutoTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CServerLobbyData_AutoTest >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOCitadelServerDynamicLobby*
Arena::CreateMaybeMessage< ::CSOCitadelServerDynamicLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOCitadelServerDynamicLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOCitadelServerStaticLobby_Member*
Arena::CreateMaybeMessage< ::CSOCitadelServerStaticLobby_Member >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOCitadelServerStaticLobby_Member >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOCitadelServerStaticLobby_DevSettings*
Arena::CreateMaybeMessage< ::CSOCitadelServerStaticLobby_DevSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOCitadelServerStaticLobby_DevSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOCitadelServerStaticLobby*
Arena::CreateMaybeMessage< ::CSOCitadelServerStaticLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOCitadelServerStaticLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerSignoutData_ServerPerfStats_FrameCounts*
Arena::CreateMaybeMessage< ::CMsgServerSignoutData_ServerPerfStats_FrameCounts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerSignoutData_ServerPerfStats_FrameCounts >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerSignoutData_ServerPerfStats_PerfSample*
Arena::CreateMaybeMessage< ::CMsgServerSignoutData_ServerPerfStats_PerfSample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerSignoutData_ServerPerfStats_PerfSample >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples*
Arena::CreateMaybeMessage< ::CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerSignoutData_ServerPerfStats_MatchPerfSamples >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerSignoutData_ServerPerfStats*
Arena::CreateMaybeMessage< ::CMsgServerSignoutData_ServerPerfStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerSignoutData_ServerPerfStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCUpdateMatchInfo*
Arena::CreateMaybeMessage< ::CMsgServerToGCUpdateMatchInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCUpdateMatchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchSignoutPermission*
Arena::CreateMaybeMessage< ::CMsgServerToGCMatchSignoutPermission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchSignoutPermission >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchSignoutPermissionResponse*
Arena::CreateMaybeMessage< ::CMsgServerToGCMatchSignoutPermissionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchSignoutPermissionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection*
Arena::CreateMaybeMessage< ::CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerSignoutData_Disconnections_CMsgMatchDisconnection >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerSignoutData_Disconnections*
Arena::CreateMaybeMessage< ::CMsgServerSignoutData_Disconnections >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerSignoutData_Disconnections >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerSignoutData_DetailedStats_Position*
Arena::CreateMaybeMessage< ::CMsgServerSignoutData_DetailedStats_Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerSignoutData_DetailedStats_Position >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerSignoutData_DetailedStats_TimeSample_Stats*
Arena::CreateMaybeMessage< ::CMsgServerSignoutData_DetailedStats_TimeSample_Stats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerSignoutData_DetailedStats_TimeSample_Stats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats*
Arena::CreateMaybeMessage< ::CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerSignoutData_DetailedStats_TimeSample_GoldStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerSignoutData_DetailedStats_TimeSample*
Arena::CreateMaybeMessage< ::CMsgServerSignoutData_DetailedStats_TimeSample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerSignoutData_DetailedStats_TimeSample >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerSignoutData_DetailedStats_Objective*
Arena::CreateMaybeMessage< ::CMsgServerSignoutData_DetailedStats_Objective >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerSignoutData_DetailedStats_Objective >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerSignoutData_DetailedStats_MidBoss*
Arena::CreateMaybeMessage< ::CMsgServerSignoutData_DetailedStats_MidBoss >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerSignoutData_DetailedStats_MidBoss >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerSignoutData_DetailedStats_Player*
Arena::CreateMaybeMessage< ::CMsgServerSignoutData_DetailedStats_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerSignoutData_DetailedStats_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerSignoutData_DetailedStats*
Arena::CreateMaybeMessage< ::CMsgServerSignoutData_DetailedStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerSignoutData_DetailedStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerSignoutData_PerfData*
Arena::CreateMaybeMessage< ::CMsgServerSignoutData_PerfData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerSignoutData_PerfData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerSignoutData_BookRewards_BookReward*
Arena::CreateMaybeMessage< ::CMsgServerSignoutData_BookRewards_BookReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerSignoutData_BookRewards_BookReward >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerSignoutData_BookRewards_AccountRewards*
Arena::CreateMaybeMessage< ::CMsgServerSignoutData_BookRewards_AccountRewards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerSignoutData_BookRewards_AccountRewards >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerSignoutData_BookRewards*
Arena::CreateMaybeMessage< ::CMsgServerSignoutData_BookRewards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerSignoutData_BookRewards >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerSignoutData_AccountStatChanges_Stat*
Arena::CreateMaybeMessage< ::CMsgServerSignoutData_AccountStatChanges_Stat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerSignoutData_AccountStatChanges_Stat >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerSignoutData_AccountStatChanges_AccountStats*
Arena::CreateMaybeMessage< ::CMsgServerSignoutData_AccountStatChanges_AccountStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerSignoutData_AccountStatChanges_AccountStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerSignoutData_AccountStatChanges*
Arena::CreateMaybeMessage< ::CMsgServerSignoutData_AccountStatChanges >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerSignoutData_AccountStatChanges >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerSignoutData_PlayerChat_ChatLine*
Arena::CreateMaybeMessage< ::CMsgServerSignoutData_PlayerChat_ChatLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerSignoutData_PlayerChat_ChatLine >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerSignoutData_PlayerChat*
Arena::CreateMaybeMessage< ::CMsgServerSignoutData_PlayerChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerSignoutData_PlayerChat >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerSignoutData_PenalizedPlayers_Penalty*
Arena::CreateMaybeMessage< ::CMsgServerSignoutData_PenalizedPlayers_Penalty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerSignoutData_PenalizedPlayers_Penalty >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerSignoutData_PenalizedPlayers*
Arena::CreateMaybeMessage< ::CMsgServerSignoutData_PenalizedPlayers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerSignoutData_PenalizedPlayers >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchData_PlayerItem*
Arena::CreateMaybeMessage< ::CMsgMatchData_PlayerItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchData_PlayerItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchData_PlayerInfo*
Arena::CreateMaybeMessage< ::CMsgMatchData_PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchData_PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchData*
Arena::CreateMaybeMessage< ::CMsgMatchData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchSignout*
Arena::CreateMaybeMessage< ::CMsgServerToGCMatchSignout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchSignout >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchSignoutResponse*
Arena::CreateMaybeMessage< ::CMsgServerToGCMatchSignoutResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchSignoutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerWelcomeCitadel*
Arena::CreateMaybeMessage< ::CMsgServerWelcomeCitadel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerWelcomeCitadel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCIdlePing*
Arena::CreateMaybeMessage< ::CMsgServerToGCIdlePing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCIdlePing >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerRequestPing*
Arena::CreateMaybeMessage< ::CMsgGCToServerRequestPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerRequestPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerAllocateForMatch*
Arena::CreateMaybeMessage< ::CMsgGCToServerAllocateForMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerAllocateForMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerAllocateForMatchResponse*
Arena::CreateMaybeMessage< ::CMsgGCToServerAllocateForMatchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerAllocateForMatchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCEnterMatchmaking*
Arena::CreateMaybeMessage< ::CMsgServerToGCEnterMatchmaking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCEnterMatchmaking >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerCancelAllocateForMatch*
Arena::CreateMaybeMessage< ::CMsgGCToServerCancelAllocateForMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerCancelAllocateForMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCUpdateLobbyServerState*
Arena::CreateMaybeMessage< ::CMsgServerToGCUpdateLobbyServerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCUpdateLobbyServerState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCAbandonMatch_Player*
Arena::CreateMaybeMessage< ::CMsgServerToGCAbandonMatch_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCAbandonMatch_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCAbandonMatch*
Arena::CreateMaybeMessage< ::CMsgServerToGCAbandonMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCAbandonMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCAbandonMatchResponse*
Arena::CreateMaybeMessage< ::CMsgServerToGCAbandonMatchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCAbandonMatchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCTestConnection*
Arena::CreateMaybeMessage< ::CMsgServerToGCTestConnection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCTestConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCTestConnectionResponse*
Arena::CreateMaybeMessage< ::CMsgServerToGCTestConnectionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCTestConnectionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerSetServerConVar*
Arena::CreateMaybeMessage< ::CMsgGCToServerSetServerConVar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerSetServerConVar >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerSetServerConVarResponse*
Arena::CreateMaybeMessage< ::CMsgGCToServerSetServerConVarResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerSetServerConVarResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerAddSpectator*
Arena::CreateMaybeMessage< ::CMsgGCToServerAddSpectator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerAddSpectator >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerAddSpectatorResponse*
Arena::CreateMaybeMessage< ::CMsgGCToServerAddSpectatorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerAddSpectatorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCReportCheater*
Arena::CreateMaybeMessage< ::CMsgServerToGCReportCheater >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCReportCheater >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCReportCheaterResponse*
Arena::CreateMaybeMessage< ::CMsgServerToGCReportCheaterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCReportCheaterResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
