// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: citadel_usercmd.proto

#include "citadel_usercmd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CCitadelUserCmdPB::CCitadelUserCmdPB(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.view_delta_x_)*/{}
  , /*decltype(_impl_.view_delta_y_)*/{}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.vec_camera_position_)*/nullptr
  , /*decltype(_impl_.ang_camera_angles_)*/nullptr
  , /*decltype(_impl_.execute_ability_indices_)*/0
  , /*decltype(_impl_.camera_roaming_speed_)*/0
  , /*decltype(_impl_.in_shop_)*/false
  , /*decltype(_impl_.using_free_cursor_)*/false
  , /*decltype(_impl_.enemy_hero_aimed_at_)*/-1} {}
struct CCitadelUserCmdPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelUserCmdPBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelUserCmdPBDefaultTypeInternal() {}
  union {
    CCitadelUserCmdPB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelUserCmdPBDefaultTypeInternal _CCitadelUserCmdPB_default_instance_;
static ::_pb::Metadata file_level_metadata_citadel_5fusercmd_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_citadel_5fusercmd_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_citadel_5fusercmd_2eproto = nullptr;

const uint32_t TableStruct_citadel_5fusercmd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CCitadelUserCmdPB, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserCmdPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelUserCmdPB, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserCmdPB, _impl_.vec_camera_position_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserCmdPB, _impl_.ang_camera_angles_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserCmdPB, _impl_.execute_ability_indices_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserCmdPB, _impl_.in_shop_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserCmdPB, _impl_.camera_roaming_speed_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserCmdPB, _impl_.using_free_cursor_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserCmdPB, _impl_.enemy_hero_aimed_at_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserCmdPB, _impl_.view_delta_x_),
  PROTOBUF_FIELD_OFFSET(::CCitadelUserCmdPB, _impl_.view_delta_y_),
  0,
  1,
  2,
  3,
  5,
  4,
  6,
  7,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, -1, sizeof(::CCitadelUserCmdPB)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CCitadelUserCmdPB_default_instance_._instance,
};

const char descriptor_table_protodef_citadel_5fusercmd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025citadel_usercmd.proto\032\026networkbasetype"
  "s.proto\032\rusercmd.proto\"\274\002\n\021CCitadelUserC"
  "mdPB\022\035\n\004base\030\001 \001(\0132\017.CBaseUserCmdPB\022(\n\023v"
  "ec_camera_position\030\002 \001(\0132\013.CMsgVector\022&\n"
  "\021ang_camera_angles\030\003 \001(\0132\013.CMsgQAngle\022\037\n"
  "\027execute_ability_indices\030\004 \001(\005\022\017\n\007in_sho"
  "p\030\005 \001(\010\022\034\n\024camera_roaming_speed\030\006 \001(\002\022\031\n"
  "\021using_free_cursor\030\010 \001(\010\022\037\n\023enemy_hero_a"
  "imed_at\030\n \001(\005:\002-1\022\024\n\014view_delta_x\030\013 \003(\005\022"
  "\024\n\014view_delta_y\030\014 \003(\005"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_citadel_5fusercmd_2eproto_deps[2] = {
  &::descriptor_table_networkbasetypes_2eproto,
  &::descriptor_table_usercmd_2eproto,
};
static ::_pbi::once_flag descriptor_table_citadel_5fusercmd_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_citadel_5fusercmd_2eproto = {
    false, false, 381, descriptor_table_protodef_citadel_5fusercmd_2eproto,
    "citadel_usercmd.proto",
    &descriptor_table_citadel_5fusercmd_2eproto_once, descriptor_table_citadel_5fusercmd_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_citadel_5fusercmd_2eproto::offsets,
    file_level_metadata_citadel_5fusercmd_2eproto, file_level_enum_descriptors_citadel_5fusercmd_2eproto,
    file_level_service_descriptors_citadel_5fusercmd_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_citadel_5fusercmd_2eproto_getter() {
  return &descriptor_table_citadel_5fusercmd_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_citadel_5fusercmd_2eproto(&descriptor_table_citadel_5fusercmd_2eproto);

// ===================================================================

class CCitadelUserCmdPB::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelUserCmdPB>()._impl_._has_bits_);
  static const ::CBaseUserCmdPB& base(const CCitadelUserCmdPB* msg);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgVector& vec_camera_position(const CCitadelUserCmdPB* msg);
  static void set_has_vec_camera_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgQAngle& ang_camera_angles(const CCitadelUserCmdPB* msg);
  static void set_has_ang_camera_angles(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_execute_ability_indices(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_in_shop(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_camera_roaming_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_using_free_cursor(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_enemy_hero_aimed_at(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::CBaseUserCmdPB&
CCitadelUserCmdPB::_Internal::base(const CCitadelUserCmdPB* msg) {
  return *msg->_impl_.base_;
}
const ::CMsgVector&
CCitadelUserCmdPB::_Internal::vec_camera_position(const CCitadelUserCmdPB* msg) {
  return *msg->_impl_.vec_camera_position_;
}
const ::CMsgQAngle&
CCitadelUserCmdPB::_Internal::ang_camera_angles(const CCitadelUserCmdPB* msg) {
  return *msg->_impl_.ang_camera_angles_;
}
void CCitadelUserCmdPB::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CCitadelUserCmdPB::clear_vec_camera_position() {
  if (_impl_.vec_camera_position_ != nullptr) _impl_.vec_camera_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CCitadelUserCmdPB::clear_ang_camera_angles() {
  if (_impl_.ang_camera_angles_ != nullptr) _impl_.ang_camera_angles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CCitadelUserCmdPB::CCitadelUserCmdPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelUserCmdPB)
}
CCitadelUserCmdPB::CCitadelUserCmdPB(const CCitadelUserCmdPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelUserCmdPB* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.view_delta_x_){from._impl_.view_delta_x_}
    , decltype(_impl_.view_delta_y_){from._impl_.view_delta_y_}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.vec_camera_position_){nullptr}
    , decltype(_impl_.ang_camera_angles_){nullptr}
    , decltype(_impl_.execute_ability_indices_){}
    , decltype(_impl_.camera_roaming_speed_){}
    , decltype(_impl_.in_shop_){}
    , decltype(_impl_.using_free_cursor_){}
    , decltype(_impl_.enemy_hero_aimed_at_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::CBaseUserCmdPB(*from._impl_.base_);
  }
  if (from._internal_has_vec_camera_position()) {
    _this->_impl_.vec_camera_position_ = new ::CMsgVector(*from._impl_.vec_camera_position_);
  }
  if (from._internal_has_ang_camera_angles()) {
    _this->_impl_.ang_camera_angles_ = new ::CMsgQAngle(*from._impl_.ang_camera_angles_);
  }
  ::memcpy(&_impl_.execute_ability_indices_, &from._impl_.execute_ability_indices_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enemy_hero_aimed_at_) -
    reinterpret_cast<char*>(&_impl_.execute_ability_indices_)) + sizeof(_impl_.enemy_hero_aimed_at_));
  // @@protoc_insertion_point(copy_constructor:CCitadelUserCmdPB)
}

inline void CCitadelUserCmdPB::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.view_delta_x_){arena}
    , decltype(_impl_.view_delta_y_){arena}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.vec_camera_position_){nullptr}
    , decltype(_impl_.ang_camera_angles_){nullptr}
    , decltype(_impl_.execute_ability_indices_){0}
    , decltype(_impl_.camera_roaming_speed_){0}
    , decltype(_impl_.in_shop_){false}
    , decltype(_impl_.using_free_cursor_){false}
    , decltype(_impl_.enemy_hero_aimed_at_){-1}
  };
}

CCitadelUserCmdPB::~CCitadelUserCmdPB() {
  // @@protoc_insertion_point(destructor:CCitadelUserCmdPB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelUserCmdPB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.view_delta_x_.~RepeatedField();
  _impl_.view_delta_y_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.base_;
  if (this != internal_default_instance()) delete _impl_.vec_camera_position_;
  if (this != internal_default_instance()) delete _impl_.ang_camera_angles_;
}

void CCitadelUserCmdPB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelUserCmdPB::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelUserCmdPB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.view_delta_x_.Clear();
  _impl_.view_delta_y_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.base_ != nullptr);
      _impl_.base_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.vec_camera_position_ != nullptr);
      _impl_.vec_camera_position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.ang_camera_angles_ != nullptr);
      _impl_.ang_camera_angles_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.execute_ability_indices_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.using_free_cursor_) -
        reinterpret_cast<char*>(&_impl_.execute_ability_indices_)) + sizeof(_impl_.using_free_cursor_));
    _impl_.enemy_hero_aimed_at_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelUserCmdPB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CBaseUserCmdPB base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector vec_camera_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vec_camera_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgQAngle ang_camera_angles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ang_camera_angles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 execute_ability_indices = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_execute_ability_indices(&has_bits);
          _impl_.execute_ability_indices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool in_shop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_in_shop(&has_bits);
          _impl_.in_shop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float camera_roaming_speed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_camera_roaming_speed(&has_bits);
          _impl_.camera_roaming_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool using_free_cursor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_using_free_cursor(&has_bits);
          _impl_.using_free_cursor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 enemy_hero_aimed_at = 10 [default = -1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_enemy_hero_aimed_at(&has_bits);
          _impl_.enemy_hero_aimed_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 view_delta_x = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_view_delta_x(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
        } else if (static_cast<uint8_t>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_view_delta_x(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 view_delta_y = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_view_delta_y(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<96>(ptr));
        } else if (static_cast<uint8_t>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_view_delta_y(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelUserCmdPB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelUserCmdPB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CBaseUserCmdPB base = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgVector vec_camera_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::vec_camera_position(this),
        _Internal::vec_camera_position(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgQAngle ang_camera_angles = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::ang_camera_angles(this),
        _Internal::ang_camera_angles(this).GetCachedSize(), target, stream);
  }

  // optional int32 execute_ability_indices = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_execute_ability_indices(), target);
  }

  // optional bool in_shop = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_in_shop(), target);
  }

  // optional float camera_roaming_speed = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_camera_roaming_speed(), target);
  }

  // optional bool using_free_cursor = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_using_free_cursor(), target);
  }

  // optional int32 enemy_hero_aimed_at = 10 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_enemy_hero_aimed_at(), target);
  }

  // repeated int32 view_delta_x = 11;
  for (int i = 0, n = this->_internal_view_delta_x_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_view_delta_x(i), target);
  }

  // repeated int32 view_delta_y = 12;
  for (int i = 0, n = this->_internal_view_delta_y_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_view_delta_y(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelUserCmdPB)
  return target;
}

size_t CCitadelUserCmdPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelUserCmdPB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 view_delta_x = 11;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.view_delta_x_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_view_delta_x_size());
    total_size += data_size;
  }

  // repeated int32 view_delta_y = 12;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.view_delta_y_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_view_delta_y_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CBaseUserCmdPB base = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.base_);
    }

    // optional .CMsgVector vec_camera_position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vec_camera_position_);
    }

    // optional .CMsgQAngle ang_camera_angles = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ang_camera_angles_);
    }

    // optional int32 execute_ability_indices = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_execute_ability_indices());
    }

    // optional float camera_roaming_speed = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional bool in_shop = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool using_free_cursor = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional int32 enemy_hero_aimed_at = 10 [default = -1];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_enemy_hero_aimed_at());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelUserCmdPB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelUserCmdPB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelUserCmdPB::GetClassData() const { return &_class_data_; }


void CCitadelUserCmdPB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelUserCmdPB*>(&to_msg);
  auto& from = static_cast<const CCitadelUserCmdPB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelUserCmdPB)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.view_delta_x_.MergeFrom(from._impl_.view_delta_x_);
  _this->_impl_.view_delta_y_.MergeFrom(from._impl_.view_delta_y_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_base()->::CBaseUserCmdPB::MergeFrom(
          from._internal_base());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_vec_camera_position()->::CMsgVector::MergeFrom(
          from._internal_vec_camera_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_ang_camera_angles()->::CMsgQAngle::MergeFrom(
          from._internal_ang_camera_angles());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.execute_ability_indices_ = from._impl_.execute_ability_indices_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.camera_roaming_speed_ = from._impl_.camera_roaming_speed_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.in_shop_ = from._impl_.in_shop_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.using_free_cursor_ = from._impl_.using_free_cursor_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.enemy_hero_aimed_at_ = from._impl_.enemy_hero_aimed_at_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelUserCmdPB::CopyFrom(const CCitadelUserCmdPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelUserCmdPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelUserCmdPB::IsInitialized() const {
  return true;
}

void CCitadelUserCmdPB::InternalSwap(CCitadelUserCmdPB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.view_delta_x_.InternalSwap(&other->_impl_.view_delta_x_);
  _impl_.view_delta_y_.InternalSwap(&other->_impl_.view_delta_y_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelUserCmdPB, _impl_.using_free_cursor_)
      + sizeof(CCitadelUserCmdPB::_impl_.using_free_cursor_)
      - PROTOBUF_FIELD_OFFSET(CCitadelUserCmdPB, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
  swap(_impl_.enemy_hero_aimed_at_, other->_impl_.enemy_hero_aimed_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelUserCmdPB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fusercmd_2eproto_getter, &descriptor_table_citadel_5fusercmd_2eproto_once,
      file_level_metadata_citadel_5fusercmd_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CCitadelUserCmdPB*
Arena::CreateMaybeMessage< ::CCitadelUserCmdPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelUserCmdPB >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
