// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: citadel_clientmessages.proto

#include "citadel_clientmessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CCitadelClientMsg_Pause::CCitadelClientMsg_Pause(
    ::_pbi::ConstantInitialized) {}
struct CCitadelClientMsg_PauseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelClientMsg_PauseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelClientMsg_PauseDefaultTypeInternal() {}
  union {
    CCitadelClientMsg_Pause _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelClientMsg_PauseDefaultTypeInternal _CCitadelClientMsg_Pause_default_instance_;
PROTOBUF_CONSTEXPR CCitadelClientMsg_MapPing::CCitadelClientMsg_MapPing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ping_location_)*/nullptr
  , /*decltype(_impl_.event_type_)*/0
  , /*decltype(_impl_.is_aggressive_ping_)*/false
  , /*decltype(_impl_.is_minimap_ping_)*/false
  , /*decltype(_impl_.is_blind_ping_)*/false
  , /*decltype(_impl_.entity_index_)*/-1} {}
struct CCitadelClientMsg_MapPingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelClientMsg_MapPingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelClientMsg_MapPingDefaultTypeInternal() {}
  union {
    CCitadelClientMsg_MapPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelClientMsg_MapPingDefaultTypeInternal _CCitadelClientMsg_MapPing_default_instance_;
PROTOBUF_CONSTEXPR CCitadelClientMsg_PingWheel::CCitadelClientMsg_PingWheel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ping_location_)*/nullptr
  , /*decltype(_impl_.ping_wheel_option_id_)*/0u
  , /*decltype(_impl_.subnav_message_id_)*/0u
  , /*decltype(_impl_.entity_index_)*/-1} {}
struct CCitadelClientMsg_PingWheelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelClientMsg_PingWheelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelClientMsg_PingWheelDefaultTypeInternal() {}
  union {
    CCitadelClientMsg_PingWheel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelClientMsg_PingWheelDefaultTypeInternal _CCitadelClientMsg_PingWheel_default_instance_;
PROTOBUF_CONSTEXPR CCitadelClientMsg_AbilityPing::CCitadelClientMsg_AbilityPing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pinged_ability_id_)*/0u
  , /*decltype(_impl_.entity_index_)*/-1
  , /*decltype(_impl_.pinged_player_slot_)*/-1} {}
struct CCitadelClientMsg_AbilityPingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelClientMsg_AbilityPingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelClientMsg_AbilityPingDefaultTypeInternal() {}
  union {
    CCitadelClientMsg_AbilityPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelClientMsg_AbilityPingDefaultTypeInternal _CCitadelClientMsg_AbilityPing_default_instance_;
PROTOBUF_CONSTEXPR CCitadelClientMsg_MapLine::CCitadelClientMsg_MapLine(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mapline_)*/nullptr} {}
struct CCitadelClientMsg_MapLineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelClientMsg_MapLineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelClientMsg_MapLineDefaultTypeInternal() {}
  union {
    CCitadelClientMsg_MapLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelClientMsg_MapLineDefaultTypeInternal _CCitadelClientMsg_MapLine_default_instance_;
PROTOBUF_CONSTEXPR CCitadelClientMsg_QuickResponse::CCitadelClientMsg_QuickResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ping_wheel_message_id_)*/0u
  , /*decltype(_impl_.responding_to_ping_message_id_)*/0u
  , /*decltype(_impl_.responding_to_player_slot_)*/-1} {}
struct CCitadelClientMsg_QuickResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelClientMsg_QuickResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelClientMsg_QuickResponseDefaultTypeInternal() {}
  union {
    CCitadelClientMsg_QuickResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelClientMsg_QuickResponseDefaultTypeInternal _CCitadelClientMsg_QuickResponse_default_instance_;
PROTOBUF_CONSTEXPR CCitadelClientMsg_PerformanceStats::CCitadelClientMsg_PerformanceStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.current_game_time_)*/0
  , /*decltype(_impl_.average_fps_)*/0
  , /*decltype(_impl_.min_fps_)*/0
  , /*decltype(_impl_.max_fps_)*/0} {}
struct CCitadelClientMsg_PerformanceStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelClientMsg_PerformanceStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelClientMsg_PerformanceStatsDefaultTypeInternal() {}
  union {
    CCitadelClientMsg_PerformanceStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelClientMsg_PerformanceStatsDefaultTypeInternal _CCitadelClientMsg_PerformanceStats_default_instance_;
PROTOBUF_CONSTEXPR CCitadelClientMsg_ChatMsg::CCitadelClientMsg_ChatMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chat_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.all_chat_)*/false
  , /*decltype(_impl_.lane_color_)*/0} {}
struct CCitadelClientMsg_ChatMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelClientMsg_ChatMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelClientMsg_ChatMsgDefaultTypeInternal() {}
  union {
    CCitadelClientMsg_ChatMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelClientMsg_ChatMsgDefaultTypeInternal _CCitadelClientMsg_ChatMsg_default_instance_;
PROTOBUF_CONSTEXPR CCitadelClientMsg_PerfReport::CCitadelClientMsg_PerfReport(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.average_frame_time_)*/0
  , /*decltype(_impl_.max_frame_time_)*/0
  , /*decltype(_impl_.average_compute_time_)*/0
  , /*decltype(_impl_.max_compute_time_)*/0
  , /*decltype(_impl_.average_client_tick_time_)*/0
  , /*decltype(_impl_.max_client_tick_time_)*/0
  , /*decltype(_impl_.average_client_simulate_time_)*/0
  , /*decltype(_impl_.max_client_simulate_time_)*/0
  , /*decltype(_impl_.average_output_time_)*/0
  , /*decltype(_impl_.max_output_time_)*/0
  , /*decltype(_impl_.average_wait_for_rendering_to_complete_time_)*/0
  , /*decltype(_impl_.max_wait_for_rendering_to_complete_time_)*/0
  , /*decltype(_impl_.average_swap_time_)*/0
  , /*decltype(_impl_.max_swap_time_)*/0
  , /*decltype(_impl_.average_frame_update_time_)*/0
  , /*decltype(_impl_.max_frame_update_time_)*/0
  , /*decltype(_impl_.average_idle_time_)*/0
  , /*decltype(_impl_.max_idle_time_)*/0
  , /*decltype(_impl_.average_input_processing_time_)*/0
  , /*decltype(_impl_.max_input_processing_time_)*/0} {}
struct CCitadelClientMsg_PerfReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelClientMsg_PerfReportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelClientMsg_PerfReportDefaultTypeInternal() {}
  union {
    CCitadelClientMsg_PerfReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelClientMsg_PerfReportDefaultTypeInternal _CCitadelClientMsg_PerfReport_default_instance_;
PROTOBUF_CONSTEXPR CCitadelClientMsg_GetDamageStats::CCitadelClientMsg_GetDamageStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ability_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lobby_player_slot_)*/0u} {}
struct CCitadelClientMsg_GetDamageStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelClientMsg_GetDamageStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelClientMsg_GetDamageStatsDefaultTypeInternal() {}
  union {
    CCitadelClientMsg_GetDamageStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelClientMsg_GetDamageStatsDefaultTypeInternal _CCitadelClientMsg_GetDamageStats_default_instance_;
PROTOBUF_CONSTEXPR CCitadelClientCachedPlayerStats_Stat::CCitadelClientCachedPlayerStats_Stat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stat_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.all_time_total_)*/uint64_t{0u}
  , /*decltype(_impl_.all_time_match_max_)*/0u
  , /*decltype(_impl_.all_time_life_max_)*/0u} {}
struct CCitadelClientCachedPlayerStats_StatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelClientCachedPlayerStats_StatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelClientCachedPlayerStats_StatDefaultTypeInternal() {}
  union {
    CCitadelClientCachedPlayerStats_Stat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelClientCachedPlayerStats_StatDefaultTypeInternal _CCitadelClientCachedPlayerStats_Stat_default_instance_;
PROTOBUF_CONSTEXPR CCitadelClientCachedPlayerStats::CCitadelClientCachedPlayerStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_.version_)*/0u} {}
struct CCitadelClientCachedPlayerStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelClientCachedPlayerStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelClientCachedPlayerStatsDefaultTypeInternal() {}
  union {
    CCitadelClientCachedPlayerStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelClientCachedPlayerStatsDefaultTypeInternal _CCitadelClientCachedPlayerStats_default_instance_;
PROTOBUF_CONSTEXPR CCitadelClientMsg_ExecuteMapUnitAbility::CCitadelClientMsg_ExecuteMapUnitAbility(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ability_entity_index_)*/0
  , /*decltype(_impl_.target_entity_index_)*/0} {}
struct CCitadelClientMsg_ExecuteMapUnitAbilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelClientMsg_ExecuteMapUnitAbilityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelClientMsg_ExecuteMapUnitAbilityDefaultTypeInternal() {}
  union {
    CCitadelClientMsg_ExecuteMapUnitAbility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelClientMsg_ExecuteMapUnitAbilityDefaultTypeInternal _CCitadelClientMsg_ExecuteMapUnitAbility_default_instance_;
PROTOBUF_CONSTEXPR CCitadelClientMsg_CheaterVote::CCitadelClientMsg_CheaterVote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.end_game_immediately_)*/false} {}
struct CCitadelClientMsg_CheaterVoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelClientMsg_CheaterVoteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelClientMsg_CheaterVoteDefaultTypeInternal() {}
  union {
    CCitadelClientMsg_CheaterVote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelClientMsg_CheaterVoteDefaultTypeInternal _CCitadelClientMsg_CheaterVote_default_instance_;
PROTOBUF_CONSTEXPR CCitadelClientMsg_MutePlayers::CCitadelClientMsg_MutePlayers(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_slots_)*/{}
  , /*decltype(_impl_.unmute_)*/false} {}
struct CCitadelClientMsg_MutePlayersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCitadelClientMsg_MutePlayersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCitadelClientMsg_MutePlayersDefaultTypeInternal() {}
  union {
    CCitadelClientMsg_MutePlayers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCitadelClientMsg_MutePlayersDefaultTypeInternal _CCitadelClientMsg_MutePlayers_default_instance_;
static ::_pb::Metadata file_level_metadata_citadel_5fclientmessages_2eproto[15];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_citadel_5fclientmessages_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_citadel_5fclientmessages_2eproto = nullptr;

const uint32_t TableStruct_citadel_5fclientmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_Pause, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_MapPing, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_MapPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_MapPing, _impl_.ping_location_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_MapPing, _impl_.event_type_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_MapPing, _impl_.entity_index_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_MapPing, _impl_.is_aggressive_ping_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_MapPing, _impl_.is_minimap_ping_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_MapPing, _impl_.is_blind_ping_),
  0,
  1,
  5,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PingWheel, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PingWheel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PingWheel, _impl_.ping_wheel_option_id_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PingWheel, _impl_.subnav_message_id_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PingWheel, _impl_.ping_location_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PingWheel, _impl_.entity_index_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_AbilityPing, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_AbilityPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_AbilityPing, _impl_.entity_index_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_AbilityPing, _impl_.pinged_ability_id_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_AbilityPing, _impl_.pinged_player_slot_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_MapLine, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_MapLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_MapLine, _impl_.mapline_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_QuickResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_QuickResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_QuickResponse, _impl_.ping_wheel_message_id_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_QuickResponse, _impl_.responding_to_ping_message_id_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_QuickResponse, _impl_.responding_to_player_slot_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerformanceStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerformanceStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerformanceStats, _impl_.current_game_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerformanceStats, _impl_.average_fps_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerformanceStats, _impl_.min_fps_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerformanceStats, _impl_.max_fps_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_ChatMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_ChatMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_ChatMsg, _impl_.chat_text_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_ChatMsg, _impl_.all_chat_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_ChatMsg, _impl_.lane_color_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerfReport, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerfReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerfReport, _impl_.average_frame_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerfReport, _impl_.max_frame_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerfReport, _impl_.average_compute_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerfReport, _impl_.max_compute_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerfReport, _impl_.average_client_tick_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerfReport, _impl_.max_client_tick_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerfReport, _impl_.average_client_simulate_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerfReport, _impl_.max_client_simulate_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerfReport, _impl_.average_output_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerfReport, _impl_.max_output_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerfReport, _impl_.average_wait_for_rendering_to_complete_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerfReport, _impl_.max_wait_for_rendering_to_complete_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerfReport, _impl_.average_swap_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerfReport, _impl_.max_swap_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerfReport, _impl_.average_frame_update_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerfReport, _impl_.max_frame_update_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerfReport, _impl_.average_idle_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerfReport, _impl_.max_idle_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerfReport, _impl_.average_input_processing_time_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_PerfReport, _impl_.max_input_processing_time_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_GetDamageStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_GetDamageStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_GetDamageStats, _impl_.lobby_player_slot_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_GetDamageStats, _impl_.ability_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CCitadelClientCachedPlayerStats_Stat, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientCachedPlayerStats_Stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelClientCachedPlayerStats_Stat, _impl_.stat_name_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientCachedPlayerStats_Stat, _impl_.all_time_total_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientCachedPlayerStats_Stat, _impl_.all_time_match_max_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientCachedPlayerStats_Stat, _impl_.all_time_life_max_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CCitadelClientCachedPlayerStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientCachedPlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelClientCachedPlayerStats, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientCachedPlayerStats, _impl_.stats_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_ExecuteMapUnitAbility, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_ExecuteMapUnitAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_ExecuteMapUnitAbility, _impl_.ability_entity_index_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_ExecuteMapUnitAbility, _impl_.target_entity_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_CheaterVote, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_CheaterVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_CheaterVote, _impl_.end_game_immediately_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_MutePlayers, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_MutePlayers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_MutePlayers, _impl_.player_slots_),
  PROTOBUF_FIELD_OFFSET(::CCitadelClientMsg_MutePlayers, _impl_.unmute_),
  ~0u,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::CCitadelClientMsg_Pause)},
  { 6, 18, -1, sizeof(::CCitadelClientMsg_MapPing)},
  { 24, 34, -1, sizeof(::CCitadelClientMsg_PingWheel)},
  { 38, 47, -1, sizeof(::CCitadelClientMsg_AbilityPing)},
  { 50, 57, -1, sizeof(::CCitadelClientMsg_MapLine)},
  { 58, 67, -1, sizeof(::CCitadelClientMsg_QuickResponse)},
  { 70, 80, -1, sizeof(::CCitadelClientMsg_PerformanceStats)},
  { 84, 93, -1, sizeof(::CCitadelClientMsg_ChatMsg)},
  { 96, 122, -1, sizeof(::CCitadelClientMsg_PerfReport)},
  { 142, 150, -1, sizeof(::CCitadelClientMsg_GetDamageStats)},
  { 152, 162, -1, sizeof(::CCitadelClientCachedPlayerStats_Stat)},
  { 166, 174, -1, sizeof(::CCitadelClientCachedPlayerStats)},
  { 176, 184, -1, sizeof(::CCitadelClientMsg_ExecuteMapUnitAbility)},
  { 186, 193, -1, sizeof(::CCitadelClientMsg_CheaterVote)},
  { 194, 202, -1, sizeof(::CCitadelClientMsg_MutePlayers)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CCitadelClientMsg_Pause_default_instance_._instance,
  &::_CCitadelClientMsg_MapPing_default_instance_._instance,
  &::_CCitadelClientMsg_PingWheel_default_instance_._instance,
  &::_CCitadelClientMsg_AbilityPing_default_instance_._instance,
  &::_CCitadelClientMsg_MapLine_default_instance_._instance,
  &::_CCitadelClientMsg_QuickResponse_default_instance_._instance,
  &::_CCitadelClientMsg_PerformanceStats_default_instance_._instance,
  &::_CCitadelClientMsg_ChatMsg_default_instance_._instance,
  &::_CCitadelClientMsg_PerfReport_default_instance_._instance,
  &::_CCitadelClientMsg_GetDamageStats_default_instance_._instance,
  &::_CCitadelClientCachedPlayerStats_Stat_default_instance_._instance,
  &::_CCitadelClientCachedPlayerStats_default_instance_._instance,
  &::_CCitadelClientMsg_ExecuteMapUnitAbility_default_instance_._instance,
  &::_CCitadelClientMsg_CheaterVote_default_instance_._instance,
  &::_CCitadelClientMsg_MutePlayers_default_instance_._instance,
};

const char descriptor_table_protodef_citadel_5fclientmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034citadel_clientmessages.proto\032\026networkb"
  "asetypes.proto\032\037citadel_gcmessages_commo"
  "n.proto\"\031\n\027CCitadelClientMsg_Pause\"\271\001\n\031C"
  "CitadelClientMsg_MapPing\022\"\n\rping_locatio"
  "n\030\001 \001(\0132\013.CMsgVector\022\022\n\nevent_type\030\002 \001(\005"
  "\022\030\n\014entity_index\030\003 \001(\005:\002-1\022\032\n\022is_aggress"
  "ive_ping\030\004 \001(\010\022\027\n\017is_minimap_ping\030\005 \001(\010\022"
  "\025\n\ris_blind_ping\030\006 \001(\010\"\224\001\n\033CCitadelClien"
  "tMsg_PingWheel\022\034\n\024ping_wheel_option_id\030\001"
  " \001(\r\022\031\n\021subnav_message_id\030\002 \001(\r\022\"\n\rping_"
  "location\030\003 \001(\0132\013.CMsgVector\022\030\n\014entity_in"
  "dex\030\004 \001(\005:\002-1\"t\n\035CCitadelClientMsg_Abili"
  "tyPing\022\030\n\014entity_index\030\001 \001(\005:\002-1\022\031\n\021ping"
  "ed_ability_id\030\002 \001(\r\022\036\n\022pinged_player_slo"
  "t\030\003 \001(\005:\002-1\":\n\031CCitadelClientMsg_MapLine"
  "\022\035\n\007mapline\030\001 \001(\0132\014.CMsgMapLine\"\216\001\n\037CCit"
  "adelClientMsg_QuickResponse\022\035\n\025ping_whee"
  "l_message_id\030\001 \001(\r\022%\n\035responding_to_ping"
  "_message_id\030\002 \001(\r\022%\n\031responding_to_playe"
  "r_slot\030\003 \001(\005:\002-1\"v\n\"CCitadelClientMsg_Pe"
  "rformanceStats\022\031\n\021current_game_time\030\001 \001("
  "\002\022\023\n\013average_fps\030\002 \001(\002\022\017\n\007min_fps\030\003 \001(\002\022"
  "\017\n\007max_fps\030\004 \001(\002\"z\n\031CCitadelClientMsg_Ch"
  "atMsg\022\021\n\tchat_text\030\001 \001(\t\022\020\n\010all_chat\030\002 \001"
  "(\010\0228\n\nlane_color\030\003 \001(\0162\016.CMsgLaneColor:\024"
  "k_ELaneColor_Invalid\"\236\005\n\034CCitadelClientM"
  "sg_PerfReport\022\032\n\022average_frame_time\030\001 \001("
  "\002\022\026\n\016max_frame_time\030\002 \001(\002\022\034\n\024average_com"
  "pute_time\030\003 \001(\002\022\030\n\020max_compute_time\030\004 \001("
  "\002\022 \n\030average_client_tick_time\030\005 \001(\002\022\034\n\024m"
  "ax_client_tick_time\030\006 \001(\002\022$\n\034average_cli"
  "ent_simulate_time\030\007 \001(\002\022 \n\030max_client_si"
  "mulate_time\030\010 \001(\002\022\033\n\023average_output_time"
  "\030\t \001(\002\022\027\n\017max_output_time\030\n \001(\002\0223\n+avera"
  "ge_wait_for_rendering_to_complete_time\030\013"
  " \001(\002\022/\n\'max_wait_for_rendering_to_comple"
  "te_time\030\014 \001(\002\022\031\n\021average_swap_time\030\r \001(\002"
  "\022\025\n\rmax_swap_time\030\016 \001(\002\022!\n\031average_frame"
  "_update_time\030\017 \001(\002\022\035\n\025max_frame_update_t"
  "ime\030\020 \001(\002\022\031\n\021average_idle_time\030\021 \001(\002\022\025\n\r"
  "max_idle_time\030\022 \001(\002\022%\n\035average_input_pro"
  "cessing_time\030\023 \001(\002\022!\n\031max_input_processi"
  "ng_time\030\024 \001(\002\"S\n CCitadelClientMsg_GetDa"
  "mageStats\022\031\n\021lobby_player_slot\030\001 \001(\r\022\024\n\014"
  "ability_name\030\002 \001(\t\"\322\001\n\037CCitadelClientCac"
  "hedPlayerStats\022\017\n\007version\030\001 \001(\r\0224\n\005stats"
  "\030\002 \003(\0132%.CCitadelClientCachedPlayerStats"
  ".Stat\032h\n\004Stat\022\021\n\tstat_name\030\001 \001(\t\022\026\n\016all_"
  "time_total\030\002 \001(\004\022\032\n\022all_time_match_max\030\003"
  " \001(\r\022\031\n\021all_time_life_max\030\004 \001(\r\"d\n\'CCita"
  "delClientMsg_ExecuteMapUnitAbility\022\034\n\024ab"
  "ility_entity_index\030\001 \001(\005\022\033\n\023target_entit"
  "y_index\030\002 \001(\005\"=\n\035CCitadelClientMsg_Cheat"
  "erVote\022\034\n\024end_game_immediately\030\001 \001(\010\"E\n\035"
  "CCitadelClientMsg_MutePlayers\022\024\n\014player_"
  "slots\030\001 \003(\005\022\016\n\006unmute\030\002 \001(\010*\220\003\n\026ECitadel"
  "ClientMessages\022\027\n\022CITADEL_CM_MapPing\020\352\007\022"
  " \n\033CITADEL_CM_PerformanceStats\020\353\007\022\031\n\024CIT"
  "ADEL_CM_PingWheel\020\354\007\022\027\n\022CITADEL_CM_ChatM"
  "sg\020\355\007\022\032\n\025CITADEL_CM_PerfReport\020\356\007\022\035\n\030CIT"
  "ADEL_CM_QuickResponse\020\357\007\022\025\n\020CITADEL_CM_P"
  "ause\020\360\007\022\027\n\022CITADEL_CM_MapLine\020\361\007\022\033\n\026CITA"
  "DEL_CM_AbilityPing\020\362\007\022%\n CITADEL_CM_Exec"
  "uteMapUnitAbility\020\363\007\022\036\n\031CITADEL_CM_GetDa"
  "mageStats\020\364\007\022\033\n\026CITADEL_CM_CheaterVote\020\365"
  "\007\022\033\n\026CITADEL_CM_MutePlayers\020\366\007"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_citadel_5fclientmessages_2eproto_deps[2] = {
  &::descriptor_table_citadel_5fgcmessages_5fcommon_2eproto,
  &::descriptor_table_networkbasetypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_citadel_5fclientmessages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_citadel_5fclientmessages_2eproto = {
    false, false, 2630, descriptor_table_protodef_citadel_5fclientmessages_2eproto,
    "citadel_clientmessages.proto",
    &descriptor_table_citadel_5fclientmessages_2eproto_once, descriptor_table_citadel_5fclientmessages_2eproto_deps, 2, 15,
    schemas, file_default_instances, TableStruct_citadel_5fclientmessages_2eproto::offsets,
    file_level_metadata_citadel_5fclientmessages_2eproto, file_level_enum_descriptors_citadel_5fclientmessages_2eproto,
    file_level_service_descriptors_citadel_5fclientmessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_citadel_5fclientmessages_2eproto_getter() {
  return &descriptor_table_citadel_5fclientmessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_citadel_5fclientmessages_2eproto(&descriptor_table_citadel_5fclientmessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECitadelClientMessages_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_citadel_5fclientmessages_2eproto);
  return file_level_enum_descriptors_citadel_5fclientmessages_2eproto[0];
}
bool ECitadelClientMessages_IsValid(int value) {
  switch (value) {
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CCitadelClientMsg_Pause::_Internal {
 public:
};

CCitadelClientMsg_Pause::CCitadelClientMsg_Pause(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CCitadelClientMsg_Pause)
}
CCitadelClientMsg_Pause::CCitadelClientMsg_Pause(const CCitadelClientMsg_Pause& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CCitadelClientMsg_Pause* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCitadelClientMsg_Pause)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelClientMsg_Pause::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelClientMsg_Pause::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CCitadelClientMsg_Pause::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fclientmessages_2eproto_getter, &descriptor_table_citadel_5fclientmessages_2eproto_once,
      file_level_metadata_citadel_5fclientmessages_2eproto[0]);
}

// ===================================================================

class CCitadelClientMsg_MapPing::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelClientMsg_MapPing>()._impl_._has_bits_);
  static const ::CMsgVector& ping_location(const CCitadelClientMsg_MapPing* msg);
  static void set_has_ping_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entity_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_aggressive_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_minimap_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_blind_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgVector&
CCitadelClientMsg_MapPing::_Internal::ping_location(const CCitadelClientMsg_MapPing* msg) {
  return *msg->_impl_.ping_location_;
}
void CCitadelClientMsg_MapPing::clear_ping_location() {
  if (_impl_.ping_location_ != nullptr) _impl_.ping_location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CCitadelClientMsg_MapPing::CCitadelClientMsg_MapPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelClientMsg_MapPing)
}
CCitadelClientMsg_MapPing::CCitadelClientMsg_MapPing(const CCitadelClientMsg_MapPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelClientMsg_MapPing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ping_location_){nullptr}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.is_aggressive_ping_){}
    , decltype(_impl_.is_minimap_ping_){}
    , decltype(_impl_.is_blind_ping_){}
    , decltype(_impl_.entity_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ping_location()) {
    _this->_impl_.ping_location_ = new ::CMsgVector(*from._impl_.ping_location_);
  }
  ::memcpy(&_impl_.event_type_, &from._impl_.event_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entity_index_) -
    reinterpret_cast<char*>(&_impl_.event_type_)) + sizeof(_impl_.entity_index_));
  // @@protoc_insertion_point(copy_constructor:CCitadelClientMsg_MapPing)
}

inline void CCitadelClientMsg_MapPing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ping_location_){nullptr}
    , decltype(_impl_.event_type_){0}
    , decltype(_impl_.is_aggressive_ping_){false}
    , decltype(_impl_.is_minimap_ping_){false}
    , decltype(_impl_.is_blind_ping_){false}
    , decltype(_impl_.entity_index_){-1}
  };
}

CCitadelClientMsg_MapPing::~CCitadelClientMsg_MapPing() {
  // @@protoc_insertion_point(destructor:CCitadelClientMsg_MapPing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelClientMsg_MapPing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ping_location_;
}

void CCitadelClientMsg_MapPing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelClientMsg_MapPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelClientMsg_MapPing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.ping_location_ != nullptr);
    _impl_.ping_location_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.event_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_blind_ping_) -
        reinterpret_cast<char*>(&_impl_.event_type_)) + sizeof(_impl_.is_blind_ping_));
    _impl_.entity_index_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelClientMsg_MapPing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgVector ping_location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 event_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_event_type(&has_bits);
          _impl_.event_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 entity_index = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_entity_index(&has_bits);
          _impl_.entity_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_aggressive_ping = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_aggressive_ping(&has_bits);
          _impl_.is_aggressive_ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_minimap_ping = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_minimap_ping(&has_bits);
          _impl_.is_minimap_ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_blind_ping = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_blind_ping(&has_bits);
          _impl_.is_blind_ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelClientMsg_MapPing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelClientMsg_MapPing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgVector ping_location = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ping_location(this),
        _Internal::ping_location(this).GetCachedSize(), target, stream);
  }

  // optional int32 event_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_event_type(), target);
  }

  // optional int32 entity_index = 3 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_entity_index(), target);
  }

  // optional bool is_aggressive_ping = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_aggressive_ping(), target);
  }

  // optional bool is_minimap_ping = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_minimap_ping(), target);
  }

  // optional bool is_blind_ping = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_blind_ping(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelClientMsg_MapPing)
  return target;
}

size_t CCitadelClientMsg_MapPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelClientMsg_MapPing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .CMsgVector ping_location = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ping_location_);
    }

    // optional int32 event_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_event_type());
    }

    // optional bool is_aggressive_ping = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_minimap_ping = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_blind_ping = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 entity_index = 3 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entity_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelClientMsg_MapPing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelClientMsg_MapPing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelClientMsg_MapPing::GetClassData() const { return &_class_data_; }


void CCitadelClientMsg_MapPing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelClientMsg_MapPing*>(&to_msg);
  auto& from = static_cast<const CCitadelClientMsg_MapPing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelClientMsg_MapPing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ping_location()->::CMsgVector::MergeFrom(
          from._internal_ping_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_type_ = from._impl_.event_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_aggressive_ping_ = from._impl_.is_aggressive_ping_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.is_minimap_ping_ = from._impl_.is_minimap_ping_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_blind_ping_ = from._impl_.is_blind_ping_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.entity_index_ = from._impl_.entity_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelClientMsg_MapPing::CopyFrom(const CCitadelClientMsg_MapPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelClientMsg_MapPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelClientMsg_MapPing::IsInitialized() const {
  return true;
}

void CCitadelClientMsg_MapPing::InternalSwap(CCitadelClientMsg_MapPing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelClientMsg_MapPing, _impl_.is_blind_ping_)
      + sizeof(CCitadelClientMsg_MapPing::_impl_.is_blind_ping_)
      - PROTOBUF_FIELD_OFFSET(CCitadelClientMsg_MapPing, _impl_.ping_location_)>(
          reinterpret_cast<char*>(&_impl_.ping_location_),
          reinterpret_cast<char*>(&other->_impl_.ping_location_));
  swap(_impl_.entity_index_, other->_impl_.entity_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelClientMsg_MapPing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fclientmessages_2eproto_getter, &descriptor_table_citadel_5fclientmessages_2eproto_once,
      file_level_metadata_citadel_5fclientmessages_2eproto[1]);
}

// ===================================================================

class CCitadelClientMsg_PingWheel::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelClientMsg_PingWheel>()._impl_._has_bits_);
  static void set_has_ping_wheel_option_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_subnav_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgVector& ping_location(const CCitadelClientMsg_PingWheel* msg);
  static void set_has_ping_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entity_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CMsgVector&
CCitadelClientMsg_PingWheel::_Internal::ping_location(const CCitadelClientMsg_PingWheel* msg) {
  return *msg->_impl_.ping_location_;
}
void CCitadelClientMsg_PingWheel::clear_ping_location() {
  if (_impl_.ping_location_ != nullptr) _impl_.ping_location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CCitadelClientMsg_PingWheel::CCitadelClientMsg_PingWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelClientMsg_PingWheel)
}
CCitadelClientMsg_PingWheel::CCitadelClientMsg_PingWheel(const CCitadelClientMsg_PingWheel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelClientMsg_PingWheel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ping_location_){nullptr}
    , decltype(_impl_.ping_wheel_option_id_){}
    , decltype(_impl_.subnav_message_id_){}
    , decltype(_impl_.entity_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ping_location()) {
    _this->_impl_.ping_location_ = new ::CMsgVector(*from._impl_.ping_location_);
  }
  ::memcpy(&_impl_.ping_wheel_option_id_, &from._impl_.ping_wheel_option_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entity_index_) -
    reinterpret_cast<char*>(&_impl_.ping_wheel_option_id_)) + sizeof(_impl_.entity_index_));
  // @@protoc_insertion_point(copy_constructor:CCitadelClientMsg_PingWheel)
}

inline void CCitadelClientMsg_PingWheel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ping_location_){nullptr}
    , decltype(_impl_.ping_wheel_option_id_){0u}
    , decltype(_impl_.subnav_message_id_){0u}
    , decltype(_impl_.entity_index_){-1}
  };
}

CCitadelClientMsg_PingWheel::~CCitadelClientMsg_PingWheel() {
  // @@protoc_insertion_point(destructor:CCitadelClientMsg_PingWheel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelClientMsg_PingWheel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ping_location_;
}

void CCitadelClientMsg_PingWheel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelClientMsg_PingWheel::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelClientMsg_PingWheel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.ping_location_ != nullptr);
    _impl_.ping_location_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.ping_wheel_option_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.subnav_message_id_) -
        reinterpret_cast<char*>(&_impl_.ping_wheel_option_id_)) + sizeof(_impl_.subnav_message_id_));
    _impl_.entity_index_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelClientMsg_PingWheel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ping_wheel_option_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ping_wheel_option_id(&has_bits);
          _impl_.ping_wheel_option_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 subnav_message_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_subnav_message_id(&has_bits);
          _impl_.subnav_message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector ping_location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 entity_index = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_entity_index(&has_bits);
          _impl_.entity_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelClientMsg_PingWheel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelClientMsg_PingWheel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 ping_wheel_option_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ping_wheel_option_id(), target);
  }

  // optional uint32 subnav_message_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_subnav_message_id(), target);
  }

  // optional .CMsgVector ping_location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::ping_location(this),
        _Internal::ping_location(this).GetCachedSize(), target, stream);
  }

  // optional int32 entity_index = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_entity_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelClientMsg_PingWheel)
  return target;
}

size_t CCitadelClientMsg_PingWheel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelClientMsg_PingWheel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgVector ping_location = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ping_location_);
    }

    // optional uint32 ping_wheel_option_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ping_wheel_option_id());
    }

    // optional uint32 subnav_message_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_subnav_message_id());
    }

    // optional int32 entity_index = 4 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entity_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelClientMsg_PingWheel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelClientMsg_PingWheel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelClientMsg_PingWheel::GetClassData() const { return &_class_data_; }


void CCitadelClientMsg_PingWheel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelClientMsg_PingWheel*>(&to_msg);
  auto& from = static_cast<const CCitadelClientMsg_PingWheel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelClientMsg_PingWheel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ping_location()->::CMsgVector::MergeFrom(
          from._internal_ping_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ping_wheel_option_id_ = from._impl_.ping_wheel_option_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.subnav_message_id_ = from._impl_.subnav_message_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.entity_index_ = from._impl_.entity_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelClientMsg_PingWheel::CopyFrom(const CCitadelClientMsg_PingWheel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelClientMsg_PingWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelClientMsg_PingWheel::IsInitialized() const {
  return true;
}

void CCitadelClientMsg_PingWheel::InternalSwap(CCitadelClientMsg_PingWheel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelClientMsg_PingWheel, _impl_.subnav_message_id_)
      + sizeof(CCitadelClientMsg_PingWheel::_impl_.subnav_message_id_)
      - PROTOBUF_FIELD_OFFSET(CCitadelClientMsg_PingWheel, _impl_.ping_location_)>(
          reinterpret_cast<char*>(&_impl_.ping_location_),
          reinterpret_cast<char*>(&other->_impl_.ping_location_));
  swap(_impl_.entity_index_, other->_impl_.entity_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelClientMsg_PingWheel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fclientmessages_2eproto_getter, &descriptor_table_citadel_5fclientmessages_2eproto_once,
      file_level_metadata_citadel_5fclientmessages_2eproto[2]);
}

// ===================================================================

class CCitadelClientMsg_AbilityPing::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelClientMsg_AbilityPing>()._impl_._has_bits_);
  static void set_has_entity_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pinged_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pinged_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCitadelClientMsg_AbilityPing::CCitadelClientMsg_AbilityPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelClientMsg_AbilityPing)
}
CCitadelClientMsg_AbilityPing::CCitadelClientMsg_AbilityPing(const CCitadelClientMsg_AbilityPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelClientMsg_AbilityPing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pinged_ability_id_){}
    , decltype(_impl_.entity_index_){}
    , decltype(_impl_.pinged_player_slot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pinged_ability_id_, &from._impl_.pinged_ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pinged_player_slot_) -
    reinterpret_cast<char*>(&_impl_.pinged_ability_id_)) + sizeof(_impl_.pinged_player_slot_));
  // @@protoc_insertion_point(copy_constructor:CCitadelClientMsg_AbilityPing)
}

inline void CCitadelClientMsg_AbilityPing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pinged_ability_id_){0u}
    , decltype(_impl_.entity_index_){-1}
    , decltype(_impl_.pinged_player_slot_){-1}
  };
}

CCitadelClientMsg_AbilityPing::~CCitadelClientMsg_AbilityPing() {
  // @@protoc_insertion_point(destructor:CCitadelClientMsg_AbilityPing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelClientMsg_AbilityPing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCitadelClientMsg_AbilityPing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelClientMsg_AbilityPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelClientMsg_AbilityPing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.pinged_ability_id_ = 0u;
    _impl_.entity_index_ = -1;
    _impl_.pinged_player_slot_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelClientMsg_AbilityPing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 entity_index = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entity_index(&has_bits);
          _impl_.entity_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pinged_ability_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pinged_ability_id(&has_bits);
          _impl_.pinged_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pinged_player_slot = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_pinged_player_slot(&has_bits);
          _impl_.pinged_player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelClientMsg_AbilityPing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelClientMsg_AbilityPing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 entity_index = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_entity_index(), target);
  }

  // optional uint32 pinged_ability_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pinged_ability_id(), target);
  }

  // optional int32 pinged_player_slot = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_pinged_player_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelClientMsg_AbilityPing)
  return target;
}

size_t CCitadelClientMsg_AbilityPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelClientMsg_AbilityPing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 pinged_ability_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pinged_ability_id());
    }

    // optional int32 entity_index = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entity_index());
    }

    // optional int32 pinged_player_slot = 3 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pinged_player_slot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelClientMsg_AbilityPing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelClientMsg_AbilityPing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelClientMsg_AbilityPing::GetClassData() const { return &_class_data_; }


void CCitadelClientMsg_AbilityPing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelClientMsg_AbilityPing*>(&to_msg);
  auto& from = static_cast<const CCitadelClientMsg_AbilityPing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelClientMsg_AbilityPing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.pinged_ability_id_ = from._impl_.pinged_ability_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.entity_index_ = from._impl_.entity_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.pinged_player_slot_ = from._impl_.pinged_player_slot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelClientMsg_AbilityPing::CopyFrom(const CCitadelClientMsg_AbilityPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelClientMsg_AbilityPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelClientMsg_AbilityPing::IsInitialized() const {
  return true;
}

void CCitadelClientMsg_AbilityPing::InternalSwap(CCitadelClientMsg_AbilityPing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.pinged_ability_id_, other->_impl_.pinged_ability_id_);
  swap(_impl_.entity_index_, other->_impl_.entity_index_);
  swap(_impl_.pinged_player_slot_, other->_impl_.pinged_player_slot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelClientMsg_AbilityPing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fclientmessages_2eproto_getter, &descriptor_table_citadel_5fclientmessages_2eproto_once,
      file_level_metadata_citadel_5fclientmessages_2eproto[3]);
}

// ===================================================================

class CCitadelClientMsg_MapLine::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelClientMsg_MapLine>()._impl_._has_bits_);
  static const ::CMsgMapLine& mapline(const CCitadelClientMsg_MapLine* msg);
  static void set_has_mapline(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgMapLine&
CCitadelClientMsg_MapLine::_Internal::mapline(const CCitadelClientMsg_MapLine* msg) {
  return *msg->_impl_.mapline_;
}
void CCitadelClientMsg_MapLine::clear_mapline() {
  if (_impl_.mapline_ != nullptr) _impl_.mapline_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CCitadelClientMsg_MapLine::CCitadelClientMsg_MapLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelClientMsg_MapLine)
}
CCitadelClientMsg_MapLine::CCitadelClientMsg_MapLine(const CCitadelClientMsg_MapLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelClientMsg_MapLine* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mapline_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mapline()) {
    _this->_impl_.mapline_ = new ::CMsgMapLine(*from._impl_.mapline_);
  }
  // @@protoc_insertion_point(copy_constructor:CCitadelClientMsg_MapLine)
}

inline void CCitadelClientMsg_MapLine::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mapline_){nullptr}
  };
}

CCitadelClientMsg_MapLine::~CCitadelClientMsg_MapLine() {
  // @@protoc_insertion_point(destructor:CCitadelClientMsg_MapLine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelClientMsg_MapLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.mapline_;
}

void CCitadelClientMsg_MapLine::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelClientMsg_MapLine::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelClientMsg_MapLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.mapline_ != nullptr);
    _impl_.mapline_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelClientMsg_MapLine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgMapLine mapline = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mapline(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelClientMsg_MapLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelClientMsg_MapLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgMapLine mapline = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mapline(this),
        _Internal::mapline(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelClientMsg_MapLine)
  return target;
}

size_t CCitadelClientMsg_MapLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelClientMsg_MapLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgMapLine mapline = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mapline_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelClientMsg_MapLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelClientMsg_MapLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelClientMsg_MapLine::GetClassData() const { return &_class_data_; }


void CCitadelClientMsg_MapLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelClientMsg_MapLine*>(&to_msg);
  auto& from = static_cast<const CCitadelClientMsg_MapLine&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelClientMsg_MapLine)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mapline()) {
    _this->_internal_mutable_mapline()->::CMsgMapLine::MergeFrom(
        from._internal_mapline());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelClientMsg_MapLine::CopyFrom(const CCitadelClientMsg_MapLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelClientMsg_MapLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelClientMsg_MapLine::IsInitialized() const {
  return true;
}

void CCitadelClientMsg_MapLine::InternalSwap(CCitadelClientMsg_MapLine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mapline_, other->_impl_.mapline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelClientMsg_MapLine::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fclientmessages_2eproto_getter, &descriptor_table_citadel_5fclientmessages_2eproto_once,
      file_level_metadata_citadel_5fclientmessages_2eproto[4]);
}

// ===================================================================

class CCitadelClientMsg_QuickResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelClientMsg_QuickResponse>()._impl_._has_bits_);
  static void set_has_ping_wheel_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_responding_to_ping_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_responding_to_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCitadelClientMsg_QuickResponse::CCitadelClientMsg_QuickResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelClientMsg_QuickResponse)
}
CCitadelClientMsg_QuickResponse::CCitadelClientMsg_QuickResponse(const CCitadelClientMsg_QuickResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelClientMsg_QuickResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ping_wheel_message_id_){}
    , decltype(_impl_.responding_to_ping_message_id_){}
    , decltype(_impl_.responding_to_player_slot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ping_wheel_message_id_, &from._impl_.ping_wheel_message_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.responding_to_player_slot_) -
    reinterpret_cast<char*>(&_impl_.ping_wheel_message_id_)) + sizeof(_impl_.responding_to_player_slot_));
  // @@protoc_insertion_point(copy_constructor:CCitadelClientMsg_QuickResponse)
}

inline void CCitadelClientMsg_QuickResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ping_wheel_message_id_){0u}
    , decltype(_impl_.responding_to_ping_message_id_){0u}
    , decltype(_impl_.responding_to_player_slot_){-1}
  };
}

CCitadelClientMsg_QuickResponse::~CCitadelClientMsg_QuickResponse() {
  // @@protoc_insertion_point(destructor:CCitadelClientMsg_QuickResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelClientMsg_QuickResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCitadelClientMsg_QuickResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelClientMsg_QuickResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelClientMsg_QuickResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.ping_wheel_message_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.responding_to_ping_message_id_) -
        reinterpret_cast<char*>(&_impl_.ping_wheel_message_id_)) + sizeof(_impl_.responding_to_ping_message_id_));
    _impl_.responding_to_player_slot_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelClientMsg_QuickResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ping_wheel_message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ping_wheel_message_id(&has_bits);
          _impl_.ping_wheel_message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 responding_to_ping_message_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_responding_to_ping_message_id(&has_bits);
          _impl_.responding_to_ping_message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 responding_to_player_slot = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_responding_to_player_slot(&has_bits);
          _impl_.responding_to_player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelClientMsg_QuickResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelClientMsg_QuickResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 ping_wheel_message_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ping_wheel_message_id(), target);
  }

  // optional uint32 responding_to_ping_message_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_responding_to_ping_message_id(), target);
  }

  // optional int32 responding_to_player_slot = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_responding_to_player_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelClientMsg_QuickResponse)
  return target;
}

size_t CCitadelClientMsg_QuickResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelClientMsg_QuickResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 ping_wheel_message_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ping_wheel_message_id());
    }

    // optional uint32 responding_to_ping_message_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_responding_to_ping_message_id());
    }

    // optional int32 responding_to_player_slot = 3 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_responding_to_player_slot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelClientMsg_QuickResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelClientMsg_QuickResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelClientMsg_QuickResponse::GetClassData() const { return &_class_data_; }


void CCitadelClientMsg_QuickResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelClientMsg_QuickResponse*>(&to_msg);
  auto& from = static_cast<const CCitadelClientMsg_QuickResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelClientMsg_QuickResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ping_wheel_message_id_ = from._impl_.ping_wheel_message_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.responding_to_ping_message_id_ = from._impl_.responding_to_ping_message_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.responding_to_player_slot_ = from._impl_.responding_to_player_slot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelClientMsg_QuickResponse::CopyFrom(const CCitadelClientMsg_QuickResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelClientMsg_QuickResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelClientMsg_QuickResponse::IsInitialized() const {
  return true;
}

void CCitadelClientMsg_QuickResponse::InternalSwap(CCitadelClientMsg_QuickResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelClientMsg_QuickResponse, _impl_.responding_to_ping_message_id_)
      + sizeof(CCitadelClientMsg_QuickResponse::_impl_.responding_to_ping_message_id_)
      - PROTOBUF_FIELD_OFFSET(CCitadelClientMsg_QuickResponse, _impl_.ping_wheel_message_id_)>(
          reinterpret_cast<char*>(&_impl_.ping_wheel_message_id_),
          reinterpret_cast<char*>(&other->_impl_.ping_wheel_message_id_));
  swap(_impl_.responding_to_player_slot_, other->_impl_.responding_to_player_slot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelClientMsg_QuickResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fclientmessages_2eproto_getter, &descriptor_table_citadel_5fclientmessages_2eproto_once,
      file_level_metadata_citadel_5fclientmessages_2eproto[5]);
}

// ===================================================================

class CCitadelClientMsg_PerformanceStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelClientMsg_PerformanceStats>()._impl_._has_bits_);
  static void set_has_current_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_average_fps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_fps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_fps(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCitadelClientMsg_PerformanceStats::CCitadelClientMsg_PerformanceStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelClientMsg_PerformanceStats)
}
CCitadelClientMsg_PerformanceStats::CCitadelClientMsg_PerformanceStats(const CCitadelClientMsg_PerformanceStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelClientMsg_PerformanceStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.current_game_time_){}
    , decltype(_impl_.average_fps_){}
    , decltype(_impl_.min_fps_){}
    , decltype(_impl_.max_fps_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.current_game_time_, &from._impl_.current_game_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_fps_) -
    reinterpret_cast<char*>(&_impl_.current_game_time_)) + sizeof(_impl_.max_fps_));
  // @@protoc_insertion_point(copy_constructor:CCitadelClientMsg_PerformanceStats)
}

inline void CCitadelClientMsg_PerformanceStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.current_game_time_){0}
    , decltype(_impl_.average_fps_){0}
    , decltype(_impl_.min_fps_){0}
    , decltype(_impl_.max_fps_){0}
  };
}

CCitadelClientMsg_PerformanceStats::~CCitadelClientMsg_PerformanceStats() {
  // @@protoc_insertion_point(destructor:CCitadelClientMsg_PerformanceStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelClientMsg_PerformanceStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCitadelClientMsg_PerformanceStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelClientMsg_PerformanceStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelClientMsg_PerformanceStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.current_game_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_fps_) -
        reinterpret_cast<char*>(&_impl_.current_game_time_)) + sizeof(_impl_.max_fps_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelClientMsg_PerformanceStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float current_game_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_current_game_time(&has_bits);
          _impl_.current_game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float average_fps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_average_fps(&has_bits);
          _impl_.average_fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float min_fps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_min_fps(&has_bits);
          _impl_.min_fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_fps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_max_fps(&has_bits);
          _impl_.max_fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelClientMsg_PerformanceStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelClientMsg_PerformanceStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float current_game_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_current_game_time(), target);
  }

  // optional float average_fps = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_average_fps(), target);
  }

  // optional float min_fps = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_min_fps(), target);
  }

  // optional float max_fps = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_max_fps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelClientMsg_PerformanceStats)
  return target;
}

size_t CCitadelClientMsg_PerformanceStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelClientMsg_PerformanceStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float current_game_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float average_fps = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float min_fps = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float max_fps = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelClientMsg_PerformanceStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelClientMsg_PerformanceStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelClientMsg_PerformanceStats::GetClassData() const { return &_class_data_; }


void CCitadelClientMsg_PerformanceStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelClientMsg_PerformanceStats*>(&to_msg);
  auto& from = static_cast<const CCitadelClientMsg_PerformanceStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelClientMsg_PerformanceStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.current_game_time_ = from._impl_.current_game_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.average_fps_ = from._impl_.average_fps_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.min_fps_ = from._impl_.min_fps_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.max_fps_ = from._impl_.max_fps_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelClientMsg_PerformanceStats::CopyFrom(const CCitadelClientMsg_PerformanceStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelClientMsg_PerformanceStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelClientMsg_PerformanceStats::IsInitialized() const {
  return true;
}

void CCitadelClientMsg_PerformanceStats::InternalSwap(CCitadelClientMsg_PerformanceStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelClientMsg_PerformanceStats, _impl_.max_fps_)
      + sizeof(CCitadelClientMsg_PerformanceStats::_impl_.max_fps_)
      - PROTOBUF_FIELD_OFFSET(CCitadelClientMsg_PerformanceStats, _impl_.current_game_time_)>(
          reinterpret_cast<char*>(&_impl_.current_game_time_),
          reinterpret_cast<char*>(&other->_impl_.current_game_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelClientMsg_PerformanceStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fclientmessages_2eproto_getter, &descriptor_table_citadel_5fclientmessages_2eproto_once,
      file_level_metadata_citadel_5fclientmessages_2eproto[6]);
}

// ===================================================================

class CCitadelClientMsg_ChatMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelClientMsg_ChatMsg>()._impl_._has_bits_);
  static void set_has_chat_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_all_chat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lane_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCitadelClientMsg_ChatMsg::CCitadelClientMsg_ChatMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelClientMsg_ChatMsg)
}
CCitadelClientMsg_ChatMsg::CCitadelClientMsg_ChatMsg(const CCitadelClientMsg_ChatMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelClientMsg_ChatMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chat_text_){}
    , decltype(_impl_.all_chat_){}
    , decltype(_impl_.lane_color_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chat_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chat_text()) {
    _this->_impl_.chat_text_.Set(from._internal_chat_text(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.all_chat_, &from._impl_.all_chat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lane_color_) -
    reinterpret_cast<char*>(&_impl_.all_chat_)) + sizeof(_impl_.lane_color_));
  // @@protoc_insertion_point(copy_constructor:CCitadelClientMsg_ChatMsg)
}

inline void CCitadelClientMsg_ChatMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chat_text_){}
    , decltype(_impl_.all_chat_){false}
    , decltype(_impl_.lane_color_){0}
  };
  _impl_.chat_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCitadelClientMsg_ChatMsg::~CCitadelClientMsg_ChatMsg() {
  // @@protoc_insertion_point(destructor:CCitadelClientMsg_ChatMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelClientMsg_ChatMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chat_text_.Destroy();
}

void CCitadelClientMsg_ChatMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelClientMsg_ChatMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelClientMsg_ChatMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.chat_text_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.all_chat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lane_color_) -
        reinterpret_cast<char*>(&_impl_.all_chat_)) + sizeof(_impl_.lane_color_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelClientMsg_ChatMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string chat_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_chat_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCitadelClientMsg_ChatMsg.chat_text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool all_chat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_all_chat(&has_bits);
          _impl_.all_chat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgLaneColor lane_color = 3 [default = k_ELaneColor_Invalid];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgLaneColor_IsValid(val))) {
            _internal_set_lane_color(static_cast<::CMsgLaneColor>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelClientMsg_ChatMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelClientMsg_ChatMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string chat_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_chat_text().data(), static_cast<int>(this->_internal_chat_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCitadelClientMsg_ChatMsg.chat_text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_chat_text(), target);
  }

  // optional bool all_chat = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_all_chat(), target);
  }

  // optional .CMsgLaneColor lane_color = 3 [default = k_ELaneColor_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_lane_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelClientMsg_ChatMsg)
  return target;
}

size_t CCitadelClientMsg_ChatMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelClientMsg_ChatMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string chat_text = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_chat_text());
    }

    // optional bool all_chat = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional .CMsgLaneColor lane_color = 3 [default = k_ELaneColor_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_lane_color());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelClientMsg_ChatMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelClientMsg_ChatMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelClientMsg_ChatMsg::GetClassData() const { return &_class_data_; }


void CCitadelClientMsg_ChatMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelClientMsg_ChatMsg*>(&to_msg);
  auto& from = static_cast<const CCitadelClientMsg_ChatMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelClientMsg_ChatMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_chat_text(from._internal_chat_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.all_chat_ = from._impl_.all_chat_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.lane_color_ = from._impl_.lane_color_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelClientMsg_ChatMsg::CopyFrom(const CCitadelClientMsg_ChatMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelClientMsg_ChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelClientMsg_ChatMsg::IsInitialized() const {
  return true;
}

void CCitadelClientMsg_ChatMsg::InternalSwap(CCitadelClientMsg_ChatMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chat_text_, lhs_arena,
      &other->_impl_.chat_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelClientMsg_ChatMsg, _impl_.lane_color_)
      + sizeof(CCitadelClientMsg_ChatMsg::_impl_.lane_color_)
      - PROTOBUF_FIELD_OFFSET(CCitadelClientMsg_ChatMsg, _impl_.all_chat_)>(
          reinterpret_cast<char*>(&_impl_.all_chat_),
          reinterpret_cast<char*>(&other->_impl_.all_chat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelClientMsg_ChatMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fclientmessages_2eproto_getter, &descriptor_table_citadel_5fclientmessages_2eproto_once,
      file_level_metadata_citadel_5fclientmessages_2eproto[7]);
}

// ===================================================================

class CCitadelClientMsg_PerfReport::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelClientMsg_PerfReport>()._impl_._has_bits_);
  static void set_has_average_frame_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_frame_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_average_compute_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_compute_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_average_client_tick_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_client_tick_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_average_client_simulate_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_client_simulate_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_average_output_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_max_output_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_average_wait_for_rendering_to_complete_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_max_wait_for_rendering_to_complete_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_average_swap_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_max_swap_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_average_frame_update_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_max_frame_update_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_average_idle_time(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_max_idle_time(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_average_input_processing_time(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_max_input_processing_time(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

CCitadelClientMsg_PerfReport::CCitadelClientMsg_PerfReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelClientMsg_PerfReport)
}
CCitadelClientMsg_PerfReport::CCitadelClientMsg_PerfReport(const CCitadelClientMsg_PerfReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelClientMsg_PerfReport* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.average_frame_time_){}
    , decltype(_impl_.max_frame_time_){}
    , decltype(_impl_.average_compute_time_){}
    , decltype(_impl_.max_compute_time_){}
    , decltype(_impl_.average_client_tick_time_){}
    , decltype(_impl_.max_client_tick_time_){}
    , decltype(_impl_.average_client_simulate_time_){}
    , decltype(_impl_.max_client_simulate_time_){}
    , decltype(_impl_.average_output_time_){}
    , decltype(_impl_.max_output_time_){}
    , decltype(_impl_.average_wait_for_rendering_to_complete_time_){}
    , decltype(_impl_.max_wait_for_rendering_to_complete_time_){}
    , decltype(_impl_.average_swap_time_){}
    , decltype(_impl_.max_swap_time_){}
    , decltype(_impl_.average_frame_update_time_){}
    , decltype(_impl_.max_frame_update_time_){}
    , decltype(_impl_.average_idle_time_){}
    , decltype(_impl_.max_idle_time_){}
    , decltype(_impl_.average_input_processing_time_){}
    , decltype(_impl_.max_input_processing_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.average_frame_time_, &from._impl_.average_frame_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_input_processing_time_) -
    reinterpret_cast<char*>(&_impl_.average_frame_time_)) + sizeof(_impl_.max_input_processing_time_));
  // @@protoc_insertion_point(copy_constructor:CCitadelClientMsg_PerfReport)
}

inline void CCitadelClientMsg_PerfReport::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.average_frame_time_){0}
    , decltype(_impl_.max_frame_time_){0}
    , decltype(_impl_.average_compute_time_){0}
    , decltype(_impl_.max_compute_time_){0}
    , decltype(_impl_.average_client_tick_time_){0}
    , decltype(_impl_.max_client_tick_time_){0}
    , decltype(_impl_.average_client_simulate_time_){0}
    , decltype(_impl_.max_client_simulate_time_){0}
    , decltype(_impl_.average_output_time_){0}
    , decltype(_impl_.max_output_time_){0}
    , decltype(_impl_.average_wait_for_rendering_to_complete_time_){0}
    , decltype(_impl_.max_wait_for_rendering_to_complete_time_){0}
    , decltype(_impl_.average_swap_time_){0}
    , decltype(_impl_.max_swap_time_){0}
    , decltype(_impl_.average_frame_update_time_){0}
    , decltype(_impl_.max_frame_update_time_){0}
    , decltype(_impl_.average_idle_time_){0}
    , decltype(_impl_.max_idle_time_){0}
    , decltype(_impl_.average_input_processing_time_){0}
    , decltype(_impl_.max_input_processing_time_){0}
  };
}

CCitadelClientMsg_PerfReport::~CCitadelClientMsg_PerfReport() {
  // @@protoc_insertion_point(destructor:CCitadelClientMsg_PerfReport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelClientMsg_PerfReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCitadelClientMsg_PerfReport::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelClientMsg_PerfReport::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelClientMsg_PerfReport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.average_frame_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_client_simulate_time_) -
        reinterpret_cast<char*>(&_impl_.average_frame_time_)) + sizeof(_impl_.max_client_simulate_time_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.average_output_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_frame_update_time_) -
        reinterpret_cast<char*>(&_impl_.average_output_time_)) + sizeof(_impl_.max_frame_update_time_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&_impl_.average_idle_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_input_processing_time_) -
        reinterpret_cast<char*>(&_impl_.average_idle_time_)) + sizeof(_impl_.max_input_processing_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelClientMsg_PerfReport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float average_frame_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_average_frame_time(&has_bits);
          _impl_.average_frame_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_frame_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_max_frame_time(&has_bits);
          _impl_.max_frame_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float average_compute_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_average_compute_time(&has_bits);
          _impl_.average_compute_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_compute_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_max_compute_time(&has_bits);
          _impl_.max_compute_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float average_client_tick_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_average_client_tick_time(&has_bits);
          _impl_.average_client_tick_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_client_tick_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_max_client_tick_time(&has_bits);
          _impl_.max_client_tick_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float average_client_simulate_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_average_client_simulate_time(&has_bits);
          _impl_.average_client_simulate_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_client_simulate_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_max_client_simulate_time(&has_bits);
          _impl_.max_client_simulate_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float average_output_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_average_output_time(&has_bits);
          _impl_.average_output_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_output_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_max_output_time(&has_bits);
          _impl_.max_output_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float average_wait_for_rendering_to_complete_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_average_wait_for_rendering_to_complete_time(&has_bits);
          _impl_.average_wait_for_rendering_to_complete_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_wait_for_rendering_to_complete_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_max_wait_for_rendering_to_complete_time(&has_bits);
          _impl_.max_wait_for_rendering_to_complete_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float average_swap_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_average_swap_time(&has_bits);
          _impl_.average_swap_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_swap_time = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_max_swap_time(&has_bits);
          _impl_.max_swap_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float average_frame_update_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_average_frame_update_time(&has_bits);
          _impl_.average_frame_update_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_frame_update_time = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_max_frame_update_time(&has_bits);
          _impl_.max_frame_update_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float average_idle_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _Internal::set_has_average_idle_time(&has_bits);
          _impl_.average_idle_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_idle_time = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _Internal::set_has_max_idle_time(&has_bits);
          _impl_.max_idle_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float average_input_processing_time = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_average_input_processing_time(&has_bits);
          _impl_.average_input_processing_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_input_processing_time = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _Internal::set_has_max_input_processing_time(&has_bits);
          _impl_.max_input_processing_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelClientMsg_PerfReport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelClientMsg_PerfReport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float average_frame_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_average_frame_time(), target);
  }

  // optional float max_frame_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_max_frame_time(), target);
  }

  // optional float average_compute_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_average_compute_time(), target);
  }

  // optional float max_compute_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_max_compute_time(), target);
  }

  // optional float average_client_tick_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_average_client_tick_time(), target);
  }

  // optional float max_client_tick_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_max_client_tick_time(), target);
  }

  // optional float average_client_simulate_time = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_average_client_simulate_time(), target);
  }

  // optional float max_client_simulate_time = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_max_client_simulate_time(), target);
  }

  // optional float average_output_time = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_average_output_time(), target);
  }

  // optional float max_output_time = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_max_output_time(), target);
  }

  // optional float average_wait_for_rendering_to_complete_time = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_average_wait_for_rendering_to_complete_time(), target);
  }

  // optional float max_wait_for_rendering_to_complete_time = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_max_wait_for_rendering_to_complete_time(), target);
  }

  // optional float average_swap_time = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_average_swap_time(), target);
  }

  // optional float max_swap_time = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_max_swap_time(), target);
  }

  // optional float average_frame_update_time = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_average_frame_update_time(), target);
  }

  // optional float max_frame_update_time = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_max_frame_update_time(), target);
  }

  // optional float average_idle_time = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_average_idle_time(), target);
  }

  // optional float max_idle_time = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_max_idle_time(), target);
  }

  // optional float average_input_processing_time = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(19, this->_internal_average_input_processing_time(), target);
  }

  // optional float max_input_processing_time = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(20, this->_internal_max_input_processing_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelClientMsg_PerfReport)
  return target;
}

size_t CCitadelClientMsg_PerfReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelClientMsg_PerfReport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float average_frame_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float max_frame_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float average_compute_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float max_compute_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float average_client_tick_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float max_client_tick_time = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float average_client_simulate_time = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float max_client_simulate_time = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float average_output_time = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float max_output_time = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float average_wait_for_rendering_to_complete_time = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float max_wait_for_rendering_to_complete_time = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float average_swap_time = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float max_swap_time = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float average_frame_update_time = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float max_frame_update_time = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional float average_idle_time = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float max_idle_time = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float average_input_processing_time = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float max_input_processing_time = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelClientMsg_PerfReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelClientMsg_PerfReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelClientMsg_PerfReport::GetClassData() const { return &_class_data_; }


void CCitadelClientMsg_PerfReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelClientMsg_PerfReport*>(&to_msg);
  auto& from = static_cast<const CCitadelClientMsg_PerfReport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelClientMsg_PerfReport)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.average_frame_time_ = from._impl_.average_frame_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.max_frame_time_ = from._impl_.max_frame_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.average_compute_time_ = from._impl_.average_compute_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.max_compute_time_ = from._impl_.max_compute_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.average_client_tick_time_ = from._impl_.average_client_tick_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.max_client_tick_time_ = from._impl_.max_client_tick_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.average_client_simulate_time_ = from._impl_.average_client_simulate_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.max_client_simulate_time_ = from._impl_.max_client_simulate_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.average_output_time_ = from._impl_.average_output_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.max_output_time_ = from._impl_.max_output_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.average_wait_for_rendering_to_complete_time_ = from._impl_.average_wait_for_rendering_to_complete_time_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.max_wait_for_rendering_to_complete_time_ = from._impl_.max_wait_for_rendering_to_complete_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.average_swap_time_ = from._impl_.average_swap_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.max_swap_time_ = from._impl_.max_swap_time_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.average_frame_update_time_ = from._impl_.average_frame_update_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.max_frame_update_time_ = from._impl_.max_frame_update_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.average_idle_time_ = from._impl_.average_idle_time_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.max_idle_time_ = from._impl_.max_idle_time_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.average_input_processing_time_ = from._impl_.average_input_processing_time_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.max_input_processing_time_ = from._impl_.max_input_processing_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelClientMsg_PerfReport::CopyFrom(const CCitadelClientMsg_PerfReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelClientMsg_PerfReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelClientMsg_PerfReport::IsInitialized() const {
  return true;
}

void CCitadelClientMsg_PerfReport::InternalSwap(CCitadelClientMsg_PerfReport* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelClientMsg_PerfReport, _impl_.max_input_processing_time_)
      + sizeof(CCitadelClientMsg_PerfReport::_impl_.max_input_processing_time_)
      - PROTOBUF_FIELD_OFFSET(CCitadelClientMsg_PerfReport, _impl_.average_frame_time_)>(
          reinterpret_cast<char*>(&_impl_.average_frame_time_),
          reinterpret_cast<char*>(&other->_impl_.average_frame_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelClientMsg_PerfReport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fclientmessages_2eproto_getter, &descriptor_table_citadel_5fclientmessages_2eproto_once,
      file_level_metadata_citadel_5fclientmessages_2eproto[8]);
}

// ===================================================================

class CCitadelClientMsg_GetDamageStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelClientMsg_GetDamageStats>()._impl_._has_bits_);
  static void set_has_lobby_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ability_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCitadelClientMsg_GetDamageStats::CCitadelClientMsg_GetDamageStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelClientMsg_GetDamageStats)
}
CCitadelClientMsg_GetDamageStats::CCitadelClientMsg_GetDamageStats(const CCitadelClientMsg_GetDamageStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelClientMsg_GetDamageStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_name_){}
    , decltype(_impl_.lobby_player_slot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ability_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ability_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ability_name()) {
    _this->_impl_.ability_name_.Set(from._internal_ability_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.lobby_player_slot_ = from._impl_.lobby_player_slot_;
  // @@protoc_insertion_point(copy_constructor:CCitadelClientMsg_GetDamageStats)
}

inline void CCitadelClientMsg_GetDamageStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_name_){}
    , decltype(_impl_.lobby_player_slot_){0u}
  };
  _impl_.ability_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ability_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCitadelClientMsg_GetDamageStats::~CCitadelClientMsg_GetDamageStats() {
  // @@protoc_insertion_point(destructor:CCitadelClientMsg_GetDamageStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelClientMsg_GetDamageStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ability_name_.Destroy();
}

void CCitadelClientMsg_GetDamageStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelClientMsg_GetDamageStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelClientMsg_GetDamageStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.ability_name_.ClearNonDefaultToEmpty();
  }
  _impl_.lobby_player_slot_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelClientMsg_GetDamageStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 lobby_player_slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_lobby_player_slot(&has_bits);
          _impl_.lobby_player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ability_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ability_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCitadelClientMsg_GetDamageStats.ability_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelClientMsg_GetDamageStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelClientMsg_GetDamageStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 lobby_player_slot = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lobby_player_slot(), target);
  }

  // optional string ability_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ability_name().data(), static_cast<int>(this->_internal_ability_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCitadelClientMsg_GetDamageStats.ability_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ability_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelClientMsg_GetDamageStats)
  return target;
}

size_t CCitadelClientMsg_GetDamageStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelClientMsg_GetDamageStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string ability_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ability_name());
    }

    // optional uint32 lobby_player_slot = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lobby_player_slot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelClientMsg_GetDamageStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelClientMsg_GetDamageStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelClientMsg_GetDamageStats::GetClassData() const { return &_class_data_; }


void CCitadelClientMsg_GetDamageStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelClientMsg_GetDamageStats*>(&to_msg);
  auto& from = static_cast<const CCitadelClientMsg_GetDamageStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelClientMsg_GetDamageStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_ability_name(from._internal_ability_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.lobby_player_slot_ = from._impl_.lobby_player_slot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelClientMsg_GetDamageStats::CopyFrom(const CCitadelClientMsg_GetDamageStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelClientMsg_GetDamageStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelClientMsg_GetDamageStats::IsInitialized() const {
  return true;
}

void CCitadelClientMsg_GetDamageStats::InternalSwap(CCitadelClientMsg_GetDamageStats* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ability_name_, lhs_arena,
      &other->_impl_.ability_name_, rhs_arena
  );
  swap(_impl_.lobby_player_slot_, other->_impl_.lobby_player_slot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelClientMsg_GetDamageStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fclientmessages_2eproto_getter, &descriptor_table_citadel_5fclientmessages_2eproto_once,
      file_level_metadata_citadel_5fclientmessages_2eproto[9]);
}

// ===================================================================

class CCitadelClientCachedPlayerStats_Stat::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelClientCachedPlayerStats_Stat>()._impl_._has_bits_);
  static void set_has_stat_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_all_time_total(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_all_time_match_max(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_all_time_life_max(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCitadelClientCachedPlayerStats_Stat::CCitadelClientCachedPlayerStats_Stat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelClientCachedPlayerStats.Stat)
}
CCitadelClientCachedPlayerStats_Stat::CCitadelClientCachedPlayerStats_Stat(const CCitadelClientCachedPlayerStats_Stat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelClientCachedPlayerStats_Stat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stat_name_){}
    , decltype(_impl_.all_time_total_){}
    , decltype(_impl_.all_time_match_max_){}
    , decltype(_impl_.all_time_life_max_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stat_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stat_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stat_name()) {
    _this->_impl_.stat_name_.Set(from._internal_stat_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.all_time_total_, &from._impl_.all_time_total_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.all_time_life_max_) -
    reinterpret_cast<char*>(&_impl_.all_time_total_)) + sizeof(_impl_.all_time_life_max_));
  // @@protoc_insertion_point(copy_constructor:CCitadelClientCachedPlayerStats.Stat)
}

inline void CCitadelClientCachedPlayerStats_Stat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stat_name_){}
    , decltype(_impl_.all_time_total_){uint64_t{0u}}
    , decltype(_impl_.all_time_match_max_){0u}
    , decltype(_impl_.all_time_life_max_){0u}
  };
  _impl_.stat_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stat_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCitadelClientCachedPlayerStats_Stat::~CCitadelClientCachedPlayerStats_Stat() {
  // @@protoc_insertion_point(destructor:CCitadelClientCachedPlayerStats.Stat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelClientCachedPlayerStats_Stat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stat_name_.Destroy();
}

void CCitadelClientCachedPlayerStats_Stat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelClientCachedPlayerStats_Stat::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelClientCachedPlayerStats.Stat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.stat_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.all_time_total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.all_time_life_max_) -
        reinterpret_cast<char*>(&_impl_.all_time_total_)) + sizeof(_impl_.all_time_life_max_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelClientCachedPlayerStats_Stat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string stat_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stat_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCitadelClientCachedPlayerStats.Stat.stat_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 all_time_total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_all_time_total(&has_bits);
          _impl_.all_time_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 all_time_match_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_all_time_match_max(&has_bits);
          _impl_.all_time_match_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 all_time_life_max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_all_time_life_max(&has_bits);
          _impl_.all_time_life_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelClientCachedPlayerStats_Stat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelClientCachedPlayerStats.Stat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string stat_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stat_name().data(), static_cast<int>(this->_internal_stat_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCitadelClientCachedPlayerStats.Stat.stat_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stat_name(), target);
  }

  // optional uint64 all_time_total = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_all_time_total(), target);
  }

  // optional uint32 all_time_match_max = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_all_time_match_max(), target);
  }

  // optional uint32 all_time_life_max = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_all_time_life_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelClientCachedPlayerStats.Stat)
  return target;
}

size_t CCitadelClientCachedPlayerStats_Stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelClientCachedPlayerStats.Stat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string stat_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stat_name());
    }

    // optional uint64 all_time_total = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_all_time_total());
    }

    // optional uint32 all_time_match_max = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_all_time_match_max());
    }

    // optional uint32 all_time_life_max = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_all_time_life_max());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelClientCachedPlayerStats_Stat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelClientCachedPlayerStats_Stat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelClientCachedPlayerStats_Stat::GetClassData() const { return &_class_data_; }


void CCitadelClientCachedPlayerStats_Stat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelClientCachedPlayerStats_Stat*>(&to_msg);
  auto& from = static_cast<const CCitadelClientCachedPlayerStats_Stat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelClientCachedPlayerStats.Stat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_stat_name(from._internal_stat_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.all_time_total_ = from._impl_.all_time_total_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.all_time_match_max_ = from._impl_.all_time_match_max_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.all_time_life_max_ = from._impl_.all_time_life_max_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelClientCachedPlayerStats_Stat::CopyFrom(const CCitadelClientCachedPlayerStats_Stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelClientCachedPlayerStats.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelClientCachedPlayerStats_Stat::IsInitialized() const {
  return true;
}

void CCitadelClientCachedPlayerStats_Stat::InternalSwap(CCitadelClientCachedPlayerStats_Stat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stat_name_, lhs_arena,
      &other->_impl_.stat_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelClientCachedPlayerStats_Stat, _impl_.all_time_life_max_)
      + sizeof(CCitadelClientCachedPlayerStats_Stat::_impl_.all_time_life_max_)
      - PROTOBUF_FIELD_OFFSET(CCitadelClientCachedPlayerStats_Stat, _impl_.all_time_total_)>(
          reinterpret_cast<char*>(&_impl_.all_time_total_),
          reinterpret_cast<char*>(&other->_impl_.all_time_total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelClientCachedPlayerStats_Stat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fclientmessages_2eproto_getter, &descriptor_table_citadel_5fclientmessages_2eproto_once,
      file_level_metadata_citadel_5fclientmessages_2eproto[10]);
}

// ===================================================================

class CCitadelClientCachedPlayerStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelClientCachedPlayerStats>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCitadelClientCachedPlayerStats::CCitadelClientCachedPlayerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelClientCachedPlayerStats)
}
CCitadelClientCachedPlayerStats::CCitadelClientCachedPlayerStats(const CCitadelClientCachedPlayerStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelClientCachedPlayerStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_){from._impl_.stats_}
    , decltype(_impl_.version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:CCitadelClientCachedPlayerStats)
}

inline void CCitadelClientCachedPlayerStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_){arena}
    , decltype(_impl_.version_){0u}
  };
}

CCitadelClientCachedPlayerStats::~CCitadelClientCachedPlayerStats() {
  // @@protoc_insertion_point(destructor:CCitadelClientCachedPlayerStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelClientCachedPlayerStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_.~RepeatedPtrField();
}

void CCitadelClientCachedPlayerStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelClientCachedPlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelClientCachedPlayerStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_.Clear();
  _impl_.version_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelClientCachedPlayerStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CCitadelClientCachedPlayerStats.Stat stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelClientCachedPlayerStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelClientCachedPlayerStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // repeated .CCitadelClientCachedPlayerStats.Stat stats = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelClientCachedPlayerStats)
  return target;
}

size_t CCitadelClientCachedPlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelClientCachedPlayerStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCitadelClientCachedPlayerStats.Stat stats = 2;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 version = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelClientCachedPlayerStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelClientCachedPlayerStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelClientCachedPlayerStats::GetClassData() const { return &_class_data_; }


void CCitadelClientCachedPlayerStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelClientCachedPlayerStats*>(&to_msg);
  auto& from = static_cast<const CCitadelClientCachedPlayerStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelClientCachedPlayerStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  if (from._internal_has_version()) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelClientCachedPlayerStats::CopyFrom(const CCitadelClientCachedPlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelClientCachedPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelClientCachedPlayerStats::IsInitialized() const {
  return true;
}

void CCitadelClientCachedPlayerStats::InternalSwap(CCitadelClientCachedPlayerStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelClientCachedPlayerStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fclientmessages_2eproto_getter, &descriptor_table_citadel_5fclientmessages_2eproto_once,
      file_level_metadata_citadel_5fclientmessages_2eproto[11]);
}

// ===================================================================

class CCitadelClientMsg_ExecuteMapUnitAbility::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelClientMsg_ExecuteMapUnitAbility>()._impl_._has_bits_);
  static void set_has_ability_entity_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_entity_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCitadelClientMsg_ExecuteMapUnitAbility::CCitadelClientMsg_ExecuteMapUnitAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelClientMsg_ExecuteMapUnitAbility)
}
CCitadelClientMsg_ExecuteMapUnitAbility::CCitadelClientMsg_ExecuteMapUnitAbility(const CCitadelClientMsg_ExecuteMapUnitAbility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelClientMsg_ExecuteMapUnitAbility* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_entity_index_){}
    , decltype(_impl_.target_entity_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ability_entity_index_, &from._impl_.ability_entity_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_entity_index_) -
    reinterpret_cast<char*>(&_impl_.ability_entity_index_)) + sizeof(_impl_.target_entity_index_));
  // @@protoc_insertion_point(copy_constructor:CCitadelClientMsg_ExecuteMapUnitAbility)
}

inline void CCitadelClientMsg_ExecuteMapUnitAbility::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_entity_index_){0}
    , decltype(_impl_.target_entity_index_){0}
  };
}

CCitadelClientMsg_ExecuteMapUnitAbility::~CCitadelClientMsg_ExecuteMapUnitAbility() {
  // @@protoc_insertion_point(destructor:CCitadelClientMsg_ExecuteMapUnitAbility)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelClientMsg_ExecuteMapUnitAbility::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCitadelClientMsg_ExecuteMapUnitAbility::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelClientMsg_ExecuteMapUnitAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelClientMsg_ExecuteMapUnitAbility)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.ability_entity_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.target_entity_index_) -
        reinterpret_cast<char*>(&_impl_.ability_entity_index_)) + sizeof(_impl_.target_entity_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelClientMsg_ExecuteMapUnitAbility::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ability_entity_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ability_entity_index(&has_bits);
          _impl_.ability_entity_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 target_entity_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_target_entity_index(&has_bits);
          _impl_.target_entity_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelClientMsg_ExecuteMapUnitAbility::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelClientMsg_ExecuteMapUnitAbility)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 ability_entity_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ability_entity_index(), target);
  }

  // optional int32 target_entity_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_target_entity_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelClientMsg_ExecuteMapUnitAbility)
  return target;
}

size_t CCitadelClientMsg_ExecuteMapUnitAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelClientMsg_ExecuteMapUnitAbility)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 ability_entity_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_entity_index());
    }

    // optional int32 target_entity_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_entity_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelClientMsg_ExecuteMapUnitAbility::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelClientMsg_ExecuteMapUnitAbility::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelClientMsg_ExecuteMapUnitAbility::GetClassData() const { return &_class_data_; }


void CCitadelClientMsg_ExecuteMapUnitAbility::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelClientMsg_ExecuteMapUnitAbility*>(&to_msg);
  auto& from = static_cast<const CCitadelClientMsg_ExecuteMapUnitAbility&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelClientMsg_ExecuteMapUnitAbility)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ability_entity_index_ = from._impl_.ability_entity_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.target_entity_index_ = from._impl_.target_entity_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelClientMsg_ExecuteMapUnitAbility::CopyFrom(const CCitadelClientMsg_ExecuteMapUnitAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelClientMsg_ExecuteMapUnitAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelClientMsg_ExecuteMapUnitAbility::IsInitialized() const {
  return true;
}

void CCitadelClientMsg_ExecuteMapUnitAbility::InternalSwap(CCitadelClientMsg_ExecuteMapUnitAbility* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCitadelClientMsg_ExecuteMapUnitAbility, _impl_.target_entity_index_)
      + sizeof(CCitadelClientMsg_ExecuteMapUnitAbility::_impl_.target_entity_index_)
      - PROTOBUF_FIELD_OFFSET(CCitadelClientMsg_ExecuteMapUnitAbility, _impl_.ability_entity_index_)>(
          reinterpret_cast<char*>(&_impl_.ability_entity_index_),
          reinterpret_cast<char*>(&other->_impl_.ability_entity_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelClientMsg_ExecuteMapUnitAbility::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fclientmessages_2eproto_getter, &descriptor_table_citadel_5fclientmessages_2eproto_once,
      file_level_metadata_citadel_5fclientmessages_2eproto[12]);
}

// ===================================================================

class CCitadelClientMsg_CheaterVote::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelClientMsg_CheaterVote>()._impl_._has_bits_);
  static void set_has_end_game_immediately(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCitadelClientMsg_CheaterVote::CCitadelClientMsg_CheaterVote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelClientMsg_CheaterVote)
}
CCitadelClientMsg_CheaterVote::CCitadelClientMsg_CheaterVote(const CCitadelClientMsg_CheaterVote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelClientMsg_CheaterVote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.end_game_immediately_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.end_game_immediately_ = from._impl_.end_game_immediately_;
  // @@protoc_insertion_point(copy_constructor:CCitadelClientMsg_CheaterVote)
}

inline void CCitadelClientMsg_CheaterVote::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.end_game_immediately_){false}
  };
}

CCitadelClientMsg_CheaterVote::~CCitadelClientMsg_CheaterVote() {
  // @@protoc_insertion_point(destructor:CCitadelClientMsg_CheaterVote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelClientMsg_CheaterVote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCitadelClientMsg_CheaterVote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelClientMsg_CheaterVote::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelClientMsg_CheaterVote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.end_game_immediately_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelClientMsg_CheaterVote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool end_game_immediately = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_end_game_immediately(&has_bits);
          _impl_.end_game_immediately_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelClientMsg_CheaterVote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelClientMsg_CheaterVote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool end_game_immediately = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_end_game_immediately(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelClientMsg_CheaterVote)
  return target;
}

size_t CCitadelClientMsg_CheaterVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelClientMsg_CheaterVote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool end_game_immediately = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelClientMsg_CheaterVote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelClientMsg_CheaterVote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelClientMsg_CheaterVote::GetClassData() const { return &_class_data_; }


void CCitadelClientMsg_CheaterVote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelClientMsg_CheaterVote*>(&to_msg);
  auto& from = static_cast<const CCitadelClientMsg_CheaterVote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelClientMsg_CheaterVote)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_end_game_immediately()) {
    _this->_internal_set_end_game_immediately(from._internal_end_game_immediately());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelClientMsg_CheaterVote::CopyFrom(const CCitadelClientMsg_CheaterVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelClientMsg_CheaterVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelClientMsg_CheaterVote::IsInitialized() const {
  return true;
}

void CCitadelClientMsg_CheaterVote::InternalSwap(CCitadelClientMsg_CheaterVote* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.end_game_immediately_, other->_impl_.end_game_immediately_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelClientMsg_CheaterVote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fclientmessages_2eproto_getter, &descriptor_table_citadel_5fclientmessages_2eproto_once,
      file_level_metadata_citadel_5fclientmessages_2eproto[13]);
}

// ===================================================================

class CCitadelClientMsg_MutePlayers::_Internal {
 public:
  using HasBits = decltype(std::declval<CCitadelClientMsg_MutePlayers>()._impl_._has_bits_);
  static void set_has_unmute(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCitadelClientMsg_MutePlayers::CCitadelClientMsg_MutePlayers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCitadelClientMsg_MutePlayers)
}
CCitadelClientMsg_MutePlayers::CCitadelClientMsg_MutePlayers(const CCitadelClientMsg_MutePlayers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCitadelClientMsg_MutePlayers* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_slots_){from._impl_.player_slots_}
    , decltype(_impl_.unmute_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.unmute_ = from._impl_.unmute_;
  // @@protoc_insertion_point(copy_constructor:CCitadelClientMsg_MutePlayers)
}

inline void CCitadelClientMsg_MutePlayers::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_slots_){arena}
    , decltype(_impl_.unmute_){false}
  };
}

CCitadelClientMsg_MutePlayers::~CCitadelClientMsg_MutePlayers() {
  // @@protoc_insertion_point(destructor:CCitadelClientMsg_MutePlayers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCitadelClientMsg_MutePlayers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_slots_.~RepeatedField();
}

void CCitadelClientMsg_MutePlayers::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCitadelClientMsg_MutePlayers::Clear() {
// @@protoc_insertion_point(message_clear_start:CCitadelClientMsg_MutePlayers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_slots_.Clear();
  _impl_.unmute_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCitadelClientMsg_MutePlayers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 player_slots = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_player_slots(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_player_slots(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool unmute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_unmute(&has_bits);
          _impl_.unmute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCitadelClientMsg_MutePlayers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCitadelClientMsg_MutePlayers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 player_slots = 1;
  for (int i = 0, n = this->_internal_player_slots_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_slots(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool unmute = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_unmute(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCitadelClientMsg_MutePlayers)
  return target;
}

size_t CCitadelClientMsg_MutePlayers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCitadelClientMsg_MutePlayers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 player_slots = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.player_slots_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_player_slots_size());
    total_size += data_size;
  }

  // optional bool unmute = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCitadelClientMsg_MutePlayers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCitadelClientMsg_MutePlayers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCitadelClientMsg_MutePlayers::GetClassData() const { return &_class_data_; }


void CCitadelClientMsg_MutePlayers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCitadelClientMsg_MutePlayers*>(&to_msg);
  auto& from = static_cast<const CCitadelClientMsg_MutePlayers&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCitadelClientMsg_MutePlayers)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_slots_.MergeFrom(from._impl_.player_slots_);
  if (from._internal_has_unmute()) {
    _this->_internal_set_unmute(from._internal_unmute());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCitadelClientMsg_MutePlayers::CopyFrom(const CCitadelClientMsg_MutePlayers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCitadelClientMsg_MutePlayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCitadelClientMsg_MutePlayers::IsInitialized() const {
  return true;
}

void CCitadelClientMsg_MutePlayers::InternalSwap(CCitadelClientMsg_MutePlayers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.player_slots_.InternalSwap(&other->_impl_.player_slots_);
  swap(_impl_.unmute_, other->_impl_.unmute_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCitadelClientMsg_MutePlayers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_citadel_5fclientmessages_2eproto_getter, &descriptor_table_citadel_5fclientmessages_2eproto_once,
      file_level_metadata_citadel_5fclientmessages_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CCitadelClientMsg_Pause*
Arena::CreateMaybeMessage< ::CCitadelClientMsg_Pause >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelClientMsg_Pause >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelClientMsg_MapPing*
Arena::CreateMaybeMessage< ::CCitadelClientMsg_MapPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelClientMsg_MapPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelClientMsg_PingWheel*
Arena::CreateMaybeMessage< ::CCitadelClientMsg_PingWheel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelClientMsg_PingWheel >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelClientMsg_AbilityPing*
Arena::CreateMaybeMessage< ::CCitadelClientMsg_AbilityPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelClientMsg_AbilityPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelClientMsg_MapLine*
Arena::CreateMaybeMessage< ::CCitadelClientMsg_MapLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelClientMsg_MapLine >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelClientMsg_QuickResponse*
Arena::CreateMaybeMessage< ::CCitadelClientMsg_QuickResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelClientMsg_QuickResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelClientMsg_PerformanceStats*
Arena::CreateMaybeMessage< ::CCitadelClientMsg_PerformanceStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelClientMsg_PerformanceStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelClientMsg_ChatMsg*
Arena::CreateMaybeMessage< ::CCitadelClientMsg_ChatMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelClientMsg_ChatMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelClientMsg_PerfReport*
Arena::CreateMaybeMessage< ::CCitadelClientMsg_PerfReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelClientMsg_PerfReport >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelClientMsg_GetDamageStats*
Arena::CreateMaybeMessage< ::CCitadelClientMsg_GetDamageStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelClientMsg_GetDamageStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelClientCachedPlayerStats_Stat*
Arena::CreateMaybeMessage< ::CCitadelClientCachedPlayerStats_Stat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelClientCachedPlayerStats_Stat >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelClientCachedPlayerStats*
Arena::CreateMaybeMessage< ::CCitadelClientCachedPlayerStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelClientCachedPlayerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelClientMsg_ExecuteMapUnitAbility*
Arena::CreateMaybeMessage< ::CCitadelClientMsg_ExecuteMapUnitAbility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelClientMsg_ExecuteMapUnitAbility >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelClientMsg_CheaterVote*
Arena::CreateMaybeMessage< ::CCitadelClientMsg_CheaterVote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelClientMsg_CheaterVote >(arena);
}
template<> PROTOBUF_NOINLINE ::CCitadelClientMsg_MutePlayers*
Arena::CreateMaybeMessage< ::CCitadelClientMsg_MutePlayers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCitadelClientMsg_MutePlayers >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
