// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: citadel_clientmessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_citadel_5fclientmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_citadel_5fclientmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "networkbasetypes.pb.h"
#include "citadel_gcmessages_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_citadel_5fclientmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_citadel_5fclientmessages_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_citadel_5fclientmessages_2eproto;
class CCitadelClientCachedPlayerStats;
struct CCitadelClientCachedPlayerStatsDefaultTypeInternal;
extern CCitadelClientCachedPlayerStatsDefaultTypeInternal _CCitadelClientCachedPlayerStats_default_instance_;
class CCitadelClientCachedPlayerStats_Stat;
struct CCitadelClientCachedPlayerStats_StatDefaultTypeInternal;
extern CCitadelClientCachedPlayerStats_StatDefaultTypeInternal _CCitadelClientCachedPlayerStats_Stat_default_instance_;
class CCitadelClientMsg_AbilityPing;
struct CCitadelClientMsg_AbilityPingDefaultTypeInternal;
extern CCitadelClientMsg_AbilityPingDefaultTypeInternal _CCitadelClientMsg_AbilityPing_default_instance_;
class CCitadelClientMsg_ChatMsg;
struct CCitadelClientMsg_ChatMsgDefaultTypeInternal;
extern CCitadelClientMsg_ChatMsgDefaultTypeInternal _CCitadelClientMsg_ChatMsg_default_instance_;
class CCitadelClientMsg_CheaterVote;
struct CCitadelClientMsg_CheaterVoteDefaultTypeInternal;
extern CCitadelClientMsg_CheaterVoteDefaultTypeInternal _CCitadelClientMsg_CheaterVote_default_instance_;
class CCitadelClientMsg_ExecuteMapUnitAbility;
struct CCitadelClientMsg_ExecuteMapUnitAbilityDefaultTypeInternal;
extern CCitadelClientMsg_ExecuteMapUnitAbilityDefaultTypeInternal _CCitadelClientMsg_ExecuteMapUnitAbility_default_instance_;
class CCitadelClientMsg_GetDamageStats;
struct CCitadelClientMsg_GetDamageStatsDefaultTypeInternal;
extern CCitadelClientMsg_GetDamageStatsDefaultTypeInternal _CCitadelClientMsg_GetDamageStats_default_instance_;
class CCitadelClientMsg_MapLine;
struct CCitadelClientMsg_MapLineDefaultTypeInternal;
extern CCitadelClientMsg_MapLineDefaultTypeInternal _CCitadelClientMsg_MapLine_default_instance_;
class CCitadelClientMsg_MapPing;
struct CCitadelClientMsg_MapPingDefaultTypeInternal;
extern CCitadelClientMsg_MapPingDefaultTypeInternal _CCitadelClientMsg_MapPing_default_instance_;
class CCitadelClientMsg_MutePlayers;
struct CCitadelClientMsg_MutePlayersDefaultTypeInternal;
extern CCitadelClientMsg_MutePlayersDefaultTypeInternal _CCitadelClientMsg_MutePlayers_default_instance_;
class CCitadelClientMsg_Pause;
struct CCitadelClientMsg_PauseDefaultTypeInternal;
extern CCitadelClientMsg_PauseDefaultTypeInternal _CCitadelClientMsg_Pause_default_instance_;
class CCitadelClientMsg_PerfReport;
struct CCitadelClientMsg_PerfReportDefaultTypeInternal;
extern CCitadelClientMsg_PerfReportDefaultTypeInternal _CCitadelClientMsg_PerfReport_default_instance_;
class CCitadelClientMsg_PerformanceStats;
struct CCitadelClientMsg_PerformanceStatsDefaultTypeInternal;
extern CCitadelClientMsg_PerformanceStatsDefaultTypeInternal _CCitadelClientMsg_PerformanceStats_default_instance_;
class CCitadelClientMsg_PingWheel;
struct CCitadelClientMsg_PingWheelDefaultTypeInternal;
extern CCitadelClientMsg_PingWheelDefaultTypeInternal _CCitadelClientMsg_PingWheel_default_instance_;
class CCitadelClientMsg_QuickResponse;
struct CCitadelClientMsg_QuickResponseDefaultTypeInternal;
extern CCitadelClientMsg_QuickResponseDefaultTypeInternal _CCitadelClientMsg_QuickResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CCitadelClientCachedPlayerStats* Arena::CreateMaybeMessage<::CCitadelClientCachedPlayerStats>(Arena*);
template<> ::CCitadelClientCachedPlayerStats_Stat* Arena::CreateMaybeMessage<::CCitadelClientCachedPlayerStats_Stat>(Arena*);
template<> ::CCitadelClientMsg_AbilityPing* Arena::CreateMaybeMessage<::CCitadelClientMsg_AbilityPing>(Arena*);
template<> ::CCitadelClientMsg_ChatMsg* Arena::CreateMaybeMessage<::CCitadelClientMsg_ChatMsg>(Arena*);
template<> ::CCitadelClientMsg_CheaterVote* Arena::CreateMaybeMessage<::CCitadelClientMsg_CheaterVote>(Arena*);
template<> ::CCitadelClientMsg_ExecuteMapUnitAbility* Arena::CreateMaybeMessage<::CCitadelClientMsg_ExecuteMapUnitAbility>(Arena*);
template<> ::CCitadelClientMsg_GetDamageStats* Arena::CreateMaybeMessage<::CCitadelClientMsg_GetDamageStats>(Arena*);
template<> ::CCitadelClientMsg_MapLine* Arena::CreateMaybeMessage<::CCitadelClientMsg_MapLine>(Arena*);
template<> ::CCitadelClientMsg_MapPing* Arena::CreateMaybeMessage<::CCitadelClientMsg_MapPing>(Arena*);
template<> ::CCitadelClientMsg_MutePlayers* Arena::CreateMaybeMessage<::CCitadelClientMsg_MutePlayers>(Arena*);
template<> ::CCitadelClientMsg_Pause* Arena::CreateMaybeMessage<::CCitadelClientMsg_Pause>(Arena*);
template<> ::CCitadelClientMsg_PerfReport* Arena::CreateMaybeMessage<::CCitadelClientMsg_PerfReport>(Arena*);
template<> ::CCitadelClientMsg_PerformanceStats* Arena::CreateMaybeMessage<::CCitadelClientMsg_PerformanceStats>(Arena*);
template<> ::CCitadelClientMsg_PingWheel* Arena::CreateMaybeMessage<::CCitadelClientMsg_PingWheel>(Arena*);
template<> ::CCitadelClientMsg_QuickResponse* Arena::CreateMaybeMessage<::CCitadelClientMsg_QuickResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ECitadelClientMessages : int {
  CITADEL_CM_MapPing = 1002,
  CITADEL_CM_PerformanceStats = 1003,
  CITADEL_CM_PingWheel = 1004,
  CITADEL_CM_ChatMsg = 1005,
  CITADEL_CM_PerfReport = 1006,
  CITADEL_CM_QuickResponse = 1007,
  CITADEL_CM_Pause = 1008,
  CITADEL_CM_MapLine = 1009,
  CITADEL_CM_AbilityPing = 1010,
  CITADEL_CM_ExecuteMapUnitAbility = 1011,
  CITADEL_CM_GetDamageStats = 1012,
  CITADEL_CM_CheaterVote = 1013,
  CITADEL_CM_MutePlayers = 1014
};
bool ECitadelClientMessages_IsValid(int value);
constexpr ECitadelClientMessages ECitadelClientMessages_MIN = CITADEL_CM_MapPing;
constexpr ECitadelClientMessages ECitadelClientMessages_MAX = CITADEL_CM_MutePlayers;
constexpr int ECitadelClientMessages_ARRAYSIZE = ECitadelClientMessages_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECitadelClientMessages_descriptor();
template<typename T>
inline const std::string& ECitadelClientMessages_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ECitadelClientMessages>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ECitadelClientMessages_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ECitadelClientMessages_descriptor(), enum_t_value);
}
inline bool ECitadelClientMessages_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ECitadelClientMessages* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ECitadelClientMessages>(
    ECitadelClientMessages_descriptor(), name, value);
}
// ===================================================================

class CCitadelClientMsg_Pause final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CCitadelClientMsg_Pause) */ {
 public:
  inline CCitadelClientMsg_Pause() : CCitadelClientMsg_Pause(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CCitadelClientMsg_Pause(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCitadelClientMsg_Pause(const CCitadelClientMsg_Pause& from);
  CCitadelClientMsg_Pause(CCitadelClientMsg_Pause&& from) noexcept
    : CCitadelClientMsg_Pause() {
    *this = ::std::move(from);
  }

  inline CCitadelClientMsg_Pause& operator=(const CCitadelClientMsg_Pause& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCitadelClientMsg_Pause& operator=(CCitadelClientMsg_Pause&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCitadelClientMsg_Pause& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCitadelClientMsg_Pause* internal_default_instance() {
    return reinterpret_cast<const CCitadelClientMsg_Pause*>(
               &_CCitadelClientMsg_Pause_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CCitadelClientMsg_Pause& a, CCitadelClientMsg_Pause& b) {
    a.Swap(&b);
  }
  inline void Swap(CCitadelClientMsg_Pause* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCitadelClientMsg_Pause* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCitadelClientMsg_Pause* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCitadelClientMsg_Pause>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CCitadelClientMsg_Pause& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CCitadelClientMsg_Pause& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCitadelClientMsg_Pause";
  }
  protected:
  explicit CCitadelClientMsg_Pause(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CCitadelClientMsg_Pause)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_citadel_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CCitadelClientMsg_MapPing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCitadelClientMsg_MapPing) */ {
 public:
  inline CCitadelClientMsg_MapPing() : CCitadelClientMsg_MapPing(nullptr) {}
  ~CCitadelClientMsg_MapPing() override;
  explicit PROTOBUF_CONSTEXPR CCitadelClientMsg_MapPing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCitadelClientMsg_MapPing(const CCitadelClientMsg_MapPing& from);
  CCitadelClientMsg_MapPing(CCitadelClientMsg_MapPing&& from) noexcept
    : CCitadelClientMsg_MapPing() {
    *this = ::std::move(from);
  }

  inline CCitadelClientMsg_MapPing& operator=(const CCitadelClientMsg_MapPing& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCitadelClientMsg_MapPing& operator=(CCitadelClientMsg_MapPing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCitadelClientMsg_MapPing& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCitadelClientMsg_MapPing* internal_default_instance() {
    return reinterpret_cast<const CCitadelClientMsg_MapPing*>(
               &_CCitadelClientMsg_MapPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CCitadelClientMsg_MapPing& a, CCitadelClientMsg_MapPing& b) {
    a.Swap(&b);
  }
  inline void Swap(CCitadelClientMsg_MapPing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCitadelClientMsg_MapPing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCitadelClientMsg_MapPing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCitadelClientMsg_MapPing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCitadelClientMsg_MapPing& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CCitadelClientMsg_MapPing& from) {
    CCitadelClientMsg_MapPing::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCitadelClientMsg_MapPing* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCitadelClientMsg_MapPing";
  }
  protected:
  explicit CCitadelClientMsg_MapPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPingLocationFieldNumber = 1,
    kEventTypeFieldNumber = 2,
    kIsAggressivePingFieldNumber = 4,
    kIsMinimapPingFieldNumber = 5,
    kIsBlindPingFieldNumber = 6,
    kEntityIndexFieldNumber = 3,
  };
  // optional .CMsgVector ping_location = 1;
  bool has_ping_location() const;
  private:
  bool _internal_has_ping_location() const;
  public:
  void clear_ping_location();
  const ::CMsgVector& ping_location() const;
  PROTOBUF_NODISCARD ::CMsgVector* release_ping_location();
  ::CMsgVector* mutable_ping_location();
  void set_allocated_ping_location(::CMsgVector* ping_location);
  private:
  const ::CMsgVector& _internal_ping_location() const;
  ::CMsgVector* _internal_mutable_ping_location();
  public:
  void unsafe_arena_set_allocated_ping_location(
      ::CMsgVector* ping_location);
  ::CMsgVector* unsafe_arena_release_ping_location();

  // optional int32 event_type = 2;
  bool has_event_type() const;
  private:
  bool _internal_has_event_type() const;
  public:
  void clear_event_type();
  int32_t event_type() const;
  void set_event_type(int32_t value);
  private:
  int32_t _internal_event_type() const;
  void _internal_set_event_type(int32_t value);
  public:

  // optional bool is_aggressive_ping = 4;
  bool has_is_aggressive_ping() const;
  private:
  bool _internal_has_is_aggressive_ping() const;
  public:
  void clear_is_aggressive_ping();
  bool is_aggressive_ping() const;
  void set_is_aggressive_ping(bool value);
  private:
  bool _internal_is_aggressive_ping() const;
  void _internal_set_is_aggressive_ping(bool value);
  public:

  // optional bool is_minimap_ping = 5;
  bool has_is_minimap_ping() const;
  private:
  bool _internal_has_is_minimap_ping() const;
  public:
  void clear_is_minimap_ping();
  bool is_minimap_ping() const;
  void set_is_minimap_ping(bool value);
  private:
  bool _internal_is_minimap_ping() const;
  void _internal_set_is_minimap_ping(bool value);
  public:

  // optional bool is_blind_ping = 6;
  bool has_is_blind_ping() const;
  private:
  bool _internal_has_is_blind_ping() const;
  public:
  void clear_is_blind_ping();
  bool is_blind_ping() const;
  void set_is_blind_ping(bool value);
  private:
  bool _internal_is_blind_ping() const;
  void _internal_set_is_blind_ping(bool value);
  public:

  // optional int32 entity_index = 3 [default = -1];
  bool has_entity_index() const;
  private:
  bool _internal_has_entity_index() const;
  public:
  void clear_entity_index();
  int32_t entity_index() const;
  void set_entity_index(int32_t value);
  private:
  int32_t _internal_entity_index() const;
  void _internal_set_entity_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCitadelClientMsg_MapPing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgVector* ping_location_;
    int32_t event_type_;
    bool is_aggressive_ping_;
    bool is_minimap_ping_;
    bool is_blind_ping_;
    int32_t entity_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_citadel_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CCitadelClientMsg_PingWheel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCitadelClientMsg_PingWheel) */ {
 public:
  inline CCitadelClientMsg_PingWheel() : CCitadelClientMsg_PingWheel(nullptr) {}
  ~CCitadelClientMsg_PingWheel() override;
  explicit PROTOBUF_CONSTEXPR CCitadelClientMsg_PingWheel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCitadelClientMsg_PingWheel(const CCitadelClientMsg_PingWheel& from);
  CCitadelClientMsg_PingWheel(CCitadelClientMsg_PingWheel&& from) noexcept
    : CCitadelClientMsg_PingWheel() {
    *this = ::std::move(from);
  }

  inline CCitadelClientMsg_PingWheel& operator=(const CCitadelClientMsg_PingWheel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCitadelClientMsg_PingWheel& operator=(CCitadelClientMsg_PingWheel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCitadelClientMsg_PingWheel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCitadelClientMsg_PingWheel* internal_default_instance() {
    return reinterpret_cast<const CCitadelClientMsg_PingWheel*>(
               &_CCitadelClientMsg_PingWheel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CCitadelClientMsg_PingWheel& a, CCitadelClientMsg_PingWheel& b) {
    a.Swap(&b);
  }
  inline void Swap(CCitadelClientMsg_PingWheel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCitadelClientMsg_PingWheel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCitadelClientMsg_PingWheel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCitadelClientMsg_PingWheel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCitadelClientMsg_PingWheel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CCitadelClientMsg_PingWheel& from) {
    CCitadelClientMsg_PingWheel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCitadelClientMsg_PingWheel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCitadelClientMsg_PingWheel";
  }
  protected:
  explicit CCitadelClientMsg_PingWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPingLocationFieldNumber = 3,
    kPingWheelOptionIdFieldNumber = 1,
    kSubnavMessageIdFieldNumber = 2,
    kEntityIndexFieldNumber = 4,
  };
  // optional .CMsgVector ping_location = 3;
  bool has_ping_location() const;
  private:
  bool _internal_has_ping_location() const;
  public:
  void clear_ping_location();
  const ::CMsgVector& ping_location() const;
  PROTOBUF_NODISCARD ::CMsgVector* release_ping_location();
  ::CMsgVector* mutable_ping_location();
  void set_allocated_ping_location(::CMsgVector* ping_location);
  private:
  const ::CMsgVector& _internal_ping_location() const;
  ::CMsgVector* _internal_mutable_ping_location();
  public:
  void unsafe_arena_set_allocated_ping_location(
      ::CMsgVector* ping_location);
  ::CMsgVector* unsafe_arena_release_ping_location();

  // optional uint32 ping_wheel_option_id = 1;
  bool has_ping_wheel_option_id() const;
  private:
  bool _internal_has_ping_wheel_option_id() const;
  public:
  void clear_ping_wheel_option_id();
  uint32_t ping_wheel_option_id() const;
  void set_ping_wheel_option_id(uint32_t value);
  private:
  uint32_t _internal_ping_wheel_option_id() const;
  void _internal_set_ping_wheel_option_id(uint32_t value);
  public:

  // optional uint32 subnav_message_id = 2;
  bool has_subnav_message_id() const;
  private:
  bool _internal_has_subnav_message_id() const;
  public:
  void clear_subnav_message_id();
  uint32_t subnav_message_id() const;
  void set_subnav_message_id(uint32_t value);
  private:
  uint32_t _internal_subnav_message_id() const;
  void _internal_set_subnav_message_id(uint32_t value);
  public:

  // optional int32 entity_index = 4 [default = -1];
  bool has_entity_index() const;
  private:
  bool _internal_has_entity_index() const;
  public:
  void clear_entity_index();
  int32_t entity_index() const;
  void set_entity_index(int32_t value);
  private:
  int32_t _internal_entity_index() const;
  void _internal_set_entity_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCitadelClientMsg_PingWheel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgVector* ping_location_;
    uint32_t ping_wheel_option_id_;
    uint32_t subnav_message_id_;
    int32_t entity_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_citadel_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CCitadelClientMsg_AbilityPing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCitadelClientMsg_AbilityPing) */ {
 public:
  inline CCitadelClientMsg_AbilityPing() : CCitadelClientMsg_AbilityPing(nullptr) {}
  ~CCitadelClientMsg_AbilityPing() override;
  explicit PROTOBUF_CONSTEXPR CCitadelClientMsg_AbilityPing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCitadelClientMsg_AbilityPing(const CCitadelClientMsg_AbilityPing& from);
  CCitadelClientMsg_AbilityPing(CCitadelClientMsg_AbilityPing&& from) noexcept
    : CCitadelClientMsg_AbilityPing() {
    *this = ::std::move(from);
  }

  inline CCitadelClientMsg_AbilityPing& operator=(const CCitadelClientMsg_AbilityPing& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCitadelClientMsg_AbilityPing& operator=(CCitadelClientMsg_AbilityPing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCitadelClientMsg_AbilityPing& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCitadelClientMsg_AbilityPing* internal_default_instance() {
    return reinterpret_cast<const CCitadelClientMsg_AbilityPing*>(
               &_CCitadelClientMsg_AbilityPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CCitadelClientMsg_AbilityPing& a, CCitadelClientMsg_AbilityPing& b) {
    a.Swap(&b);
  }
  inline void Swap(CCitadelClientMsg_AbilityPing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCitadelClientMsg_AbilityPing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCitadelClientMsg_AbilityPing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCitadelClientMsg_AbilityPing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCitadelClientMsg_AbilityPing& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CCitadelClientMsg_AbilityPing& from) {
    CCitadelClientMsg_AbilityPing::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCitadelClientMsg_AbilityPing* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCitadelClientMsg_AbilityPing";
  }
  protected:
  explicit CCitadelClientMsg_AbilityPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPingedAbilityIdFieldNumber = 2,
    kEntityIndexFieldNumber = 1,
    kPingedPlayerSlotFieldNumber = 3,
  };
  // optional uint32 pinged_ability_id = 2;
  bool has_pinged_ability_id() const;
  private:
  bool _internal_has_pinged_ability_id() const;
  public:
  void clear_pinged_ability_id();
  uint32_t pinged_ability_id() const;
  void set_pinged_ability_id(uint32_t value);
  private:
  uint32_t _internal_pinged_ability_id() const;
  void _internal_set_pinged_ability_id(uint32_t value);
  public:

  // optional int32 entity_index = 1 [default = -1];
  bool has_entity_index() const;
  private:
  bool _internal_has_entity_index() const;
  public:
  void clear_entity_index();
  int32_t entity_index() const;
  void set_entity_index(int32_t value);
  private:
  int32_t _internal_entity_index() const;
  void _internal_set_entity_index(int32_t value);
  public:

  // optional int32 pinged_player_slot = 3 [default = -1];
  bool has_pinged_player_slot() const;
  private:
  bool _internal_has_pinged_player_slot() const;
  public:
  void clear_pinged_player_slot();
  int32_t pinged_player_slot() const;
  void set_pinged_player_slot(int32_t value);
  private:
  int32_t _internal_pinged_player_slot() const;
  void _internal_set_pinged_player_slot(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCitadelClientMsg_AbilityPing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t pinged_ability_id_;
    int32_t entity_index_;
    int32_t pinged_player_slot_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_citadel_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CCitadelClientMsg_MapLine final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCitadelClientMsg_MapLine) */ {
 public:
  inline CCitadelClientMsg_MapLine() : CCitadelClientMsg_MapLine(nullptr) {}
  ~CCitadelClientMsg_MapLine() override;
  explicit PROTOBUF_CONSTEXPR CCitadelClientMsg_MapLine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCitadelClientMsg_MapLine(const CCitadelClientMsg_MapLine& from);
  CCitadelClientMsg_MapLine(CCitadelClientMsg_MapLine&& from) noexcept
    : CCitadelClientMsg_MapLine() {
    *this = ::std::move(from);
  }

  inline CCitadelClientMsg_MapLine& operator=(const CCitadelClientMsg_MapLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCitadelClientMsg_MapLine& operator=(CCitadelClientMsg_MapLine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCitadelClientMsg_MapLine& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCitadelClientMsg_MapLine* internal_default_instance() {
    return reinterpret_cast<const CCitadelClientMsg_MapLine*>(
               &_CCitadelClientMsg_MapLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CCitadelClientMsg_MapLine& a, CCitadelClientMsg_MapLine& b) {
    a.Swap(&b);
  }
  inline void Swap(CCitadelClientMsg_MapLine* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCitadelClientMsg_MapLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCitadelClientMsg_MapLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCitadelClientMsg_MapLine>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCitadelClientMsg_MapLine& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CCitadelClientMsg_MapLine& from) {
    CCitadelClientMsg_MapLine::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCitadelClientMsg_MapLine* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCitadelClientMsg_MapLine";
  }
  protected:
  explicit CCitadelClientMsg_MapLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaplineFieldNumber = 1,
  };
  // optional .CMsgMapLine mapline = 1;
  bool has_mapline() const;
  private:
  bool _internal_has_mapline() const;
  public:
  void clear_mapline();
  const ::CMsgMapLine& mapline() const;
  PROTOBUF_NODISCARD ::CMsgMapLine* release_mapline();
  ::CMsgMapLine* mutable_mapline();
  void set_allocated_mapline(::CMsgMapLine* mapline);
  private:
  const ::CMsgMapLine& _internal_mapline() const;
  ::CMsgMapLine* _internal_mutable_mapline();
  public:
  void unsafe_arena_set_allocated_mapline(
      ::CMsgMapLine* mapline);
  ::CMsgMapLine* unsafe_arena_release_mapline();

  // @@protoc_insertion_point(class_scope:CCitadelClientMsg_MapLine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgMapLine* mapline_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_citadel_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CCitadelClientMsg_QuickResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCitadelClientMsg_QuickResponse) */ {
 public:
  inline CCitadelClientMsg_QuickResponse() : CCitadelClientMsg_QuickResponse(nullptr) {}
  ~CCitadelClientMsg_QuickResponse() override;
  explicit PROTOBUF_CONSTEXPR CCitadelClientMsg_QuickResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCitadelClientMsg_QuickResponse(const CCitadelClientMsg_QuickResponse& from);
  CCitadelClientMsg_QuickResponse(CCitadelClientMsg_QuickResponse&& from) noexcept
    : CCitadelClientMsg_QuickResponse() {
    *this = ::std::move(from);
  }

  inline CCitadelClientMsg_QuickResponse& operator=(const CCitadelClientMsg_QuickResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCitadelClientMsg_QuickResponse& operator=(CCitadelClientMsg_QuickResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCitadelClientMsg_QuickResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCitadelClientMsg_QuickResponse* internal_default_instance() {
    return reinterpret_cast<const CCitadelClientMsg_QuickResponse*>(
               &_CCitadelClientMsg_QuickResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CCitadelClientMsg_QuickResponse& a, CCitadelClientMsg_QuickResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CCitadelClientMsg_QuickResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCitadelClientMsg_QuickResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCitadelClientMsg_QuickResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCitadelClientMsg_QuickResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCitadelClientMsg_QuickResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CCitadelClientMsg_QuickResponse& from) {
    CCitadelClientMsg_QuickResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCitadelClientMsg_QuickResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCitadelClientMsg_QuickResponse";
  }
  protected:
  explicit CCitadelClientMsg_QuickResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPingWheelMessageIdFieldNumber = 1,
    kRespondingToPingMessageIdFieldNumber = 2,
    kRespondingToPlayerSlotFieldNumber = 3,
  };
  // optional uint32 ping_wheel_message_id = 1;
  bool has_ping_wheel_message_id() const;
  private:
  bool _internal_has_ping_wheel_message_id() const;
  public:
  void clear_ping_wheel_message_id();
  uint32_t ping_wheel_message_id() const;
  void set_ping_wheel_message_id(uint32_t value);
  private:
  uint32_t _internal_ping_wheel_message_id() const;
  void _internal_set_ping_wheel_message_id(uint32_t value);
  public:

  // optional uint32 responding_to_ping_message_id = 2;
  bool has_responding_to_ping_message_id() const;
  private:
  bool _internal_has_responding_to_ping_message_id() const;
  public:
  void clear_responding_to_ping_message_id();
  uint32_t responding_to_ping_message_id() const;
  void set_responding_to_ping_message_id(uint32_t value);
  private:
  uint32_t _internal_responding_to_ping_message_id() const;
  void _internal_set_responding_to_ping_message_id(uint32_t value);
  public:

  // optional int32 responding_to_player_slot = 3 [default = -1];
  bool has_responding_to_player_slot() const;
  private:
  bool _internal_has_responding_to_player_slot() const;
  public:
  void clear_responding_to_player_slot();
  int32_t responding_to_player_slot() const;
  void set_responding_to_player_slot(int32_t value);
  private:
  int32_t _internal_responding_to_player_slot() const;
  void _internal_set_responding_to_player_slot(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCitadelClientMsg_QuickResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t ping_wheel_message_id_;
    uint32_t responding_to_ping_message_id_;
    int32_t responding_to_player_slot_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_citadel_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CCitadelClientMsg_PerformanceStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCitadelClientMsg_PerformanceStats) */ {
 public:
  inline CCitadelClientMsg_PerformanceStats() : CCitadelClientMsg_PerformanceStats(nullptr) {}
  ~CCitadelClientMsg_PerformanceStats() override;
  explicit PROTOBUF_CONSTEXPR CCitadelClientMsg_PerformanceStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCitadelClientMsg_PerformanceStats(const CCitadelClientMsg_PerformanceStats& from);
  CCitadelClientMsg_PerformanceStats(CCitadelClientMsg_PerformanceStats&& from) noexcept
    : CCitadelClientMsg_PerformanceStats() {
    *this = ::std::move(from);
  }

  inline CCitadelClientMsg_PerformanceStats& operator=(const CCitadelClientMsg_PerformanceStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCitadelClientMsg_PerformanceStats& operator=(CCitadelClientMsg_PerformanceStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCitadelClientMsg_PerformanceStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCitadelClientMsg_PerformanceStats* internal_default_instance() {
    return reinterpret_cast<const CCitadelClientMsg_PerformanceStats*>(
               &_CCitadelClientMsg_PerformanceStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CCitadelClientMsg_PerformanceStats& a, CCitadelClientMsg_PerformanceStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CCitadelClientMsg_PerformanceStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCitadelClientMsg_PerformanceStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCitadelClientMsg_PerformanceStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCitadelClientMsg_PerformanceStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCitadelClientMsg_PerformanceStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CCitadelClientMsg_PerformanceStats& from) {
    CCitadelClientMsg_PerformanceStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCitadelClientMsg_PerformanceStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCitadelClientMsg_PerformanceStats";
  }
  protected:
  explicit CCitadelClientMsg_PerformanceStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentGameTimeFieldNumber = 1,
    kAverageFpsFieldNumber = 2,
    kMinFpsFieldNumber = 3,
    kMaxFpsFieldNumber = 4,
  };
  // optional float current_game_time = 1;
  bool has_current_game_time() const;
  private:
  bool _internal_has_current_game_time() const;
  public:
  void clear_current_game_time();
  float current_game_time() const;
  void set_current_game_time(float value);
  private:
  float _internal_current_game_time() const;
  void _internal_set_current_game_time(float value);
  public:

  // optional float average_fps = 2;
  bool has_average_fps() const;
  private:
  bool _internal_has_average_fps() const;
  public:
  void clear_average_fps();
  float average_fps() const;
  void set_average_fps(float value);
  private:
  float _internal_average_fps() const;
  void _internal_set_average_fps(float value);
  public:

  // optional float min_fps = 3;
  bool has_min_fps() const;
  private:
  bool _internal_has_min_fps() const;
  public:
  void clear_min_fps();
  float min_fps() const;
  void set_min_fps(float value);
  private:
  float _internal_min_fps() const;
  void _internal_set_min_fps(float value);
  public:

  // optional float max_fps = 4;
  bool has_max_fps() const;
  private:
  bool _internal_has_max_fps() const;
  public:
  void clear_max_fps();
  float max_fps() const;
  void set_max_fps(float value);
  private:
  float _internal_max_fps() const;
  void _internal_set_max_fps(float value);
  public:

  // @@protoc_insertion_point(class_scope:CCitadelClientMsg_PerformanceStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float current_game_time_;
    float average_fps_;
    float min_fps_;
    float max_fps_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_citadel_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CCitadelClientMsg_ChatMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCitadelClientMsg_ChatMsg) */ {
 public:
  inline CCitadelClientMsg_ChatMsg() : CCitadelClientMsg_ChatMsg(nullptr) {}
  ~CCitadelClientMsg_ChatMsg() override;
  explicit PROTOBUF_CONSTEXPR CCitadelClientMsg_ChatMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCitadelClientMsg_ChatMsg(const CCitadelClientMsg_ChatMsg& from);
  CCitadelClientMsg_ChatMsg(CCitadelClientMsg_ChatMsg&& from) noexcept
    : CCitadelClientMsg_ChatMsg() {
    *this = ::std::move(from);
  }

  inline CCitadelClientMsg_ChatMsg& operator=(const CCitadelClientMsg_ChatMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCitadelClientMsg_ChatMsg& operator=(CCitadelClientMsg_ChatMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCitadelClientMsg_ChatMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCitadelClientMsg_ChatMsg* internal_default_instance() {
    return reinterpret_cast<const CCitadelClientMsg_ChatMsg*>(
               &_CCitadelClientMsg_ChatMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CCitadelClientMsg_ChatMsg& a, CCitadelClientMsg_ChatMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CCitadelClientMsg_ChatMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCitadelClientMsg_ChatMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCitadelClientMsg_ChatMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCitadelClientMsg_ChatMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCitadelClientMsg_ChatMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CCitadelClientMsg_ChatMsg& from) {
    CCitadelClientMsg_ChatMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCitadelClientMsg_ChatMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCitadelClientMsg_ChatMsg";
  }
  protected:
  explicit CCitadelClientMsg_ChatMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatTextFieldNumber = 1,
    kAllChatFieldNumber = 2,
    kLaneColorFieldNumber = 3,
  };
  // optional string chat_text = 1;
  bool has_chat_text() const;
  private:
  bool _internal_has_chat_text() const;
  public:
  void clear_chat_text();
  const std::string& chat_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_text();
  PROTOBUF_NODISCARD std::string* release_chat_text();
  void set_allocated_chat_text(std::string* chat_text);
  private:
  const std::string& _internal_chat_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_text(const std::string& value);
  std::string* _internal_mutable_chat_text();
  public:

  // optional bool all_chat = 2;
  bool has_all_chat() const;
  private:
  bool _internal_has_all_chat() const;
  public:
  void clear_all_chat();
  bool all_chat() const;
  void set_all_chat(bool value);
  private:
  bool _internal_all_chat() const;
  void _internal_set_all_chat(bool value);
  public:

  // optional .CMsgLaneColor lane_color = 3 [default = k_ELaneColor_Invalid];
  bool has_lane_color() const;
  private:
  bool _internal_has_lane_color() const;
  public:
  void clear_lane_color();
  ::CMsgLaneColor lane_color() const;
  void set_lane_color(::CMsgLaneColor value);
  private:
  ::CMsgLaneColor _internal_lane_color() const;
  void _internal_set_lane_color(::CMsgLaneColor value);
  public:

  // @@protoc_insertion_point(class_scope:CCitadelClientMsg_ChatMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_text_;
    bool all_chat_;
    int lane_color_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_citadel_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CCitadelClientMsg_PerfReport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCitadelClientMsg_PerfReport) */ {
 public:
  inline CCitadelClientMsg_PerfReport() : CCitadelClientMsg_PerfReport(nullptr) {}
  ~CCitadelClientMsg_PerfReport() override;
  explicit PROTOBUF_CONSTEXPR CCitadelClientMsg_PerfReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCitadelClientMsg_PerfReport(const CCitadelClientMsg_PerfReport& from);
  CCitadelClientMsg_PerfReport(CCitadelClientMsg_PerfReport&& from) noexcept
    : CCitadelClientMsg_PerfReport() {
    *this = ::std::move(from);
  }

  inline CCitadelClientMsg_PerfReport& operator=(const CCitadelClientMsg_PerfReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCitadelClientMsg_PerfReport& operator=(CCitadelClientMsg_PerfReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCitadelClientMsg_PerfReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCitadelClientMsg_PerfReport* internal_default_instance() {
    return reinterpret_cast<const CCitadelClientMsg_PerfReport*>(
               &_CCitadelClientMsg_PerfReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CCitadelClientMsg_PerfReport& a, CCitadelClientMsg_PerfReport& b) {
    a.Swap(&b);
  }
  inline void Swap(CCitadelClientMsg_PerfReport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCitadelClientMsg_PerfReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCitadelClientMsg_PerfReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCitadelClientMsg_PerfReport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCitadelClientMsg_PerfReport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CCitadelClientMsg_PerfReport& from) {
    CCitadelClientMsg_PerfReport::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCitadelClientMsg_PerfReport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCitadelClientMsg_PerfReport";
  }
  protected:
  explicit CCitadelClientMsg_PerfReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAverageFrameTimeFieldNumber = 1,
    kMaxFrameTimeFieldNumber = 2,
    kAverageComputeTimeFieldNumber = 3,
    kMaxComputeTimeFieldNumber = 4,
    kAverageClientTickTimeFieldNumber = 5,
    kMaxClientTickTimeFieldNumber = 6,
    kAverageClientSimulateTimeFieldNumber = 7,
    kMaxClientSimulateTimeFieldNumber = 8,
    kAverageOutputTimeFieldNumber = 9,
    kMaxOutputTimeFieldNumber = 10,
    kAverageWaitForRenderingToCompleteTimeFieldNumber = 11,
    kMaxWaitForRenderingToCompleteTimeFieldNumber = 12,
    kAverageSwapTimeFieldNumber = 13,
    kMaxSwapTimeFieldNumber = 14,
    kAverageFrameUpdateTimeFieldNumber = 15,
    kMaxFrameUpdateTimeFieldNumber = 16,
    kAverageIdleTimeFieldNumber = 17,
    kMaxIdleTimeFieldNumber = 18,
    kAverageInputProcessingTimeFieldNumber = 19,
    kMaxInputProcessingTimeFieldNumber = 20,
  };
  // optional float average_frame_time = 1;
  bool has_average_frame_time() const;
  private:
  bool _internal_has_average_frame_time() const;
  public:
  void clear_average_frame_time();
  float average_frame_time() const;
  void set_average_frame_time(float value);
  private:
  float _internal_average_frame_time() const;
  void _internal_set_average_frame_time(float value);
  public:

  // optional float max_frame_time = 2;
  bool has_max_frame_time() const;
  private:
  bool _internal_has_max_frame_time() const;
  public:
  void clear_max_frame_time();
  float max_frame_time() const;
  void set_max_frame_time(float value);
  private:
  float _internal_max_frame_time() const;
  void _internal_set_max_frame_time(float value);
  public:

  // optional float average_compute_time = 3;
  bool has_average_compute_time() const;
  private:
  bool _internal_has_average_compute_time() const;
  public:
  void clear_average_compute_time();
  float average_compute_time() const;
  void set_average_compute_time(float value);
  private:
  float _internal_average_compute_time() const;
  void _internal_set_average_compute_time(float value);
  public:

  // optional float max_compute_time = 4;
  bool has_max_compute_time() const;
  private:
  bool _internal_has_max_compute_time() const;
  public:
  void clear_max_compute_time();
  float max_compute_time() const;
  void set_max_compute_time(float value);
  private:
  float _internal_max_compute_time() const;
  void _internal_set_max_compute_time(float value);
  public:

  // optional float average_client_tick_time = 5;
  bool has_average_client_tick_time() const;
  private:
  bool _internal_has_average_client_tick_time() const;
  public:
  void clear_average_client_tick_time();
  float average_client_tick_time() const;
  void set_average_client_tick_time(float value);
  private:
  float _internal_average_client_tick_time() const;
  void _internal_set_average_client_tick_time(float value);
  public:

  // optional float max_client_tick_time = 6;
  bool has_max_client_tick_time() const;
  private:
  bool _internal_has_max_client_tick_time() const;
  public:
  void clear_max_client_tick_time();
  float max_client_tick_time() const;
  void set_max_client_tick_time(float value);
  private:
  float _internal_max_client_tick_time() const;
  void _internal_set_max_client_tick_time(float value);
  public:

  // optional float average_client_simulate_time = 7;
  bool has_average_client_simulate_time() const;
  private:
  bool _internal_has_average_client_simulate_time() const;
  public:
  void clear_average_client_simulate_time();
  float average_client_simulate_time() const;
  void set_average_client_simulate_time(float value);
  private:
  float _internal_average_client_simulate_time() const;
  void _internal_set_average_client_simulate_time(float value);
  public:

  // optional float max_client_simulate_time = 8;
  bool has_max_client_simulate_time() const;
  private:
  bool _internal_has_max_client_simulate_time() const;
  public:
  void clear_max_client_simulate_time();
  float max_client_simulate_time() const;
  void set_max_client_simulate_time(float value);
  private:
  float _internal_max_client_simulate_time() const;
  void _internal_set_max_client_simulate_time(float value);
  public:

  // optional float average_output_time = 9;
  bool has_average_output_time() const;
  private:
  bool _internal_has_average_output_time() const;
  public:
  void clear_average_output_time();
  float average_output_time() const;
  void set_average_output_time(float value);
  private:
  float _internal_average_output_time() const;
  void _internal_set_average_output_time(float value);
  public:

  // optional float max_output_time = 10;
  bool has_max_output_time() const;
  private:
  bool _internal_has_max_output_time() const;
  public:
  void clear_max_output_time();
  float max_output_time() const;
  void set_max_output_time(float value);
  private:
  float _internal_max_output_time() const;
  void _internal_set_max_output_time(float value);
  public:

  // optional float average_wait_for_rendering_to_complete_time = 11;
  bool has_average_wait_for_rendering_to_complete_time() const;
  private:
  bool _internal_has_average_wait_for_rendering_to_complete_time() const;
  public:
  void clear_average_wait_for_rendering_to_complete_time();
  float average_wait_for_rendering_to_complete_time() const;
  void set_average_wait_for_rendering_to_complete_time(float value);
  private:
  float _internal_average_wait_for_rendering_to_complete_time() const;
  void _internal_set_average_wait_for_rendering_to_complete_time(float value);
  public:

  // optional float max_wait_for_rendering_to_complete_time = 12;
  bool has_max_wait_for_rendering_to_complete_time() const;
  private:
  bool _internal_has_max_wait_for_rendering_to_complete_time() const;
  public:
  void clear_max_wait_for_rendering_to_complete_time();
  float max_wait_for_rendering_to_complete_time() const;
  void set_max_wait_for_rendering_to_complete_time(float value);
  private:
  float _internal_max_wait_for_rendering_to_complete_time() const;
  void _internal_set_max_wait_for_rendering_to_complete_time(float value);
  public:

  // optional float average_swap_time = 13;
  bool has_average_swap_time() const;
  private:
  bool _internal_has_average_swap_time() const;
  public:
  void clear_average_swap_time();
  float average_swap_time() const;
  void set_average_swap_time(float value);
  private:
  float _internal_average_swap_time() const;
  void _internal_set_average_swap_time(float value);
  public:

  // optional float max_swap_time = 14;
  bool has_max_swap_time() const;
  private:
  bool _internal_has_max_swap_time() const;
  public:
  void clear_max_swap_time();
  float max_swap_time() const;
  void set_max_swap_time(float value);
  private:
  float _internal_max_swap_time() const;
  void _internal_set_max_swap_time(float value);
  public:

  // optional float average_frame_update_time = 15;
  bool has_average_frame_update_time() const;
  private:
  bool _internal_has_average_frame_update_time() const;
  public:
  void clear_average_frame_update_time();
  float average_frame_update_time() const;
  void set_average_frame_update_time(float value);
  private:
  float _internal_average_frame_update_time() const;
  void _internal_set_average_frame_update_time(float value);
  public:

  // optional float max_frame_update_time = 16;
  bool has_max_frame_update_time() const;
  private:
  bool _internal_has_max_frame_update_time() const;
  public:
  void clear_max_frame_update_time();
  float max_frame_update_time() const;
  void set_max_frame_update_time(float value);
  private:
  float _internal_max_frame_update_time() const;
  void _internal_set_max_frame_update_time(float value);
  public:

  // optional float average_idle_time = 17;
  bool has_average_idle_time() const;
  private:
  bool _internal_has_average_idle_time() const;
  public:
  void clear_average_idle_time();
  float average_idle_time() const;
  void set_average_idle_time(float value);
  private:
  float _internal_average_idle_time() const;
  void _internal_set_average_idle_time(float value);
  public:

  // optional float max_idle_time = 18;
  bool has_max_idle_time() const;
  private:
  bool _internal_has_max_idle_time() const;
  public:
  void clear_max_idle_time();
  float max_idle_time() const;
  void set_max_idle_time(float value);
  private:
  float _internal_max_idle_time() const;
  void _internal_set_max_idle_time(float value);
  public:

  // optional float average_input_processing_time = 19;
  bool has_average_input_processing_time() const;
  private:
  bool _internal_has_average_input_processing_time() const;
  public:
  void clear_average_input_processing_time();
  float average_input_processing_time() const;
  void set_average_input_processing_time(float value);
  private:
  float _internal_average_input_processing_time() const;
  void _internal_set_average_input_processing_time(float value);
  public:

  // optional float max_input_processing_time = 20;
  bool has_max_input_processing_time() const;
  private:
  bool _internal_has_max_input_processing_time() const;
  public:
  void clear_max_input_processing_time();
  float max_input_processing_time() const;
  void set_max_input_processing_time(float value);
  private:
  float _internal_max_input_processing_time() const;
  void _internal_set_max_input_processing_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:CCitadelClientMsg_PerfReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float average_frame_time_;
    float max_frame_time_;
    float average_compute_time_;
    float max_compute_time_;
    float average_client_tick_time_;
    float max_client_tick_time_;
    float average_client_simulate_time_;
    float max_client_simulate_time_;
    float average_output_time_;
    float max_output_time_;
    float average_wait_for_rendering_to_complete_time_;
    float max_wait_for_rendering_to_complete_time_;
    float average_swap_time_;
    float max_swap_time_;
    float average_frame_update_time_;
    float max_frame_update_time_;
    float average_idle_time_;
    float max_idle_time_;
    float average_input_processing_time_;
    float max_input_processing_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_citadel_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CCitadelClientMsg_GetDamageStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCitadelClientMsg_GetDamageStats) */ {
 public:
  inline CCitadelClientMsg_GetDamageStats() : CCitadelClientMsg_GetDamageStats(nullptr) {}
  ~CCitadelClientMsg_GetDamageStats() override;
  explicit PROTOBUF_CONSTEXPR CCitadelClientMsg_GetDamageStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCitadelClientMsg_GetDamageStats(const CCitadelClientMsg_GetDamageStats& from);
  CCitadelClientMsg_GetDamageStats(CCitadelClientMsg_GetDamageStats&& from) noexcept
    : CCitadelClientMsg_GetDamageStats() {
    *this = ::std::move(from);
  }

  inline CCitadelClientMsg_GetDamageStats& operator=(const CCitadelClientMsg_GetDamageStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCitadelClientMsg_GetDamageStats& operator=(CCitadelClientMsg_GetDamageStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCitadelClientMsg_GetDamageStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCitadelClientMsg_GetDamageStats* internal_default_instance() {
    return reinterpret_cast<const CCitadelClientMsg_GetDamageStats*>(
               &_CCitadelClientMsg_GetDamageStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CCitadelClientMsg_GetDamageStats& a, CCitadelClientMsg_GetDamageStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CCitadelClientMsg_GetDamageStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCitadelClientMsg_GetDamageStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCitadelClientMsg_GetDamageStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCitadelClientMsg_GetDamageStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCitadelClientMsg_GetDamageStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CCitadelClientMsg_GetDamageStats& from) {
    CCitadelClientMsg_GetDamageStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCitadelClientMsg_GetDamageStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCitadelClientMsg_GetDamageStats";
  }
  protected:
  explicit CCitadelClientMsg_GetDamageStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbilityNameFieldNumber = 2,
    kLobbyPlayerSlotFieldNumber = 1,
  };
  // optional string ability_name = 2;
  bool has_ability_name() const;
  private:
  bool _internal_has_ability_name() const;
  public:
  void clear_ability_name();
  const std::string& ability_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ability_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ability_name();
  PROTOBUF_NODISCARD std::string* release_ability_name();
  void set_allocated_ability_name(std::string* ability_name);
  private:
  const std::string& _internal_ability_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ability_name(const std::string& value);
  std::string* _internal_mutable_ability_name();
  public:

  // optional uint32 lobby_player_slot = 1;
  bool has_lobby_player_slot() const;
  private:
  bool _internal_has_lobby_player_slot() const;
  public:
  void clear_lobby_player_slot();
  uint32_t lobby_player_slot() const;
  void set_lobby_player_slot(uint32_t value);
  private:
  uint32_t _internal_lobby_player_slot() const;
  void _internal_set_lobby_player_slot(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCitadelClientMsg_GetDamageStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ability_name_;
    uint32_t lobby_player_slot_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_citadel_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CCitadelClientCachedPlayerStats_Stat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCitadelClientCachedPlayerStats.Stat) */ {
 public:
  inline CCitadelClientCachedPlayerStats_Stat() : CCitadelClientCachedPlayerStats_Stat(nullptr) {}
  ~CCitadelClientCachedPlayerStats_Stat() override;
  explicit PROTOBUF_CONSTEXPR CCitadelClientCachedPlayerStats_Stat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCitadelClientCachedPlayerStats_Stat(const CCitadelClientCachedPlayerStats_Stat& from);
  CCitadelClientCachedPlayerStats_Stat(CCitadelClientCachedPlayerStats_Stat&& from) noexcept
    : CCitadelClientCachedPlayerStats_Stat() {
    *this = ::std::move(from);
  }

  inline CCitadelClientCachedPlayerStats_Stat& operator=(const CCitadelClientCachedPlayerStats_Stat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCitadelClientCachedPlayerStats_Stat& operator=(CCitadelClientCachedPlayerStats_Stat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCitadelClientCachedPlayerStats_Stat& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCitadelClientCachedPlayerStats_Stat* internal_default_instance() {
    return reinterpret_cast<const CCitadelClientCachedPlayerStats_Stat*>(
               &_CCitadelClientCachedPlayerStats_Stat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CCitadelClientCachedPlayerStats_Stat& a, CCitadelClientCachedPlayerStats_Stat& b) {
    a.Swap(&b);
  }
  inline void Swap(CCitadelClientCachedPlayerStats_Stat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCitadelClientCachedPlayerStats_Stat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCitadelClientCachedPlayerStats_Stat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCitadelClientCachedPlayerStats_Stat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCitadelClientCachedPlayerStats_Stat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CCitadelClientCachedPlayerStats_Stat& from) {
    CCitadelClientCachedPlayerStats_Stat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCitadelClientCachedPlayerStats_Stat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCitadelClientCachedPlayerStats.Stat";
  }
  protected:
  explicit CCitadelClientCachedPlayerStats_Stat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatNameFieldNumber = 1,
    kAllTimeTotalFieldNumber = 2,
    kAllTimeMatchMaxFieldNumber = 3,
    kAllTimeLifeMaxFieldNumber = 4,
  };
  // optional string stat_name = 1;
  bool has_stat_name() const;
  private:
  bool _internal_has_stat_name() const;
  public:
  void clear_stat_name();
  const std::string& stat_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stat_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stat_name();
  PROTOBUF_NODISCARD std::string* release_stat_name();
  void set_allocated_stat_name(std::string* stat_name);
  private:
  const std::string& _internal_stat_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stat_name(const std::string& value);
  std::string* _internal_mutable_stat_name();
  public:

  // optional uint64 all_time_total = 2;
  bool has_all_time_total() const;
  private:
  bool _internal_has_all_time_total() const;
  public:
  void clear_all_time_total();
  uint64_t all_time_total() const;
  void set_all_time_total(uint64_t value);
  private:
  uint64_t _internal_all_time_total() const;
  void _internal_set_all_time_total(uint64_t value);
  public:

  // optional uint32 all_time_match_max = 3;
  bool has_all_time_match_max() const;
  private:
  bool _internal_has_all_time_match_max() const;
  public:
  void clear_all_time_match_max();
  uint32_t all_time_match_max() const;
  void set_all_time_match_max(uint32_t value);
  private:
  uint32_t _internal_all_time_match_max() const;
  void _internal_set_all_time_match_max(uint32_t value);
  public:

  // optional uint32 all_time_life_max = 4;
  bool has_all_time_life_max() const;
  private:
  bool _internal_has_all_time_life_max() const;
  public:
  void clear_all_time_life_max();
  uint32_t all_time_life_max() const;
  void set_all_time_life_max(uint32_t value);
  private:
  uint32_t _internal_all_time_life_max() const;
  void _internal_set_all_time_life_max(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCitadelClientCachedPlayerStats.Stat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stat_name_;
    uint64_t all_time_total_;
    uint32_t all_time_match_max_;
    uint32_t all_time_life_max_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_citadel_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CCitadelClientCachedPlayerStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCitadelClientCachedPlayerStats) */ {
 public:
  inline CCitadelClientCachedPlayerStats() : CCitadelClientCachedPlayerStats(nullptr) {}
  ~CCitadelClientCachedPlayerStats() override;
  explicit PROTOBUF_CONSTEXPR CCitadelClientCachedPlayerStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCitadelClientCachedPlayerStats(const CCitadelClientCachedPlayerStats& from);
  CCitadelClientCachedPlayerStats(CCitadelClientCachedPlayerStats&& from) noexcept
    : CCitadelClientCachedPlayerStats() {
    *this = ::std::move(from);
  }

  inline CCitadelClientCachedPlayerStats& operator=(const CCitadelClientCachedPlayerStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCitadelClientCachedPlayerStats& operator=(CCitadelClientCachedPlayerStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCitadelClientCachedPlayerStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCitadelClientCachedPlayerStats* internal_default_instance() {
    return reinterpret_cast<const CCitadelClientCachedPlayerStats*>(
               &_CCitadelClientCachedPlayerStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CCitadelClientCachedPlayerStats& a, CCitadelClientCachedPlayerStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CCitadelClientCachedPlayerStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCitadelClientCachedPlayerStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCitadelClientCachedPlayerStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCitadelClientCachedPlayerStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCitadelClientCachedPlayerStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CCitadelClientCachedPlayerStats& from) {
    CCitadelClientCachedPlayerStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCitadelClientCachedPlayerStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCitadelClientCachedPlayerStats";
  }
  protected:
  explicit CCitadelClientCachedPlayerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CCitadelClientCachedPlayerStats_Stat Stat;

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // repeated .CCitadelClientCachedPlayerStats.Stat stats = 2;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::CCitadelClientCachedPlayerStats_Stat* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCitadelClientCachedPlayerStats_Stat >*
      mutable_stats();
  private:
  const ::CCitadelClientCachedPlayerStats_Stat& _internal_stats(int index) const;
  ::CCitadelClientCachedPlayerStats_Stat* _internal_add_stats();
  public:
  const ::CCitadelClientCachedPlayerStats_Stat& stats(int index) const;
  ::CCitadelClientCachedPlayerStats_Stat* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCitadelClientCachedPlayerStats_Stat >&
      stats() const;

  // optional uint32 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCitadelClientCachedPlayerStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCitadelClientCachedPlayerStats_Stat > stats_;
    uint32_t version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_citadel_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CCitadelClientMsg_ExecuteMapUnitAbility final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCitadelClientMsg_ExecuteMapUnitAbility) */ {
 public:
  inline CCitadelClientMsg_ExecuteMapUnitAbility() : CCitadelClientMsg_ExecuteMapUnitAbility(nullptr) {}
  ~CCitadelClientMsg_ExecuteMapUnitAbility() override;
  explicit PROTOBUF_CONSTEXPR CCitadelClientMsg_ExecuteMapUnitAbility(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCitadelClientMsg_ExecuteMapUnitAbility(const CCitadelClientMsg_ExecuteMapUnitAbility& from);
  CCitadelClientMsg_ExecuteMapUnitAbility(CCitadelClientMsg_ExecuteMapUnitAbility&& from) noexcept
    : CCitadelClientMsg_ExecuteMapUnitAbility() {
    *this = ::std::move(from);
  }

  inline CCitadelClientMsg_ExecuteMapUnitAbility& operator=(const CCitadelClientMsg_ExecuteMapUnitAbility& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCitadelClientMsg_ExecuteMapUnitAbility& operator=(CCitadelClientMsg_ExecuteMapUnitAbility&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCitadelClientMsg_ExecuteMapUnitAbility& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCitadelClientMsg_ExecuteMapUnitAbility* internal_default_instance() {
    return reinterpret_cast<const CCitadelClientMsg_ExecuteMapUnitAbility*>(
               &_CCitadelClientMsg_ExecuteMapUnitAbility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CCitadelClientMsg_ExecuteMapUnitAbility& a, CCitadelClientMsg_ExecuteMapUnitAbility& b) {
    a.Swap(&b);
  }
  inline void Swap(CCitadelClientMsg_ExecuteMapUnitAbility* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCitadelClientMsg_ExecuteMapUnitAbility* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCitadelClientMsg_ExecuteMapUnitAbility* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCitadelClientMsg_ExecuteMapUnitAbility>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCitadelClientMsg_ExecuteMapUnitAbility& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CCitadelClientMsg_ExecuteMapUnitAbility& from) {
    CCitadelClientMsg_ExecuteMapUnitAbility::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCitadelClientMsg_ExecuteMapUnitAbility* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCitadelClientMsg_ExecuteMapUnitAbility";
  }
  protected:
  explicit CCitadelClientMsg_ExecuteMapUnitAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbilityEntityIndexFieldNumber = 1,
    kTargetEntityIndexFieldNumber = 2,
  };
  // optional int32 ability_entity_index = 1;
  bool has_ability_entity_index() const;
  private:
  bool _internal_has_ability_entity_index() const;
  public:
  void clear_ability_entity_index();
  int32_t ability_entity_index() const;
  void set_ability_entity_index(int32_t value);
  private:
  int32_t _internal_ability_entity_index() const;
  void _internal_set_ability_entity_index(int32_t value);
  public:

  // optional int32 target_entity_index = 2;
  bool has_target_entity_index() const;
  private:
  bool _internal_has_target_entity_index() const;
  public:
  void clear_target_entity_index();
  int32_t target_entity_index() const;
  void set_target_entity_index(int32_t value);
  private:
  int32_t _internal_target_entity_index() const;
  void _internal_set_target_entity_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCitadelClientMsg_ExecuteMapUnitAbility)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t ability_entity_index_;
    int32_t target_entity_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_citadel_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CCitadelClientMsg_CheaterVote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCitadelClientMsg_CheaterVote) */ {
 public:
  inline CCitadelClientMsg_CheaterVote() : CCitadelClientMsg_CheaterVote(nullptr) {}
  ~CCitadelClientMsg_CheaterVote() override;
  explicit PROTOBUF_CONSTEXPR CCitadelClientMsg_CheaterVote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCitadelClientMsg_CheaterVote(const CCitadelClientMsg_CheaterVote& from);
  CCitadelClientMsg_CheaterVote(CCitadelClientMsg_CheaterVote&& from) noexcept
    : CCitadelClientMsg_CheaterVote() {
    *this = ::std::move(from);
  }

  inline CCitadelClientMsg_CheaterVote& operator=(const CCitadelClientMsg_CheaterVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCitadelClientMsg_CheaterVote& operator=(CCitadelClientMsg_CheaterVote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCitadelClientMsg_CheaterVote& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCitadelClientMsg_CheaterVote* internal_default_instance() {
    return reinterpret_cast<const CCitadelClientMsg_CheaterVote*>(
               &_CCitadelClientMsg_CheaterVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CCitadelClientMsg_CheaterVote& a, CCitadelClientMsg_CheaterVote& b) {
    a.Swap(&b);
  }
  inline void Swap(CCitadelClientMsg_CheaterVote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCitadelClientMsg_CheaterVote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCitadelClientMsg_CheaterVote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCitadelClientMsg_CheaterVote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCitadelClientMsg_CheaterVote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CCitadelClientMsg_CheaterVote& from) {
    CCitadelClientMsg_CheaterVote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCitadelClientMsg_CheaterVote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCitadelClientMsg_CheaterVote";
  }
  protected:
  explicit CCitadelClientMsg_CheaterVote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndGameImmediatelyFieldNumber = 1,
  };
  // optional bool end_game_immediately = 1;
  bool has_end_game_immediately() const;
  private:
  bool _internal_has_end_game_immediately() const;
  public:
  void clear_end_game_immediately();
  bool end_game_immediately() const;
  void set_end_game_immediately(bool value);
  private:
  bool _internal_end_game_immediately() const;
  void _internal_set_end_game_immediately(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CCitadelClientMsg_CheaterVote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool end_game_immediately_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_citadel_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CCitadelClientMsg_MutePlayers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCitadelClientMsg_MutePlayers) */ {
 public:
  inline CCitadelClientMsg_MutePlayers() : CCitadelClientMsg_MutePlayers(nullptr) {}
  ~CCitadelClientMsg_MutePlayers() override;
  explicit PROTOBUF_CONSTEXPR CCitadelClientMsg_MutePlayers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCitadelClientMsg_MutePlayers(const CCitadelClientMsg_MutePlayers& from);
  CCitadelClientMsg_MutePlayers(CCitadelClientMsg_MutePlayers&& from) noexcept
    : CCitadelClientMsg_MutePlayers() {
    *this = ::std::move(from);
  }

  inline CCitadelClientMsg_MutePlayers& operator=(const CCitadelClientMsg_MutePlayers& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCitadelClientMsg_MutePlayers& operator=(CCitadelClientMsg_MutePlayers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCitadelClientMsg_MutePlayers& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCitadelClientMsg_MutePlayers* internal_default_instance() {
    return reinterpret_cast<const CCitadelClientMsg_MutePlayers*>(
               &_CCitadelClientMsg_MutePlayers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CCitadelClientMsg_MutePlayers& a, CCitadelClientMsg_MutePlayers& b) {
    a.Swap(&b);
  }
  inline void Swap(CCitadelClientMsg_MutePlayers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCitadelClientMsg_MutePlayers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCitadelClientMsg_MutePlayers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCitadelClientMsg_MutePlayers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCitadelClientMsg_MutePlayers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CCitadelClientMsg_MutePlayers& from) {
    CCitadelClientMsg_MutePlayers::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCitadelClientMsg_MutePlayers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCitadelClientMsg_MutePlayers";
  }
  protected:
  explicit CCitadelClientMsg_MutePlayers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerSlotsFieldNumber = 1,
    kUnmuteFieldNumber = 2,
  };
  // repeated int32 player_slots = 1;
  int player_slots_size() const;
  private:
  int _internal_player_slots_size() const;
  public:
  void clear_player_slots();
  private:
  int32_t _internal_player_slots(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_player_slots() const;
  void _internal_add_player_slots(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_player_slots();
  public:
  int32_t player_slots(int index) const;
  void set_player_slots(int index, int32_t value);
  void add_player_slots(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      player_slots() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_player_slots();

  // optional bool unmute = 2;
  bool has_unmute() const;
  private:
  bool _internal_has_unmute() const;
  public:
  void clear_unmute();
  bool unmute() const;
  void set_unmute(bool value);
  private:
  bool _internal_unmute() const;
  void _internal_set_unmute(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CCitadelClientMsg_MutePlayers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > player_slots_;
    bool unmute_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_citadel_5fclientmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CCitadelClientMsg_Pause

// -------------------------------------------------------------------

// CCitadelClientMsg_MapPing

// optional .CMsgVector ping_location = 1;
inline bool CCitadelClientMsg_MapPing::_internal_has_ping_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ping_location_ != nullptr);
  return value;
}
inline bool CCitadelClientMsg_MapPing::has_ping_location() const {
  return _internal_has_ping_location();
}
inline const ::CMsgVector& CCitadelClientMsg_MapPing::_internal_ping_location() const {
  const ::CMsgVector* p = _impl_.ping_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVector&>(
      ::_CMsgVector_default_instance_);
}
inline const ::CMsgVector& CCitadelClientMsg_MapPing::ping_location() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_MapPing.ping_location)
  return _internal_ping_location();
}
inline void CCitadelClientMsg_MapPing::unsafe_arena_set_allocated_ping_location(
    ::CMsgVector* ping_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ping_location_);
  }
  _impl_.ping_location_ = ping_location;
  if (ping_location) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CCitadelClientMsg_MapPing.ping_location)
}
inline ::CMsgVector* CCitadelClientMsg_MapPing::release_ping_location() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgVector* temp = _impl_.ping_location_;
  _impl_.ping_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgVector* CCitadelClientMsg_MapPing::unsafe_arena_release_ping_location() {
  // @@protoc_insertion_point(field_release:CCitadelClientMsg_MapPing.ping_location)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgVector* temp = _impl_.ping_location_;
  _impl_.ping_location_ = nullptr;
  return temp;
}
inline ::CMsgVector* CCitadelClientMsg_MapPing::_internal_mutable_ping_location() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ping_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVector>(GetArenaForAllocation());
    _impl_.ping_location_ = p;
  }
  return _impl_.ping_location_;
}
inline ::CMsgVector* CCitadelClientMsg_MapPing::mutable_ping_location() {
  ::CMsgVector* _msg = _internal_mutable_ping_location();
  // @@protoc_insertion_point(field_mutable:CCitadelClientMsg_MapPing.ping_location)
  return _msg;
}
inline void CCitadelClientMsg_MapPing::set_allocated_ping_location(::CMsgVector* ping_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ping_location_);
  }
  if (ping_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ping_location));
    if (message_arena != submessage_arena) {
      ping_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping_location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ping_location_ = ping_location;
  // @@protoc_insertion_point(field_set_allocated:CCitadelClientMsg_MapPing.ping_location)
}

// optional int32 event_type = 2;
inline bool CCitadelClientMsg_MapPing::_internal_has_event_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCitadelClientMsg_MapPing::has_event_type() const {
  return _internal_has_event_type();
}
inline void CCitadelClientMsg_MapPing::clear_event_type() {
  _impl_.event_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CCitadelClientMsg_MapPing::_internal_event_type() const {
  return _impl_.event_type_;
}
inline int32_t CCitadelClientMsg_MapPing::event_type() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_MapPing.event_type)
  return _internal_event_type();
}
inline void CCitadelClientMsg_MapPing::_internal_set_event_type(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.event_type_ = value;
}
inline void CCitadelClientMsg_MapPing::set_event_type(int32_t value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_MapPing.event_type)
}

// optional int32 entity_index = 3 [default = -1];
inline bool CCitadelClientMsg_MapPing::_internal_has_entity_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CCitadelClientMsg_MapPing::has_entity_index() const {
  return _internal_has_entity_index();
}
inline void CCitadelClientMsg_MapPing::clear_entity_index() {
  _impl_.entity_index_ = -1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t CCitadelClientMsg_MapPing::_internal_entity_index() const {
  return _impl_.entity_index_;
}
inline int32_t CCitadelClientMsg_MapPing::entity_index() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_MapPing.entity_index)
  return _internal_entity_index();
}
inline void CCitadelClientMsg_MapPing::_internal_set_entity_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.entity_index_ = value;
}
inline void CCitadelClientMsg_MapPing::set_entity_index(int32_t value) {
  _internal_set_entity_index(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_MapPing.entity_index)
}

// optional bool is_aggressive_ping = 4;
inline bool CCitadelClientMsg_MapPing::_internal_has_is_aggressive_ping() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCitadelClientMsg_MapPing::has_is_aggressive_ping() const {
  return _internal_has_is_aggressive_ping();
}
inline void CCitadelClientMsg_MapPing::clear_is_aggressive_ping() {
  _impl_.is_aggressive_ping_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CCitadelClientMsg_MapPing::_internal_is_aggressive_ping() const {
  return _impl_.is_aggressive_ping_;
}
inline bool CCitadelClientMsg_MapPing::is_aggressive_ping() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_MapPing.is_aggressive_ping)
  return _internal_is_aggressive_ping();
}
inline void CCitadelClientMsg_MapPing::_internal_set_is_aggressive_ping(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.is_aggressive_ping_ = value;
}
inline void CCitadelClientMsg_MapPing::set_is_aggressive_ping(bool value) {
  _internal_set_is_aggressive_ping(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_MapPing.is_aggressive_ping)
}

// optional bool is_minimap_ping = 5;
inline bool CCitadelClientMsg_MapPing::_internal_has_is_minimap_ping() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCitadelClientMsg_MapPing::has_is_minimap_ping() const {
  return _internal_has_is_minimap_ping();
}
inline void CCitadelClientMsg_MapPing::clear_is_minimap_ping() {
  _impl_.is_minimap_ping_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CCitadelClientMsg_MapPing::_internal_is_minimap_ping() const {
  return _impl_.is_minimap_ping_;
}
inline bool CCitadelClientMsg_MapPing::is_minimap_ping() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_MapPing.is_minimap_ping)
  return _internal_is_minimap_ping();
}
inline void CCitadelClientMsg_MapPing::_internal_set_is_minimap_ping(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.is_minimap_ping_ = value;
}
inline void CCitadelClientMsg_MapPing::set_is_minimap_ping(bool value) {
  _internal_set_is_minimap_ping(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_MapPing.is_minimap_ping)
}

// optional bool is_blind_ping = 6;
inline bool CCitadelClientMsg_MapPing::_internal_has_is_blind_ping() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCitadelClientMsg_MapPing::has_is_blind_ping() const {
  return _internal_has_is_blind_ping();
}
inline void CCitadelClientMsg_MapPing::clear_is_blind_ping() {
  _impl_.is_blind_ping_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CCitadelClientMsg_MapPing::_internal_is_blind_ping() const {
  return _impl_.is_blind_ping_;
}
inline bool CCitadelClientMsg_MapPing::is_blind_ping() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_MapPing.is_blind_ping)
  return _internal_is_blind_ping();
}
inline void CCitadelClientMsg_MapPing::_internal_set_is_blind_ping(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.is_blind_ping_ = value;
}
inline void CCitadelClientMsg_MapPing::set_is_blind_ping(bool value) {
  _internal_set_is_blind_ping(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_MapPing.is_blind_ping)
}

// -------------------------------------------------------------------

// CCitadelClientMsg_PingWheel

// optional uint32 ping_wheel_option_id = 1;
inline bool CCitadelClientMsg_PingWheel::_internal_has_ping_wheel_option_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCitadelClientMsg_PingWheel::has_ping_wheel_option_id() const {
  return _internal_has_ping_wheel_option_id();
}
inline void CCitadelClientMsg_PingWheel::clear_ping_wheel_option_id() {
  _impl_.ping_wheel_option_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CCitadelClientMsg_PingWheel::_internal_ping_wheel_option_id() const {
  return _impl_.ping_wheel_option_id_;
}
inline uint32_t CCitadelClientMsg_PingWheel::ping_wheel_option_id() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PingWheel.ping_wheel_option_id)
  return _internal_ping_wheel_option_id();
}
inline void CCitadelClientMsg_PingWheel::_internal_set_ping_wheel_option_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ping_wheel_option_id_ = value;
}
inline void CCitadelClientMsg_PingWheel::set_ping_wheel_option_id(uint32_t value) {
  _internal_set_ping_wheel_option_id(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_PingWheel.ping_wheel_option_id)
}

// optional uint32 subnav_message_id = 2;
inline bool CCitadelClientMsg_PingWheel::_internal_has_subnav_message_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCitadelClientMsg_PingWheel::has_subnav_message_id() const {
  return _internal_has_subnav_message_id();
}
inline void CCitadelClientMsg_PingWheel::clear_subnav_message_id() {
  _impl_.subnav_message_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CCitadelClientMsg_PingWheel::_internal_subnav_message_id() const {
  return _impl_.subnav_message_id_;
}
inline uint32_t CCitadelClientMsg_PingWheel::subnav_message_id() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PingWheel.subnav_message_id)
  return _internal_subnav_message_id();
}
inline void CCitadelClientMsg_PingWheel::_internal_set_subnav_message_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.subnav_message_id_ = value;
}
inline void CCitadelClientMsg_PingWheel::set_subnav_message_id(uint32_t value) {
  _internal_set_subnav_message_id(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_PingWheel.subnav_message_id)
}

// optional .CMsgVector ping_location = 3;
inline bool CCitadelClientMsg_PingWheel::_internal_has_ping_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ping_location_ != nullptr);
  return value;
}
inline bool CCitadelClientMsg_PingWheel::has_ping_location() const {
  return _internal_has_ping_location();
}
inline const ::CMsgVector& CCitadelClientMsg_PingWheel::_internal_ping_location() const {
  const ::CMsgVector* p = _impl_.ping_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVector&>(
      ::_CMsgVector_default_instance_);
}
inline const ::CMsgVector& CCitadelClientMsg_PingWheel::ping_location() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PingWheel.ping_location)
  return _internal_ping_location();
}
inline void CCitadelClientMsg_PingWheel::unsafe_arena_set_allocated_ping_location(
    ::CMsgVector* ping_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ping_location_);
  }
  _impl_.ping_location_ = ping_location;
  if (ping_location) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CCitadelClientMsg_PingWheel.ping_location)
}
inline ::CMsgVector* CCitadelClientMsg_PingWheel::release_ping_location() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgVector* temp = _impl_.ping_location_;
  _impl_.ping_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgVector* CCitadelClientMsg_PingWheel::unsafe_arena_release_ping_location() {
  // @@protoc_insertion_point(field_release:CCitadelClientMsg_PingWheel.ping_location)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgVector* temp = _impl_.ping_location_;
  _impl_.ping_location_ = nullptr;
  return temp;
}
inline ::CMsgVector* CCitadelClientMsg_PingWheel::_internal_mutable_ping_location() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ping_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVector>(GetArenaForAllocation());
    _impl_.ping_location_ = p;
  }
  return _impl_.ping_location_;
}
inline ::CMsgVector* CCitadelClientMsg_PingWheel::mutable_ping_location() {
  ::CMsgVector* _msg = _internal_mutable_ping_location();
  // @@protoc_insertion_point(field_mutable:CCitadelClientMsg_PingWheel.ping_location)
  return _msg;
}
inline void CCitadelClientMsg_PingWheel::set_allocated_ping_location(::CMsgVector* ping_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ping_location_);
  }
  if (ping_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ping_location));
    if (message_arena != submessage_arena) {
      ping_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping_location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ping_location_ = ping_location;
  // @@protoc_insertion_point(field_set_allocated:CCitadelClientMsg_PingWheel.ping_location)
}

// optional int32 entity_index = 4 [default = -1];
inline bool CCitadelClientMsg_PingWheel::_internal_has_entity_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCitadelClientMsg_PingWheel::has_entity_index() const {
  return _internal_has_entity_index();
}
inline void CCitadelClientMsg_PingWheel::clear_entity_index() {
  _impl_.entity_index_ = -1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CCitadelClientMsg_PingWheel::_internal_entity_index() const {
  return _impl_.entity_index_;
}
inline int32_t CCitadelClientMsg_PingWheel::entity_index() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PingWheel.entity_index)
  return _internal_entity_index();
}
inline void CCitadelClientMsg_PingWheel::_internal_set_entity_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.entity_index_ = value;
}
inline void CCitadelClientMsg_PingWheel::set_entity_index(int32_t value) {
  _internal_set_entity_index(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_PingWheel.entity_index)
}

// -------------------------------------------------------------------

// CCitadelClientMsg_AbilityPing

// optional int32 entity_index = 1 [default = -1];
inline bool CCitadelClientMsg_AbilityPing::_internal_has_entity_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCitadelClientMsg_AbilityPing::has_entity_index() const {
  return _internal_has_entity_index();
}
inline void CCitadelClientMsg_AbilityPing::clear_entity_index() {
  _impl_.entity_index_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CCitadelClientMsg_AbilityPing::_internal_entity_index() const {
  return _impl_.entity_index_;
}
inline int32_t CCitadelClientMsg_AbilityPing::entity_index() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_AbilityPing.entity_index)
  return _internal_entity_index();
}
inline void CCitadelClientMsg_AbilityPing::_internal_set_entity_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.entity_index_ = value;
}
inline void CCitadelClientMsg_AbilityPing::set_entity_index(int32_t value) {
  _internal_set_entity_index(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_AbilityPing.entity_index)
}

// optional uint32 pinged_ability_id = 2;
inline bool CCitadelClientMsg_AbilityPing::_internal_has_pinged_ability_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCitadelClientMsg_AbilityPing::has_pinged_ability_id() const {
  return _internal_has_pinged_ability_id();
}
inline void CCitadelClientMsg_AbilityPing::clear_pinged_ability_id() {
  _impl_.pinged_ability_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CCitadelClientMsg_AbilityPing::_internal_pinged_ability_id() const {
  return _impl_.pinged_ability_id_;
}
inline uint32_t CCitadelClientMsg_AbilityPing::pinged_ability_id() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_AbilityPing.pinged_ability_id)
  return _internal_pinged_ability_id();
}
inline void CCitadelClientMsg_AbilityPing::_internal_set_pinged_ability_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pinged_ability_id_ = value;
}
inline void CCitadelClientMsg_AbilityPing::set_pinged_ability_id(uint32_t value) {
  _internal_set_pinged_ability_id(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_AbilityPing.pinged_ability_id)
}

// optional int32 pinged_player_slot = 3 [default = -1];
inline bool CCitadelClientMsg_AbilityPing::_internal_has_pinged_player_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCitadelClientMsg_AbilityPing::has_pinged_player_slot() const {
  return _internal_has_pinged_player_slot();
}
inline void CCitadelClientMsg_AbilityPing::clear_pinged_player_slot() {
  _impl_.pinged_player_slot_ = -1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CCitadelClientMsg_AbilityPing::_internal_pinged_player_slot() const {
  return _impl_.pinged_player_slot_;
}
inline int32_t CCitadelClientMsg_AbilityPing::pinged_player_slot() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_AbilityPing.pinged_player_slot)
  return _internal_pinged_player_slot();
}
inline void CCitadelClientMsg_AbilityPing::_internal_set_pinged_player_slot(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pinged_player_slot_ = value;
}
inline void CCitadelClientMsg_AbilityPing::set_pinged_player_slot(int32_t value) {
  _internal_set_pinged_player_slot(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_AbilityPing.pinged_player_slot)
}

// -------------------------------------------------------------------

// CCitadelClientMsg_MapLine

// optional .CMsgMapLine mapline = 1;
inline bool CCitadelClientMsg_MapLine::_internal_has_mapline() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mapline_ != nullptr);
  return value;
}
inline bool CCitadelClientMsg_MapLine::has_mapline() const {
  return _internal_has_mapline();
}
inline const ::CMsgMapLine& CCitadelClientMsg_MapLine::_internal_mapline() const {
  const ::CMsgMapLine* p = _impl_.mapline_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgMapLine&>(
      ::_CMsgMapLine_default_instance_);
}
inline const ::CMsgMapLine& CCitadelClientMsg_MapLine::mapline() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_MapLine.mapline)
  return _internal_mapline();
}
inline void CCitadelClientMsg_MapLine::unsafe_arena_set_allocated_mapline(
    ::CMsgMapLine* mapline) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mapline_);
  }
  _impl_.mapline_ = mapline;
  if (mapline) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CCitadelClientMsg_MapLine.mapline)
}
inline ::CMsgMapLine* CCitadelClientMsg_MapLine::release_mapline() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgMapLine* temp = _impl_.mapline_;
  _impl_.mapline_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgMapLine* CCitadelClientMsg_MapLine::unsafe_arena_release_mapline() {
  // @@protoc_insertion_point(field_release:CCitadelClientMsg_MapLine.mapline)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgMapLine* temp = _impl_.mapline_;
  _impl_.mapline_ = nullptr;
  return temp;
}
inline ::CMsgMapLine* CCitadelClientMsg_MapLine::_internal_mutable_mapline() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.mapline_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgMapLine>(GetArenaForAllocation());
    _impl_.mapline_ = p;
  }
  return _impl_.mapline_;
}
inline ::CMsgMapLine* CCitadelClientMsg_MapLine::mutable_mapline() {
  ::CMsgMapLine* _msg = _internal_mutable_mapline();
  // @@protoc_insertion_point(field_mutable:CCitadelClientMsg_MapLine.mapline)
  return _msg;
}
inline void CCitadelClientMsg_MapLine::set_allocated_mapline(::CMsgMapLine* mapline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mapline_);
  }
  if (mapline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mapline));
    if (message_arena != submessage_arena) {
      mapline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mapline, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.mapline_ = mapline;
  // @@protoc_insertion_point(field_set_allocated:CCitadelClientMsg_MapLine.mapline)
}

// -------------------------------------------------------------------

// CCitadelClientMsg_QuickResponse

// optional uint32 ping_wheel_message_id = 1;
inline bool CCitadelClientMsg_QuickResponse::_internal_has_ping_wheel_message_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCitadelClientMsg_QuickResponse::has_ping_wheel_message_id() const {
  return _internal_has_ping_wheel_message_id();
}
inline void CCitadelClientMsg_QuickResponse::clear_ping_wheel_message_id() {
  _impl_.ping_wheel_message_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CCitadelClientMsg_QuickResponse::_internal_ping_wheel_message_id() const {
  return _impl_.ping_wheel_message_id_;
}
inline uint32_t CCitadelClientMsg_QuickResponse::ping_wheel_message_id() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_QuickResponse.ping_wheel_message_id)
  return _internal_ping_wheel_message_id();
}
inline void CCitadelClientMsg_QuickResponse::_internal_set_ping_wheel_message_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ping_wheel_message_id_ = value;
}
inline void CCitadelClientMsg_QuickResponse::set_ping_wheel_message_id(uint32_t value) {
  _internal_set_ping_wheel_message_id(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_QuickResponse.ping_wheel_message_id)
}

// optional uint32 responding_to_ping_message_id = 2;
inline bool CCitadelClientMsg_QuickResponse::_internal_has_responding_to_ping_message_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCitadelClientMsg_QuickResponse::has_responding_to_ping_message_id() const {
  return _internal_has_responding_to_ping_message_id();
}
inline void CCitadelClientMsg_QuickResponse::clear_responding_to_ping_message_id() {
  _impl_.responding_to_ping_message_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CCitadelClientMsg_QuickResponse::_internal_responding_to_ping_message_id() const {
  return _impl_.responding_to_ping_message_id_;
}
inline uint32_t CCitadelClientMsg_QuickResponse::responding_to_ping_message_id() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_QuickResponse.responding_to_ping_message_id)
  return _internal_responding_to_ping_message_id();
}
inline void CCitadelClientMsg_QuickResponse::_internal_set_responding_to_ping_message_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.responding_to_ping_message_id_ = value;
}
inline void CCitadelClientMsg_QuickResponse::set_responding_to_ping_message_id(uint32_t value) {
  _internal_set_responding_to_ping_message_id(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_QuickResponse.responding_to_ping_message_id)
}

// optional int32 responding_to_player_slot = 3 [default = -1];
inline bool CCitadelClientMsg_QuickResponse::_internal_has_responding_to_player_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCitadelClientMsg_QuickResponse::has_responding_to_player_slot() const {
  return _internal_has_responding_to_player_slot();
}
inline void CCitadelClientMsg_QuickResponse::clear_responding_to_player_slot() {
  _impl_.responding_to_player_slot_ = -1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CCitadelClientMsg_QuickResponse::_internal_responding_to_player_slot() const {
  return _impl_.responding_to_player_slot_;
}
inline int32_t CCitadelClientMsg_QuickResponse::responding_to_player_slot() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_QuickResponse.responding_to_player_slot)
  return _internal_responding_to_player_slot();
}
inline void CCitadelClientMsg_QuickResponse::_internal_set_responding_to_player_slot(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.responding_to_player_slot_ = value;
}
inline void CCitadelClientMsg_QuickResponse::set_responding_to_player_slot(int32_t value) {
  _internal_set_responding_to_player_slot(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_QuickResponse.responding_to_player_slot)
}

// -------------------------------------------------------------------

// CCitadelClientMsg_PerformanceStats

// optional float current_game_time = 1;
inline bool CCitadelClientMsg_PerformanceStats::_internal_has_current_game_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCitadelClientMsg_PerformanceStats::has_current_game_time() const {
  return _internal_has_current_game_time();
}
inline void CCitadelClientMsg_PerformanceStats::clear_current_game_time() {
  _impl_.current_game_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float CCitadelClientMsg_PerformanceStats::_internal_current_game_time() const {
  return _impl_.current_game_time_;
}
inline float CCitadelClientMsg_PerformanceStats::current_game_time() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PerformanceStats.current_game_time)
  return _internal_current_game_time();
}
inline void CCitadelClientMsg_PerformanceStats::_internal_set_current_game_time(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.current_game_time_ = value;
}
inline void CCitadelClientMsg_PerformanceStats::set_current_game_time(float value) {
  _internal_set_current_game_time(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_PerformanceStats.current_game_time)
}

// optional float average_fps = 2;
inline bool CCitadelClientMsg_PerformanceStats::_internal_has_average_fps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCitadelClientMsg_PerformanceStats::has_average_fps() const {
  return _internal_has_average_fps();
}
inline void CCitadelClientMsg_PerformanceStats::clear_average_fps() {
  _impl_.average_fps_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float CCitadelClientMsg_PerformanceStats::_internal_average_fps() const {
  return _impl_.average_fps_;
}
inline float CCitadelClientMsg_PerformanceStats::average_fps() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PerformanceStats.average_fps)
  return _internal_average_fps();
}
inline void CCitadelClientMsg_PerformanceStats::_internal_set_average_fps(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.average_fps_ = value;
}
inline void CCitadelClientMsg_PerformanceStats::set_average_fps(float value) {
  _internal_set_average_fps(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_PerformanceStats.average_fps)
}

// optional float min_fps = 3;
inline bool CCitadelClientMsg_PerformanceStats::_internal_has_min_fps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCitadelClientMsg_PerformanceStats::has_min_fps() const {
  return _internal_has_min_fps();
}
inline void CCitadelClientMsg_PerformanceStats::clear_min_fps() {
  _impl_.min_fps_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CCitadelClientMsg_PerformanceStats::_internal_min_fps() const {
  return _impl_.min_fps_;
}
inline float CCitadelClientMsg_PerformanceStats::min_fps() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PerformanceStats.min_fps)
  return _internal_min_fps();
}
inline void CCitadelClientMsg_PerformanceStats::_internal_set_min_fps(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.min_fps_ = value;
}
inline void CCitadelClientMsg_PerformanceStats::set_min_fps(float value) {
  _internal_set_min_fps(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_PerformanceStats.min_fps)
}

// optional float max_fps = 4;
inline bool CCitadelClientMsg_PerformanceStats::_internal_has_max_fps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCitadelClientMsg_PerformanceStats::has_max_fps() const {
  return _internal_has_max_fps();
}
inline void CCitadelClientMsg_PerformanceStats::clear_max_fps() {
  _impl_.max_fps_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float CCitadelClientMsg_PerformanceStats::_internal_max_fps() const {
  return _impl_.max_fps_;
}
inline float CCitadelClientMsg_PerformanceStats::max_fps() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PerformanceStats.max_fps)
  return _internal_max_fps();
}
inline void CCitadelClientMsg_PerformanceStats::_internal_set_max_fps(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.max_fps_ = value;
}
inline void CCitadelClientMsg_PerformanceStats::set_max_fps(float value) {
  _internal_set_max_fps(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_PerformanceStats.max_fps)
}

// -------------------------------------------------------------------

// CCitadelClientMsg_ChatMsg

// optional string chat_text = 1;
inline bool CCitadelClientMsg_ChatMsg::_internal_has_chat_text() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCitadelClientMsg_ChatMsg::has_chat_text() const {
  return _internal_has_chat_text();
}
inline void CCitadelClientMsg_ChatMsg::clear_chat_text() {
  _impl_.chat_text_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCitadelClientMsg_ChatMsg::chat_text() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_ChatMsg.chat_text)
  return _internal_chat_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCitadelClientMsg_ChatMsg::set_chat_text(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.chat_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_ChatMsg.chat_text)
}
inline std::string* CCitadelClientMsg_ChatMsg::mutable_chat_text() {
  std::string* _s = _internal_mutable_chat_text();
  // @@protoc_insertion_point(field_mutable:CCitadelClientMsg_ChatMsg.chat_text)
  return _s;
}
inline const std::string& CCitadelClientMsg_ChatMsg::_internal_chat_text() const {
  return _impl_.chat_text_.Get();
}
inline void CCitadelClientMsg_ChatMsg::_internal_set_chat_text(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.chat_text_.Set(value, GetArenaForAllocation());
}
inline std::string* CCitadelClientMsg_ChatMsg::_internal_mutable_chat_text() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.chat_text_.Mutable(GetArenaForAllocation());
}
inline std::string* CCitadelClientMsg_ChatMsg::release_chat_text() {
  // @@protoc_insertion_point(field_release:CCitadelClientMsg_ChatMsg.chat_text)
  if (!_internal_has_chat_text()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.chat_text_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chat_text_.IsDefault()) {
    _impl_.chat_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCitadelClientMsg_ChatMsg::set_allocated_chat_text(std::string* chat_text) {
  if (chat_text != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.chat_text_.SetAllocated(chat_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chat_text_.IsDefault()) {
    _impl_.chat_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCitadelClientMsg_ChatMsg.chat_text)
}

// optional bool all_chat = 2;
inline bool CCitadelClientMsg_ChatMsg::_internal_has_all_chat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCitadelClientMsg_ChatMsg::has_all_chat() const {
  return _internal_has_all_chat();
}
inline void CCitadelClientMsg_ChatMsg::clear_all_chat() {
  _impl_.all_chat_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CCitadelClientMsg_ChatMsg::_internal_all_chat() const {
  return _impl_.all_chat_;
}
inline bool CCitadelClientMsg_ChatMsg::all_chat() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_ChatMsg.all_chat)
  return _internal_all_chat();
}
inline void CCitadelClientMsg_ChatMsg::_internal_set_all_chat(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.all_chat_ = value;
}
inline void CCitadelClientMsg_ChatMsg::set_all_chat(bool value) {
  _internal_set_all_chat(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_ChatMsg.all_chat)
}

// optional .CMsgLaneColor lane_color = 3 [default = k_ELaneColor_Invalid];
inline bool CCitadelClientMsg_ChatMsg::_internal_has_lane_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCitadelClientMsg_ChatMsg::has_lane_color() const {
  return _internal_has_lane_color();
}
inline void CCitadelClientMsg_ChatMsg::clear_lane_color() {
  _impl_.lane_color_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::CMsgLaneColor CCitadelClientMsg_ChatMsg::_internal_lane_color() const {
  return static_cast< ::CMsgLaneColor >(_impl_.lane_color_);
}
inline ::CMsgLaneColor CCitadelClientMsg_ChatMsg::lane_color() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_ChatMsg.lane_color)
  return _internal_lane_color();
}
inline void CCitadelClientMsg_ChatMsg::_internal_set_lane_color(::CMsgLaneColor value) {
  assert(::CMsgLaneColor_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lane_color_ = value;
}
inline void CCitadelClientMsg_ChatMsg::set_lane_color(::CMsgLaneColor value) {
  _internal_set_lane_color(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_ChatMsg.lane_color)
}

// -------------------------------------------------------------------

// CCitadelClientMsg_PerfReport

// optional float average_frame_time = 1;
inline bool CCitadelClientMsg_PerfReport::_internal_has_average_frame_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCitadelClientMsg_PerfReport::has_average_frame_time() const {
  return _internal_has_average_frame_time();
}
inline void CCitadelClientMsg_PerfReport::clear_average_frame_time() {
  _impl_.average_frame_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float CCitadelClientMsg_PerfReport::_internal_average_frame_time() const {
  return _impl_.average_frame_time_;
}
inline float CCitadelClientMsg_PerfReport::average_frame_time() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PerfReport.average_frame_time)
  return _internal_average_frame_time();
}
inline void CCitadelClientMsg_PerfReport::_internal_set_average_frame_time(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.average_frame_time_ = value;
}
inline void CCitadelClientMsg_PerfReport::set_average_frame_time(float value) {
  _internal_set_average_frame_time(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_PerfReport.average_frame_time)
}

// optional float max_frame_time = 2;
inline bool CCitadelClientMsg_PerfReport::_internal_has_max_frame_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCitadelClientMsg_PerfReport::has_max_frame_time() const {
  return _internal_has_max_frame_time();
}
inline void CCitadelClientMsg_PerfReport::clear_max_frame_time() {
  _impl_.max_frame_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float CCitadelClientMsg_PerfReport::_internal_max_frame_time() const {
  return _impl_.max_frame_time_;
}
inline float CCitadelClientMsg_PerfReport::max_frame_time() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PerfReport.max_frame_time)
  return _internal_max_frame_time();
}
inline void CCitadelClientMsg_PerfReport::_internal_set_max_frame_time(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.max_frame_time_ = value;
}
inline void CCitadelClientMsg_PerfReport::set_max_frame_time(float value) {
  _internal_set_max_frame_time(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_PerfReport.max_frame_time)
}

// optional float average_compute_time = 3;
inline bool CCitadelClientMsg_PerfReport::_internal_has_average_compute_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCitadelClientMsg_PerfReport::has_average_compute_time() const {
  return _internal_has_average_compute_time();
}
inline void CCitadelClientMsg_PerfReport::clear_average_compute_time() {
  _impl_.average_compute_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CCitadelClientMsg_PerfReport::_internal_average_compute_time() const {
  return _impl_.average_compute_time_;
}
inline float CCitadelClientMsg_PerfReport::average_compute_time() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PerfReport.average_compute_time)
  return _internal_average_compute_time();
}
inline void CCitadelClientMsg_PerfReport::_internal_set_average_compute_time(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.average_compute_time_ = value;
}
inline void CCitadelClientMsg_PerfReport::set_average_compute_time(float value) {
  _internal_set_average_compute_time(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_PerfReport.average_compute_time)
}

// optional float max_compute_time = 4;
inline bool CCitadelClientMsg_PerfReport::_internal_has_max_compute_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCitadelClientMsg_PerfReport::has_max_compute_time() const {
  return _internal_has_max_compute_time();
}
inline void CCitadelClientMsg_PerfReport::clear_max_compute_time() {
  _impl_.max_compute_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float CCitadelClientMsg_PerfReport::_internal_max_compute_time() const {
  return _impl_.max_compute_time_;
}
inline float CCitadelClientMsg_PerfReport::max_compute_time() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PerfReport.max_compute_time)
  return _internal_max_compute_time();
}
inline void CCitadelClientMsg_PerfReport::_internal_set_max_compute_time(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.max_compute_time_ = value;
}
inline void CCitadelClientMsg_PerfReport::set_max_compute_time(float value) {
  _internal_set_max_compute_time(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_PerfReport.max_compute_time)
}

// optional float average_client_tick_time = 5;
inline bool CCitadelClientMsg_PerfReport::_internal_has_average_client_tick_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCitadelClientMsg_PerfReport::has_average_client_tick_time() const {
  return _internal_has_average_client_tick_time();
}
inline void CCitadelClientMsg_PerfReport::clear_average_client_tick_time() {
  _impl_.average_client_tick_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float CCitadelClientMsg_PerfReport::_internal_average_client_tick_time() const {
  return _impl_.average_client_tick_time_;
}
inline float CCitadelClientMsg_PerfReport::average_client_tick_time() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PerfReport.average_client_tick_time)
  return _internal_average_client_tick_time();
}
inline void CCitadelClientMsg_PerfReport::_internal_set_average_client_tick_time(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.average_client_tick_time_ = value;
}
inline void CCitadelClientMsg_PerfReport::set_average_client_tick_time(float value) {
  _internal_set_average_client_tick_time(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_PerfReport.average_client_tick_time)
}

// optional float max_client_tick_time = 6;
inline bool CCitadelClientMsg_PerfReport::_internal_has_max_client_tick_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CCitadelClientMsg_PerfReport::has_max_client_tick_time() const {
  return _internal_has_max_client_tick_time();
}
inline void CCitadelClientMsg_PerfReport::clear_max_client_tick_time() {
  _impl_.max_client_tick_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float CCitadelClientMsg_PerfReport::_internal_max_client_tick_time() const {
  return _impl_.max_client_tick_time_;
}
inline float CCitadelClientMsg_PerfReport::max_client_tick_time() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PerfReport.max_client_tick_time)
  return _internal_max_client_tick_time();
}
inline void CCitadelClientMsg_PerfReport::_internal_set_max_client_tick_time(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.max_client_tick_time_ = value;
}
inline void CCitadelClientMsg_PerfReport::set_max_client_tick_time(float value) {
  _internal_set_max_client_tick_time(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_PerfReport.max_client_tick_time)
}

// optional float average_client_simulate_time = 7;
inline bool CCitadelClientMsg_PerfReport::_internal_has_average_client_simulate_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CCitadelClientMsg_PerfReport::has_average_client_simulate_time() const {
  return _internal_has_average_client_simulate_time();
}
inline void CCitadelClientMsg_PerfReport::clear_average_client_simulate_time() {
  _impl_.average_client_simulate_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float CCitadelClientMsg_PerfReport::_internal_average_client_simulate_time() const {
  return _impl_.average_client_simulate_time_;
}
inline float CCitadelClientMsg_PerfReport::average_client_simulate_time() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PerfReport.average_client_simulate_time)
  return _internal_average_client_simulate_time();
}
inline void CCitadelClientMsg_PerfReport::_internal_set_average_client_simulate_time(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.average_client_simulate_time_ = value;
}
inline void CCitadelClientMsg_PerfReport::set_average_client_simulate_time(float value) {
  _internal_set_average_client_simulate_time(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_PerfReport.average_client_simulate_time)
}

// optional float max_client_simulate_time = 8;
inline bool CCitadelClientMsg_PerfReport::_internal_has_max_client_simulate_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CCitadelClientMsg_PerfReport::has_max_client_simulate_time() const {
  return _internal_has_max_client_simulate_time();
}
inline void CCitadelClientMsg_PerfReport::clear_max_client_simulate_time() {
  _impl_.max_client_simulate_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float CCitadelClientMsg_PerfReport::_internal_max_client_simulate_time() const {
  return _impl_.max_client_simulate_time_;
}
inline float CCitadelClientMsg_PerfReport::max_client_simulate_time() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PerfReport.max_client_simulate_time)
  return _internal_max_client_simulate_time();
}
inline void CCitadelClientMsg_PerfReport::_internal_set_max_client_simulate_time(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.max_client_simulate_time_ = value;
}
inline void CCitadelClientMsg_PerfReport::set_max_client_simulate_time(float value) {
  _internal_set_max_client_simulate_time(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_PerfReport.max_client_simulate_time)
}

// optional float average_output_time = 9;
inline bool CCitadelClientMsg_PerfReport::_internal_has_average_output_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CCitadelClientMsg_PerfReport::has_average_output_time() const {
  return _internal_has_average_output_time();
}
inline void CCitadelClientMsg_PerfReport::clear_average_output_time() {
  _impl_.average_output_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float CCitadelClientMsg_PerfReport::_internal_average_output_time() const {
  return _impl_.average_output_time_;
}
inline float CCitadelClientMsg_PerfReport::average_output_time() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PerfReport.average_output_time)
  return _internal_average_output_time();
}
inline void CCitadelClientMsg_PerfReport::_internal_set_average_output_time(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.average_output_time_ = value;
}
inline void CCitadelClientMsg_PerfReport::set_average_output_time(float value) {
  _internal_set_average_output_time(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_PerfReport.average_output_time)
}

// optional float max_output_time = 10;
inline bool CCitadelClientMsg_PerfReport::_internal_has_max_output_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CCitadelClientMsg_PerfReport::has_max_output_time() const {
  return _internal_has_max_output_time();
}
inline void CCitadelClientMsg_PerfReport::clear_max_output_time() {
  _impl_.max_output_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float CCitadelClientMsg_PerfReport::_internal_max_output_time() const {
  return _impl_.max_output_time_;
}
inline float CCitadelClientMsg_PerfReport::max_output_time() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PerfReport.max_output_time)
  return _internal_max_output_time();
}
inline void CCitadelClientMsg_PerfReport::_internal_set_max_output_time(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.max_output_time_ = value;
}
inline void CCitadelClientMsg_PerfReport::set_max_output_time(float value) {
  _internal_set_max_output_time(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_PerfReport.max_output_time)
}

// optional float average_wait_for_rendering_to_complete_time = 11;
inline bool CCitadelClientMsg_PerfReport::_internal_has_average_wait_for_rendering_to_complete_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CCitadelClientMsg_PerfReport::has_average_wait_for_rendering_to_complete_time() const {
  return _internal_has_average_wait_for_rendering_to_complete_time();
}
inline void CCitadelClientMsg_PerfReport::clear_average_wait_for_rendering_to_complete_time() {
  _impl_.average_wait_for_rendering_to_complete_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float CCitadelClientMsg_PerfReport::_internal_average_wait_for_rendering_to_complete_time() const {
  return _impl_.average_wait_for_rendering_to_complete_time_;
}
inline float CCitadelClientMsg_PerfReport::average_wait_for_rendering_to_complete_time() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PerfReport.average_wait_for_rendering_to_complete_time)
  return _internal_average_wait_for_rendering_to_complete_time();
}
inline void CCitadelClientMsg_PerfReport::_internal_set_average_wait_for_rendering_to_complete_time(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.average_wait_for_rendering_to_complete_time_ = value;
}
inline void CCitadelClientMsg_PerfReport::set_average_wait_for_rendering_to_complete_time(float value) {
  _internal_set_average_wait_for_rendering_to_complete_time(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_PerfReport.average_wait_for_rendering_to_complete_time)
}

// optional float max_wait_for_rendering_to_complete_time = 12;
inline bool CCitadelClientMsg_PerfReport::_internal_has_max_wait_for_rendering_to_complete_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CCitadelClientMsg_PerfReport::has_max_wait_for_rendering_to_complete_time() const {
  return _internal_has_max_wait_for_rendering_to_complete_time();
}
inline void CCitadelClientMsg_PerfReport::clear_max_wait_for_rendering_to_complete_time() {
  _impl_.max_wait_for_rendering_to_complete_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float CCitadelClientMsg_PerfReport::_internal_max_wait_for_rendering_to_complete_time() const {
  return _impl_.max_wait_for_rendering_to_complete_time_;
}
inline float CCitadelClientMsg_PerfReport::max_wait_for_rendering_to_complete_time() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PerfReport.max_wait_for_rendering_to_complete_time)
  return _internal_max_wait_for_rendering_to_complete_time();
}
inline void CCitadelClientMsg_PerfReport::_internal_set_max_wait_for_rendering_to_complete_time(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.max_wait_for_rendering_to_complete_time_ = value;
}
inline void CCitadelClientMsg_PerfReport::set_max_wait_for_rendering_to_complete_time(float value) {
  _internal_set_max_wait_for_rendering_to_complete_time(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_PerfReport.max_wait_for_rendering_to_complete_time)
}

// optional float average_swap_time = 13;
inline bool CCitadelClientMsg_PerfReport::_internal_has_average_swap_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CCitadelClientMsg_PerfReport::has_average_swap_time() const {
  return _internal_has_average_swap_time();
}
inline void CCitadelClientMsg_PerfReport::clear_average_swap_time() {
  _impl_.average_swap_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float CCitadelClientMsg_PerfReport::_internal_average_swap_time() const {
  return _impl_.average_swap_time_;
}
inline float CCitadelClientMsg_PerfReport::average_swap_time() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PerfReport.average_swap_time)
  return _internal_average_swap_time();
}
inline void CCitadelClientMsg_PerfReport::_internal_set_average_swap_time(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.average_swap_time_ = value;
}
inline void CCitadelClientMsg_PerfReport::set_average_swap_time(float value) {
  _internal_set_average_swap_time(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_PerfReport.average_swap_time)
}

// optional float max_swap_time = 14;
inline bool CCitadelClientMsg_PerfReport::_internal_has_max_swap_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CCitadelClientMsg_PerfReport::has_max_swap_time() const {
  return _internal_has_max_swap_time();
}
inline void CCitadelClientMsg_PerfReport::clear_max_swap_time() {
  _impl_.max_swap_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float CCitadelClientMsg_PerfReport::_internal_max_swap_time() const {
  return _impl_.max_swap_time_;
}
inline float CCitadelClientMsg_PerfReport::max_swap_time() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PerfReport.max_swap_time)
  return _internal_max_swap_time();
}
inline void CCitadelClientMsg_PerfReport::_internal_set_max_swap_time(float value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.max_swap_time_ = value;
}
inline void CCitadelClientMsg_PerfReport::set_max_swap_time(float value) {
  _internal_set_max_swap_time(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_PerfReport.max_swap_time)
}

// optional float average_frame_update_time = 15;
inline bool CCitadelClientMsg_PerfReport::_internal_has_average_frame_update_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CCitadelClientMsg_PerfReport::has_average_frame_update_time() const {
  return _internal_has_average_frame_update_time();
}
inline void CCitadelClientMsg_PerfReport::clear_average_frame_update_time() {
  _impl_.average_frame_update_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float CCitadelClientMsg_PerfReport::_internal_average_frame_update_time() const {
  return _impl_.average_frame_update_time_;
}
inline float CCitadelClientMsg_PerfReport::average_frame_update_time() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PerfReport.average_frame_update_time)
  return _internal_average_frame_update_time();
}
inline void CCitadelClientMsg_PerfReport::_internal_set_average_frame_update_time(float value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.average_frame_update_time_ = value;
}
inline void CCitadelClientMsg_PerfReport::set_average_frame_update_time(float value) {
  _internal_set_average_frame_update_time(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_PerfReport.average_frame_update_time)
}

// optional float max_frame_update_time = 16;
inline bool CCitadelClientMsg_PerfReport::_internal_has_max_frame_update_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CCitadelClientMsg_PerfReport::has_max_frame_update_time() const {
  return _internal_has_max_frame_update_time();
}
inline void CCitadelClientMsg_PerfReport::clear_max_frame_update_time() {
  _impl_.max_frame_update_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline float CCitadelClientMsg_PerfReport::_internal_max_frame_update_time() const {
  return _impl_.max_frame_update_time_;
}
inline float CCitadelClientMsg_PerfReport::max_frame_update_time() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PerfReport.max_frame_update_time)
  return _internal_max_frame_update_time();
}
inline void CCitadelClientMsg_PerfReport::_internal_set_max_frame_update_time(float value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.max_frame_update_time_ = value;
}
inline void CCitadelClientMsg_PerfReport::set_max_frame_update_time(float value) {
  _internal_set_max_frame_update_time(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_PerfReport.max_frame_update_time)
}

// optional float average_idle_time = 17;
inline bool CCitadelClientMsg_PerfReport::_internal_has_average_idle_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CCitadelClientMsg_PerfReport::has_average_idle_time() const {
  return _internal_has_average_idle_time();
}
inline void CCitadelClientMsg_PerfReport::clear_average_idle_time() {
  _impl_.average_idle_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline float CCitadelClientMsg_PerfReport::_internal_average_idle_time() const {
  return _impl_.average_idle_time_;
}
inline float CCitadelClientMsg_PerfReport::average_idle_time() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PerfReport.average_idle_time)
  return _internal_average_idle_time();
}
inline void CCitadelClientMsg_PerfReport::_internal_set_average_idle_time(float value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.average_idle_time_ = value;
}
inline void CCitadelClientMsg_PerfReport::set_average_idle_time(float value) {
  _internal_set_average_idle_time(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_PerfReport.average_idle_time)
}

// optional float max_idle_time = 18;
inline bool CCitadelClientMsg_PerfReport::_internal_has_max_idle_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CCitadelClientMsg_PerfReport::has_max_idle_time() const {
  return _internal_has_max_idle_time();
}
inline void CCitadelClientMsg_PerfReport::clear_max_idle_time() {
  _impl_.max_idle_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline float CCitadelClientMsg_PerfReport::_internal_max_idle_time() const {
  return _impl_.max_idle_time_;
}
inline float CCitadelClientMsg_PerfReport::max_idle_time() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PerfReport.max_idle_time)
  return _internal_max_idle_time();
}
inline void CCitadelClientMsg_PerfReport::_internal_set_max_idle_time(float value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.max_idle_time_ = value;
}
inline void CCitadelClientMsg_PerfReport::set_max_idle_time(float value) {
  _internal_set_max_idle_time(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_PerfReport.max_idle_time)
}

// optional float average_input_processing_time = 19;
inline bool CCitadelClientMsg_PerfReport::_internal_has_average_input_processing_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CCitadelClientMsg_PerfReport::has_average_input_processing_time() const {
  return _internal_has_average_input_processing_time();
}
inline void CCitadelClientMsg_PerfReport::clear_average_input_processing_time() {
  _impl_.average_input_processing_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline float CCitadelClientMsg_PerfReport::_internal_average_input_processing_time() const {
  return _impl_.average_input_processing_time_;
}
inline float CCitadelClientMsg_PerfReport::average_input_processing_time() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PerfReport.average_input_processing_time)
  return _internal_average_input_processing_time();
}
inline void CCitadelClientMsg_PerfReport::_internal_set_average_input_processing_time(float value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.average_input_processing_time_ = value;
}
inline void CCitadelClientMsg_PerfReport::set_average_input_processing_time(float value) {
  _internal_set_average_input_processing_time(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_PerfReport.average_input_processing_time)
}

// optional float max_input_processing_time = 20;
inline bool CCitadelClientMsg_PerfReport::_internal_has_max_input_processing_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CCitadelClientMsg_PerfReport::has_max_input_processing_time() const {
  return _internal_has_max_input_processing_time();
}
inline void CCitadelClientMsg_PerfReport::clear_max_input_processing_time() {
  _impl_.max_input_processing_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline float CCitadelClientMsg_PerfReport::_internal_max_input_processing_time() const {
  return _impl_.max_input_processing_time_;
}
inline float CCitadelClientMsg_PerfReport::max_input_processing_time() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_PerfReport.max_input_processing_time)
  return _internal_max_input_processing_time();
}
inline void CCitadelClientMsg_PerfReport::_internal_set_max_input_processing_time(float value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.max_input_processing_time_ = value;
}
inline void CCitadelClientMsg_PerfReport::set_max_input_processing_time(float value) {
  _internal_set_max_input_processing_time(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_PerfReport.max_input_processing_time)
}

// -------------------------------------------------------------------

// CCitadelClientMsg_GetDamageStats

// optional uint32 lobby_player_slot = 1;
inline bool CCitadelClientMsg_GetDamageStats::_internal_has_lobby_player_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCitadelClientMsg_GetDamageStats::has_lobby_player_slot() const {
  return _internal_has_lobby_player_slot();
}
inline void CCitadelClientMsg_GetDamageStats::clear_lobby_player_slot() {
  _impl_.lobby_player_slot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CCitadelClientMsg_GetDamageStats::_internal_lobby_player_slot() const {
  return _impl_.lobby_player_slot_;
}
inline uint32_t CCitadelClientMsg_GetDamageStats::lobby_player_slot() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_GetDamageStats.lobby_player_slot)
  return _internal_lobby_player_slot();
}
inline void CCitadelClientMsg_GetDamageStats::_internal_set_lobby_player_slot(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.lobby_player_slot_ = value;
}
inline void CCitadelClientMsg_GetDamageStats::set_lobby_player_slot(uint32_t value) {
  _internal_set_lobby_player_slot(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_GetDamageStats.lobby_player_slot)
}

// optional string ability_name = 2;
inline bool CCitadelClientMsg_GetDamageStats::_internal_has_ability_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCitadelClientMsg_GetDamageStats::has_ability_name() const {
  return _internal_has_ability_name();
}
inline void CCitadelClientMsg_GetDamageStats::clear_ability_name() {
  _impl_.ability_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCitadelClientMsg_GetDamageStats::ability_name() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_GetDamageStats.ability_name)
  return _internal_ability_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCitadelClientMsg_GetDamageStats::set_ability_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.ability_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_GetDamageStats.ability_name)
}
inline std::string* CCitadelClientMsg_GetDamageStats::mutable_ability_name() {
  std::string* _s = _internal_mutable_ability_name();
  // @@protoc_insertion_point(field_mutable:CCitadelClientMsg_GetDamageStats.ability_name)
  return _s;
}
inline const std::string& CCitadelClientMsg_GetDamageStats::_internal_ability_name() const {
  return _impl_.ability_name_.Get();
}
inline void CCitadelClientMsg_GetDamageStats::_internal_set_ability_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ability_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CCitadelClientMsg_GetDamageStats::_internal_mutable_ability_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.ability_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CCitadelClientMsg_GetDamageStats::release_ability_name() {
  // @@protoc_insertion_point(field_release:CCitadelClientMsg_GetDamageStats.ability_name)
  if (!_internal_has_ability_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.ability_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ability_name_.IsDefault()) {
    _impl_.ability_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCitadelClientMsg_GetDamageStats::set_allocated_ability_name(std::string* ability_name) {
  if (ability_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ability_name_.SetAllocated(ability_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ability_name_.IsDefault()) {
    _impl_.ability_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCitadelClientMsg_GetDamageStats.ability_name)
}

// -------------------------------------------------------------------

// CCitadelClientCachedPlayerStats_Stat

// optional string stat_name = 1;
inline bool CCitadelClientCachedPlayerStats_Stat::_internal_has_stat_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCitadelClientCachedPlayerStats_Stat::has_stat_name() const {
  return _internal_has_stat_name();
}
inline void CCitadelClientCachedPlayerStats_Stat::clear_stat_name() {
  _impl_.stat_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCitadelClientCachedPlayerStats_Stat::stat_name() const {
  // @@protoc_insertion_point(field_get:CCitadelClientCachedPlayerStats.Stat.stat_name)
  return _internal_stat_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCitadelClientCachedPlayerStats_Stat::set_stat_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.stat_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCitadelClientCachedPlayerStats.Stat.stat_name)
}
inline std::string* CCitadelClientCachedPlayerStats_Stat::mutable_stat_name() {
  std::string* _s = _internal_mutable_stat_name();
  // @@protoc_insertion_point(field_mutable:CCitadelClientCachedPlayerStats.Stat.stat_name)
  return _s;
}
inline const std::string& CCitadelClientCachedPlayerStats_Stat::_internal_stat_name() const {
  return _impl_.stat_name_.Get();
}
inline void CCitadelClientCachedPlayerStats_Stat::_internal_set_stat_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stat_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CCitadelClientCachedPlayerStats_Stat::_internal_mutable_stat_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.stat_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CCitadelClientCachedPlayerStats_Stat::release_stat_name() {
  // @@protoc_insertion_point(field_release:CCitadelClientCachedPlayerStats.Stat.stat_name)
  if (!_internal_has_stat_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.stat_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stat_name_.IsDefault()) {
    _impl_.stat_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCitadelClientCachedPlayerStats_Stat::set_allocated_stat_name(std::string* stat_name) {
  if (stat_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.stat_name_.SetAllocated(stat_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stat_name_.IsDefault()) {
    _impl_.stat_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCitadelClientCachedPlayerStats.Stat.stat_name)
}

// optional uint64 all_time_total = 2;
inline bool CCitadelClientCachedPlayerStats_Stat::_internal_has_all_time_total() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCitadelClientCachedPlayerStats_Stat::has_all_time_total() const {
  return _internal_has_all_time_total();
}
inline void CCitadelClientCachedPlayerStats_Stat::clear_all_time_total() {
  _impl_.all_time_total_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CCitadelClientCachedPlayerStats_Stat::_internal_all_time_total() const {
  return _impl_.all_time_total_;
}
inline uint64_t CCitadelClientCachedPlayerStats_Stat::all_time_total() const {
  // @@protoc_insertion_point(field_get:CCitadelClientCachedPlayerStats.Stat.all_time_total)
  return _internal_all_time_total();
}
inline void CCitadelClientCachedPlayerStats_Stat::_internal_set_all_time_total(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.all_time_total_ = value;
}
inline void CCitadelClientCachedPlayerStats_Stat::set_all_time_total(uint64_t value) {
  _internal_set_all_time_total(value);
  // @@protoc_insertion_point(field_set:CCitadelClientCachedPlayerStats.Stat.all_time_total)
}

// optional uint32 all_time_match_max = 3;
inline bool CCitadelClientCachedPlayerStats_Stat::_internal_has_all_time_match_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCitadelClientCachedPlayerStats_Stat::has_all_time_match_max() const {
  return _internal_has_all_time_match_max();
}
inline void CCitadelClientCachedPlayerStats_Stat::clear_all_time_match_max() {
  _impl_.all_time_match_max_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CCitadelClientCachedPlayerStats_Stat::_internal_all_time_match_max() const {
  return _impl_.all_time_match_max_;
}
inline uint32_t CCitadelClientCachedPlayerStats_Stat::all_time_match_max() const {
  // @@protoc_insertion_point(field_get:CCitadelClientCachedPlayerStats.Stat.all_time_match_max)
  return _internal_all_time_match_max();
}
inline void CCitadelClientCachedPlayerStats_Stat::_internal_set_all_time_match_max(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.all_time_match_max_ = value;
}
inline void CCitadelClientCachedPlayerStats_Stat::set_all_time_match_max(uint32_t value) {
  _internal_set_all_time_match_max(value);
  // @@protoc_insertion_point(field_set:CCitadelClientCachedPlayerStats.Stat.all_time_match_max)
}

// optional uint32 all_time_life_max = 4;
inline bool CCitadelClientCachedPlayerStats_Stat::_internal_has_all_time_life_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCitadelClientCachedPlayerStats_Stat::has_all_time_life_max() const {
  return _internal_has_all_time_life_max();
}
inline void CCitadelClientCachedPlayerStats_Stat::clear_all_time_life_max() {
  _impl_.all_time_life_max_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CCitadelClientCachedPlayerStats_Stat::_internal_all_time_life_max() const {
  return _impl_.all_time_life_max_;
}
inline uint32_t CCitadelClientCachedPlayerStats_Stat::all_time_life_max() const {
  // @@protoc_insertion_point(field_get:CCitadelClientCachedPlayerStats.Stat.all_time_life_max)
  return _internal_all_time_life_max();
}
inline void CCitadelClientCachedPlayerStats_Stat::_internal_set_all_time_life_max(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.all_time_life_max_ = value;
}
inline void CCitadelClientCachedPlayerStats_Stat::set_all_time_life_max(uint32_t value) {
  _internal_set_all_time_life_max(value);
  // @@protoc_insertion_point(field_set:CCitadelClientCachedPlayerStats.Stat.all_time_life_max)
}

// -------------------------------------------------------------------

// CCitadelClientCachedPlayerStats

// optional uint32 version = 1;
inline bool CCitadelClientCachedPlayerStats::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCitadelClientCachedPlayerStats::has_version() const {
  return _internal_has_version();
}
inline void CCitadelClientCachedPlayerStats::clear_version() {
  _impl_.version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CCitadelClientCachedPlayerStats::_internal_version() const {
  return _impl_.version_;
}
inline uint32_t CCitadelClientCachedPlayerStats::version() const {
  // @@protoc_insertion_point(field_get:CCitadelClientCachedPlayerStats.version)
  return _internal_version();
}
inline void CCitadelClientCachedPlayerStats::_internal_set_version(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.version_ = value;
}
inline void CCitadelClientCachedPlayerStats::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CCitadelClientCachedPlayerStats.version)
}

// repeated .CCitadelClientCachedPlayerStats.Stat stats = 2;
inline int CCitadelClientCachedPlayerStats::_internal_stats_size() const {
  return _impl_.stats_.size();
}
inline int CCitadelClientCachedPlayerStats::stats_size() const {
  return _internal_stats_size();
}
inline void CCitadelClientCachedPlayerStats::clear_stats() {
  _impl_.stats_.Clear();
}
inline ::CCitadelClientCachedPlayerStats_Stat* CCitadelClientCachedPlayerStats::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CCitadelClientCachedPlayerStats.stats)
  return _impl_.stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCitadelClientCachedPlayerStats_Stat >*
CCitadelClientCachedPlayerStats::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:CCitadelClientCachedPlayerStats.stats)
  return &_impl_.stats_;
}
inline const ::CCitadelClientCachedPlayerStats_Stat& CCitadelClientCachedPlayerStats::_internal_stats(int index) const {
  return _impl_.stats_.Get(index);
}
inline const ::CCitadelClientCachedPlayerStats_Stat& CCitadelClientCachedPlayerStats::stats(int index) const {
  // @@protoc_insertion_point(field_get:CCitadelClientCachedPlayerStats.stats)
  return _internal_stats(index);
}
inline ::CCitadelClientCachedPlayerStats_Stat* CCitadelClientCachedPlayerStats::_internal_add_stats() {
  return _impl_.stats_.Add();
}
inline ::CCitadelClientCachedPlayerStats_Stat* CCitadelClientCachedPlayerStats::add_stats() {
  ::CCitadelClientCachedPlayerStats_Stat* _add = _internal_add_stats();
  // @@protoc_insertion_point(field_add:CCitadelClientCachedPlayerStats.stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCitadelClientCachedPlayerStats_Stat >&
CCitadelClientCachedPlayerStats::stats() const {
  // @@protoc_insertion_point(field_list:CCitadelClientCachedPlayerStats.stats)
  return _impl_.stats_;
}

// -------------------------------------------------------------------

// CCitadelClientMsg_ExecuteMapUnitAbility

// optional int32 ability_entity_index = 1;
inline bool CCitadelClientMsg_ExecuteMapUnitAbility::_internal_has_ability_entity_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCitadelClientMsg_ExecuteMapUnitAbility::has_ability_entity_index() const {
  return _internal_has_ability_entity_index();
}
inline void CCitadelClientMsg_ExecuteMapUnitAbility::clear_ability_entity_index() {
  _impl_.ability_entity_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CCitadelClientMsg_ExecuteMapUnitAbility::_internal_ability_entity_index() const {
  return _impl_.ability_entity_index_;
}
inline int32_t CCitadelClientMsg_ExecuteMapUnitAbility::ability_entity_index() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_ExecuteMapUnitAbility.ability_entity_index)
  return _internal_ability_entity_index();
}
inline void CCitadelClientMsg_ExecuteMapUnitAbility::_internal_set_ability_entity_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ability_entity_index_ = value;
}
inline void CCitadelClientMsg_ExecuteMapUnitAbility::set_ability_entity_index(int32_t value) {
  _internal_set_ability_entity_index(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_ExecuteMapUnitAbility.ability_entity_index)
}

// optional int32 target_entity_index = 2;
inline bool CCitadelClientMsg_ExecuteMapUnitAbility::_internal_has_target_entity_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCitadelClientMsg_ExecuteMapUnitAbility::has_target_entity_index() const {
  return _internal_has_target_entity_index();
}
inline void CCitadelClientMsg_ExecuteMapUnitAbility::clear_target_entity_index() {
  _impl_.target_entity_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CCitadelClientMsg_ExecuteMapUnitAbility::_internal_target_entity_index() const {
  return _impl_.target_entity_index_;
}
inline int32_t CCitadelClientMsg_ExecuteMapUnitAbility::target_entity_index() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_ExecuteMapUnitAbility.target_entity_index)
  return _internal_target_entity_index();
}
inline void CCitadelClientMsg_ExecuteMapUnitAbility::_internal_set_target_entity_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.target_entity_index_ = value;
}
inline void CCitadelClientMsg_ExecuteMapUnitAbility::set_target_entity_index(int32_t value) {
  _internal_set_target_entity_index(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_ExecuteMapUnitAbility.target_entity_index)
}

// -------------------------------------------------------------------

// CCitadelClientMsg_CheaterVote

// optional bool end_game_immediately = 1;
inline bool CCitadelClientMsg_CheaterVote::_internal_has_end_game_immediately() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCitadelClientMsg_CheaterVote::has_end_game_immediately() const {
  return _internal_has_end_game_immediately();
}
inline void CCitadelClientMsg_CheaterVote::clear_end_game_immediately() {
  _impl_.end_game_immediately_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CCitadelClientMsg_CheaterVote::_internal_end_game_immediately() const {
  return _impl_.end_game_immediately_;
}
inline bool CCitadelClientMsg_CheaterVote::end_game_immediately() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_CheaterVote.end_game_immediately)
  return _internal_end_game_immediately();
}
inline void CCitadelClientMsg_CheaterVote::_internal_set_end_game_immediately(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.end_game_immediately_ = value;
}
inline void CCitadelClientMsg_CheaterVote::set_end_game_immediately(bool value) {
  _internal_set_end_game_immediately(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_CheaterVote.end_game_immediately)
}

// -------------------------------------------------------------------

// CCitadelClientMsg_MutePlayers

// repeated int32 player_slots = 1;
inline int CCitadelClientMsg_MutePlayers::_internal_player_slots_size() const {
  return _impl_.player_slots_.size();
}
inline int CCitadelClientMsg_MutePlayers::player_slots_size() const {
  return _internal_player_slots_size();
}
inline void CCitadelClientMsg_MutePlayers::clear_player_slots() {
  _impl_.player_slots_.Clear();
}
inline int32_t CCitadelClientMsg_MutePlayers::_internal_player_slots(int index) const {
  return _impl_.player_slots_.Get(index);
}
inline int32_t CCitadelClientMsg_MutePlayers::player_slots(int index) const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_MutePlayers.player_slots)
  return _internal_player_slots(index);
}
inline void CCitadelClientMsg_MutePlayers::set_player_slots(int index, int32_t value) {
  _impl_.player_slots_.Set(index, value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_MutePlayers.player_slots)
}
inline void CCitadelClientMsg_MutePlayers::_internal_add_player_slots(int32_t value) {
  _impl_.player_slots_.Add(value);
}
inline void CCitadelClientMsg_MutePlayers::add_player_slots(int32_t value) {
  _internal_add_player_slots(value);
  // @@protoc_insertion_point(field_add:CCitadelClientMsg_MutePlayers.player_slots)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CCitadelClientMsg_MutePlayers::_internal_player_slots() const {
  return _impl_.player_slots_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CCitadelClientMsg_MutePlayers::player_slots() const {
  // @@protoc_insertion_point(field_list:CCitadelClientMsg_MutePlayers.player_slots)
  return _internal_player_slots();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CCitadelClientMsg_MutePlayers::_internal_mutable_player_slots() {
  return &_impl_.player_slots_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CCitadelClientMsg_MutePlayers::mutable_player_slots() {
  // @@protoc_insertion_point(field_mutable_list:CCitadelClientMsg_MutePlayers.player_slots)
  return _internal_mutable_player_slots();
}

// optional bool unmute = 2;
inline bool CCitadelClientMsg_MutePlayers::_internal_has_unmute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCitadelClientMsg_MutePlayers::has_unmute() const {
  return _internal_has_unmute();
}
inline void CCitadelClientMsg_MutePlayers::clear_unmute() {
  _impl_.unmute_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CCitadelClientMsg_MutePlayers::_internal_unmute() const {
  return _impl_.unmute_;
}
inline bool CCitadelClientMsg_MutePlayers::unmute() const {
  // @@protoc_insertion_point(field_get:CCitadelClientMsg_MutePlayers.unmute)
  return _internal_unmute();
}
inline void CCitadelClientMsg_MutePlayers::_internal_set_unmute(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.unmute_ = value;
}
inline void CCitadelClientMsg_MutePlayers::set_unmute(bool value) {
  _internal_set_unmute(value);
  // @@protoc_insertion_point(field_set:CCitadelClientMsg_MutePlayers.unmute)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ECitadelClientMessages> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ECitadelClientMessages>() {
  return ::ECitadelClientMessages_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_citadel_5fclientmessages_2eproto
